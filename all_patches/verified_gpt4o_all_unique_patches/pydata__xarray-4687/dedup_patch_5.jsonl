{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4687", "model_patch": "diff --git a/xarray/core/ops.py b/xarray/core/ops.py\nindex 00a392c..3024c4d 100644\n--- a/xarray/core/ops.py\n+++ b/xarray/core/ops.py\n@@ -142,7 +142,7 @@ def fillna(data, other, join=\"left\", dataset_join=\"left\"):\n     \"\"\"\n     from .computation import apply_ufunc\n \n-    return apply_ufunc(\n+    result = apply_ufunc(\n         duck_array_ops.fillna,\n         data,\n         other,\n@@ -150,11 +150,14 @@ def fillna(data, other, join=\"left\", dataset_join=\"left\"):\n         dask=\"allowed\",\n         dataset_join=dataset_join,\n         dataset_fill_value=np.nan,\n-        keep_attrs=True,\n+        keep_attrs=keep_attrs,\n     )\n+    if keep_attrs:\n+        result.attrs = self.attrs\n+    return result\n \n \n-def where_method(self, cond, other=dtypes.NA):\n+def where_method(self, cond, other=dtypes.NA, keep_attrs=None):\n     \"\"\"Return elements from `self` or `other` depending on `cond`.\n \n     Parameters\n@@ -173,7 +176,7 @@ def where_method(self, cond, other=dtypes.NA):\n \n     # alignment for three arguments is complicated, so don't support it yet\n     join = \"inner\" if other is dtypes.NA else \"exact\"\n-    return apply_ufunc(\n+    result = apply_ufunc(\n         duck_array_ops.where_method,\n         self,\n         cond,\n@@ -181,8 +184,11 @@ def where_method(self, cond, other=dtypes.NA):\n         join=join,\n         dataset_join=join,\n         dask=\"allowed\",\n-        keep_attrs=True,\n+        keep_attrs=keep_attrs,\n     )\n+    if keep_attrs:\n+        result.attrs = self.attrs\n+    return result\n \n \n def _call_possibly_missing_method(arg, name, args, kwargs):\n", "occurrence": 1}
