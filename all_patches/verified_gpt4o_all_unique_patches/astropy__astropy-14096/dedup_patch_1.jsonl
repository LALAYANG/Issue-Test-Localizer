{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-14096", "model_patch": "diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py\nindex 7fb9e10..0deac52 100644\n--- a/astropy/coordinates/sky_coordinate.py\n+++ b/astropy/coordinates/sky_coordinate.py\n@@ -262,20 +262,23 @@ class SkyCoord(ShapedLikeNDArray):\n     def _is_name(self, string):\n         return self.frame.name == string or (isinstance(self.frame.name, list) and string in self.frame.name)\n     def __getattr__(self, attr):\n-        if '_sky_coord_frame' in self.__dict__:\n-            if self._is_name(attr):\n-                return self\n-            if attr in frame_transform_graph.frame_attributes:\n-                if attr in self.frame.frame_attributes:\n-                    return getattr(self.frame, attr)\n-                else:\n-                    return getattr(self, '_' + attr, None)\n-            if not attr.startswith('_') and hasattr(self._sky_coord_frame, attr):\n-                return getattr(self._sky_coord_frame, attr)\n-            frame_cls = frame_transform_graph.lookup_name(attr)\n-            if frame_cls is not None and self.frame.is_transformable_to(frame_cls):\n-                return self.transform_to(attr)\n-        raise AttributeError(f\"'{self.__class__.__name__}' object has no attribute '{attr}'\")\n+        try:\n+            if '_sky_coord_frame' in self.__dict__:\n+                if self._is_name(attr):\n+                    return self\n+                if attr in frame_transform_graph.frame_attributes:\n+                    if attr in self.frame.frame_attributes:\n+                        return getattr(self.frame, attr)\n+                    else:\n+                        return getattr(self, '_' + attr, None)\n+                if not attr.startswith('_') and hasattr(self._sky_coord_frame, attr):\n+                    return getattr(self._sky_coord_frame, attr)\n+                frame_cls = frame_transform_graph.lookup_name(attr)\n+                if frame_cls is not None and self.frame.is_transformable_to(frame_cls):\n+                    return self.transform_to(attr)\n+            raise AttributeError(f\"'{self.__class__.__name__}' object has no attribute '{attr}'\")\n+        except AttributeError as e:\n+            raise AttributeError(f\"'{self.__class__.__name__}' object has no attribute '{attr}'\") from e\n     def __setattr__(self, attr, val):\n         if '_sky_coord_frame' in self.__dict__:\n             if self._is_name(attr):"}
