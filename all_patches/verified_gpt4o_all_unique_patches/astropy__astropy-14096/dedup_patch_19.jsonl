{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-14096", "model_patch": "diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py\nindex f158027..9aa564f 100644\n--- a/astropy/coordinates/sky_coordinate.py\n+++ b/astropy/coordinates/sky_coordinate.py\n@@ -895,9 +895,16 @@ class SkyCoord(ShapedLikeNDArray):\n                 return self.transform_to(attr)\n \n         # Fail\n-        raise AttributeError(\n-            f\"'{self.__class__.__name__}' object has no attribute '{attr}'\"\n-        )\n+        # Check if the attribute error was due to a non-existent attribute in a property of a subclass\n+        try:\n+            return super().__getattr__(attr)\n+        except AttributeError as e:\n+            if attr in self.__class__.__dict__:\n+                raise e\n+            else:\n+                raise AttributeError(\n+                    f\"'{self.__class__.__name__}' object has no attribute '{attr}'\"\n+                ) from None\n \n     def __setattr__(self, attr, val):\n         # This is to make anything available through __getattr__ immutable\n", "occurrence": 1}
