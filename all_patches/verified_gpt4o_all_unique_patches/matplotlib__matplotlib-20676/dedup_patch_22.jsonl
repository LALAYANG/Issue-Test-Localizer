{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-20676", "model_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex a6bed3c..98265e6 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -2193,6 +2193,15 @@ class SpanSelector(_SelectorWidget):\n \n         return False\n \n+    def _update_axes_limits(self):\n+        \"\"\"Update the axes limits based on the current extents.\"\"\"\n+        if self.direction == 'horizontal':\n+            self.ax.set_xlim(min(self.extents[0], self.ax.get_xlim()[0]),\n+                             max(self.extents[1], self.ax.get_xlim()[1]))\n+        else:\n+            self.ax.set_ylim(min(self.extents[0], self.ax.get_ylim()[0]),\n+                             max(self.extents[1], self.ax.get_ylim()[1]))\n+\n     @property\n     def direction(self):\n         \"\"\"Direction of the span selector: 'vertical' or 'horizontal'.\"\"\"\n@@ -2271,6 +2280,7 @@ class SpanSelector(_SelectorWidget):\n                 vmin, vmax = vmax, vmin\n \n         self.extents = vmin, vmax\n+        self._update_axes_limits()\n \n         if self.onmove_callback is not None:\n             self.onmove_callback(vmin, vmax)\n@@ -2317,6 +2327,15 @@ class SpanSelector(_SelectorWidget):\n         \"\"\"Return True if event is within the patch.\"\"\"\n         return self._rect.contains(event, radius=0)[0]\n \n+    def _update_axes_limits(self):\n+        \"\"\"Update the axes limits based on the current extents.\"\"\"\n+        if self.direction == 'horizontal':\n+            self.ax.set_xlim(min(self.extents[0], self.ax.get_xlim()[0]),\n+                             max(self.extents[1], self.ax.get_xlim()[1]))\n+        else:\n+            self.ax.set_ylim(min(self.extents[0], self.ax.get_ylim()[0]),\n+                             max(self.extents[1], self.ax.get_ylim()[1]))\n+\n     @property\n     def extents(self):\n         \"\"\"Return extents of the span selector.\"\"\"\n"}
