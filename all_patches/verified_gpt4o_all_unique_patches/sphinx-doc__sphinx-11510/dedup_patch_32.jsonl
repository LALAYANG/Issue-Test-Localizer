{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-11510", "model_patch": "diff --git a/sphinx/events.py b/sphinx/events.py\nindex 7d40ddd..2c5e68a 100644\n--- a/sphinx/events.py\n+++ b/sphinx/events.py\n@@ -40,11 +40,13 @@ class EventManager:\n     def emit(self, name: str, *args: Any, allowed_exceptions: tuple[type[Exception], ...]=()) -> list:\n         with contextlib.suppress(Exception):\n             logger.debug('[app] emitting event: %r%s', name, repr(args)[:100])\n-        results = []\n+        all_results = []\n         listeners = sorted(self.listeners[name], key=attrgetter('priority'))\n         for listener in listeners:\n             try:\n-                results.append(listener.handler(self.app, *args))\n+                result = listener.handler(self.app, *args)\n+                if result is not None:\n+                    all_results.append(result)\n             except allowed_exceptions:\n                 raise\n             except SphinxError:\n@@ -54,7 +56,9 @@ class EventManager:\n                     raise\n                 modname = safe_getattr(listener.handler, '__module__', None)\n                 raise ExtensionError(__('Handler %r for event %r threw an exception') % (listener.handler, name), exc, modname=modname) from exc\n-        return results\n+        if name == 'source-read' and all_results:\n+            args[1][0] = ''.join(all_results)\n+        return all_results\n     def emit_firstresult(self, name: str, *args: Any, allowed_exceptions: tuple[type[Exception], ...]=()) -> Any:\n         for result in self.emit(name, *args, allowed_exceptions=allowed_exceptions):\n             if result is not None:"}
