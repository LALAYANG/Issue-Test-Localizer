{"model_name_or_path": "agentless", "instance_id": "django__django-12325", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 77c04dd..cc02cc7 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -193,18 +193,23 @@ class ModelBase(type):\n \n         # Collect the parent links for multi-table inheritance.\n         parent_links = {}\n+        for base in parents:\n+            if not hasattr(base, '_meta'):\n+                continue\n+            for field in base._meta.local_fields:\n+                if isinstance(field, OneToOneField) and field.remote_field.parent_link:\n+                    related = resolve_relation(new_class, field.remote_field.model)\n+                    parent_links[make_model_tuple(related)] = field\n         for base in reversed([new_class] + parents):\n-            # Conceptually equivalent to `if base is Model`.\n             if not hasattr(base, '_meta'):\n                 continue\n-            # Skip concrete parent classes.\n             if base != new_class and not base._meta.abstract:\n                 continue\n-            # Locate OneToOneField instances.\n             for field in base._meta.local_fields:\n-                if isinstance(field, OneToOneField):\n+                if isinstance(field, OneToOneField) and not field.remote_field.parent_link:\n                     related = resolve_relation(new_class, field.remote_field.model)\n-                    parent_links[make_model_tuple(related)] = field\n+                    if make_model_tuple(related) not in parent_links:\n+                        parent_links[make_model_tuple(related)] = field\n \n         # Track fields inherited from base models.\n         inherited_attributes = set()\n"}
