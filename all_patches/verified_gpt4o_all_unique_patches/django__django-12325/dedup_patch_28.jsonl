{"model_name_or_path": "agentless", "instance_id": "django__django-12325", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 0ae5317..ed0e60a 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -99,15 +99,17 @@ class ModelBase(type):\n         else:\n             new_class._meta.concrete_model = new_class\n         parent_links = {}\n-        for base in reversed([new_class] + parents):\n+        all_bases = [new_class] + list(parents)\n+        for base in reversed(all_bases):\n             if not hasattr(base, '_meta'):\n                 continue\n-            if base != new_class and (not base._meta.abstract):\n-                continue\n             for field in base._meta.local_fields:\n-                if isinstance(field, OneToOneField):\n+                if isinstance(field, OneToOneField) and field.parent_link:\n                     related = resolve_relation(new_class, field.remote_field.model)\n                     parent_links[make_model_tuple(related)] = field\n+        for base in reversed(all_bases):\n+            if not hasattr(base, '_meta') or (base != new_class and (not base._meta.abstract)):\n+                continue\n         inherited_attributes = set()\n         for base in new_class.mro():\n             if base not in parents or not hasattr(base, '_meta'):"}
