{"model_name_or_path": "agentless", "instance_id": "django__django-12325", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 77c04dd..4c29637 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -193,6 +193,7 @@ class ModelBase(type):\n \n         # Collect the parent links for multi-table inheritance.\n         parent_links = {}\n+        parent_links_fields = []\n         for base in reversed([new_class] + parents):\n             # Conceptually equivalent to `if base is Model`.\n             if not hasattr(base, '_meta'):\n@@ -203,8 +204,15 @@ class ModelBase(type):\n             # Locate OneToOneField instances.\n             for field in base._meta.local_fields:\n                 if isinstance(field, OneToOneField):\n-                    related = resolve_relation(new_class, field.remote_field.model)\n-                    parent_links[make_model_tuple(related)] = field\n+                    if field.remote_field.parent_link:\n+                        parent_links_fields.append(field)\n+                    else:\n+                        related = resolve_relation(new_class, field.remote_field.model)\n+                        parent_links[make_model_tuple(related)] = field\n+\n+        for field in parent_links_fields:\n+            related = resolve_relation(new_class, field.remote_field.model)\n+            parent_links[make_model_tuple(related)] = field\n \n         # Track fields inherited from base models.\n         inherited_attributes = set()\n", "occurrence": 1}
