{"model_name_or_path": "agentless", "instance_id": "django__django-14155", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 43e675a..9cfe4e5 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -26,12 +26,20 @@ from django.utils.translation import get_language\n \n from .converters import get_converter\n from .exceptions import NoReverseMatch, Resolver404\n+import functools\n from .utils import get_callable\n \n \n class ResolverMatch:\n     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):\n-        self.func = func\n+        if isinstance(func, functools.partial):\n+            self.func = func.func\n+            self.partial_args = func.args\n+            self.partial_kwargs = func.keywords\n+        else:\n+            self.func = func\n+            self.partial_args = None\n+            self.partial_kwargs = None\n         self.args = args\n         self.kwargs = kwargs\n         self.url_name = url_name\n@@ -59,8 +67,11 @@ class ResolverMatch:\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n+        func_repr = self._func_path\n+        if self.partial_args or self.partial_kwargs:\n+            func_repr += \"(args=%s, kwargs=%s)\" % (self.partial_args, self.partial_kwargs)\n         return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n+            func_repr, self.args, self.kwargs, self.url_name,\n             self.app_names, self.namespaces, self.route,\n         )\n \n", "occurrence": 1}
