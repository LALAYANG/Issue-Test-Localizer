{"model_name_or_path": "agentless", "instance_id": "django__django-14155", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 43e675a..cc61891 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -19,6 +19,7 @@ from django.core.checks import Error, Warning\n from django.core.checks.urls import check_resolver\n from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist\n from django.utils.datastructures import MultiValueDict\n+import functools\n from django.utils.functional import cached_property\n from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes\n from django.utils.regex_helper import _lazy_re_compile, normalize\n@@ -31,6 +32,13 @@ from .utils import get_callable\n \n class ResolverMatch:\n     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):\n+        if isinstance(func, functools.partial):\n+            self.partial_args = func.args\n+            self.partial_keywords = func.keywords\n+            func = func.func\n+        else:\n+            self.partial_args = ()\n+            self.partial_keywords = {}\n         self.func = func\n         self.args = args\n         self.kwargs = kwargs\n@@ -59,8 +67,14 @@ class ResolverMatch:\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n+        if self.partial_args or self.partial_keywords:\n+            func_repr = \"functools.partial(%s, *%s, **%s)\" % (\n+                self._func_path, self.partial_args, self.partial_keywords\n+            )\n+        else:\n+            func_repr = self._func_path\n         return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n+            func_repr, self.args, self.kwargs, self.url_name,\n             self.app_names, self.namespaces, self.route,\n         )\n \n"}
