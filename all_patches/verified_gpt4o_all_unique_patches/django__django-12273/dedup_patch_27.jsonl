{"model_name_or_path": "agentless", "instance_id": "django__django-12273", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 07c5013..ea87257 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -772,18 +772,22 @@ class Model(metaclass=ModelBase):\n                 update_fields=update_fields,\n             )\n         # A transaction isn't needed if one query is issued.\n-        if meta.parents:\n-            context_manager = transaction.atomic(using=using, savepoint=False)\n+        if self.pk is not None:\n+            if meta.parents:\n+                context_manager = transaction.atomic(using=using, savepoint=False)\n+            else:\n+                context_manager = transaction.mark_for_rollback_on_error(using=using)\n+            with context_manager:\n+                parent_inserted = False\n+                if not raw:\n+                    parent_inserted = self._save_parents(cls, using, update_fields)\n+                updated = self._save_table(\n+                    raw, cls, force_insert or parent_inserted,\n+                    force_update, using, update_fields,\n+                )\n         else:\n-            context_manager = transaction.mark_for_rollback_on_error(using=using)\n-        with context_manager:\n-            parent_inserted = False\n-            if not raw:\n-                parent_inserted = self._save_parents(cls, using, update_fields)\n-            updated = self._save_table(\n-                raw, cls, force_insert or parent_inserted,\n-                force_update, using, update_fields,\n-            )\n+            force_insert = True\n+            updated = False\n         # Store the database on which the object was saved\n         self._state.db = using\n         # Once saved, this is no longer a to-be-added instance.\n@@ -841,8 +845,9 @@ class Model(metaclass=ModelBase):\n \n         pk_val = self._get_pk_val(meta)\n         if pk_val is None:\n-            pk_val = meta.pk.get_pk_value_on_save(self)\n-            setattr(self, meta.pk.attname, pk_val)\n+            if not force_update:\n+                pk_val = meta.pk.get_pk_value_on_save(self)\n+                setattr(self, meta.pk.attname, pk_val)\n         pk_set = pk_val is not None\n         if not pk_set and (force_update or update_fields):\n             raise ValueError(\"Cannot force an update in save() with no primary key.\")\n"}
