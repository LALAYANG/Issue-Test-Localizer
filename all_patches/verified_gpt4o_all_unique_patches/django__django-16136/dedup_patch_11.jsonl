{"model_name_or_path": "agentless", "instance_id": "django__django-16136", "model_patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex 5df17b3..d276ac3 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -84,7 +84,10 @@ class BaseHandler:\n         response = await self._middleware_chain(request)\n         response._resource_closers.append(request.close)\n         if response.status_code >= 400:\n-            await sync_to_async(log_response, thread_sensitive=False)('%s: %s', response.reason_phrase, request.path, response=response, request=request)\n+            if asyncio.iscoroutinefunction(log_response):\n+                await sync_to_async(log_response, thread_sensitive=False)('%s: %s', response.reason_phrase, request.path, response=response, request=request)\n+            else:\n+                log_response('%s: %s', response.reason_phrase, request.path, response=response, request=request)\n         return response\n     def _get_response(self, request):\n         response = None\n@@ -104,16 +107,18 @@ class BaseHandler:\n                 if response is None:\n                     raise\n         self.check_response(response, callback)\n-        if hasattr(response, 'render') and callable(response.render):\n-            for middleware_method in self._template_response_middleware:\n-                response = middleware_method(request, response)\n-                self.check_response(response, middleware_method, name='%s.process_template_response' % (middleware_method.__self__.__class__.__name__,))\n-            try:\n-                response = response.render()\n-            except Exception as e:\n-                response = self.process_exception_by_middleware(e, request)\n-                if response is None:\n-                    raise\n+        if not hasattr(response, '__await__'):\n+            if hasattr(response, 'render') and callable(response.render):\n+                for middleware_method in self._template_response_middleware:\n+                    response = middleware_method(request, response)\n+                    self.check_response(response, middleware_method, name='%s.process_template_response' % (middleware_method.__self__.__class__.__name__,))\n+                try:\n+                    response = response.render()\n+                except Exception as e:\n+                    response = self.process_exception_by_middleware(e, request)\n+                    if response is None:\n+                        raise\n+            return response\n         return response\n     async def _get_response_async(self, request):\n         response = None"}
