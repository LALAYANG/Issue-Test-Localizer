{"model_name_or_path": "agentless", "instance_id": "django__django-16136", "model_patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex 940d12d..45a96bd 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -192,13 +192,19 @@ class BaseHandler:\n             wrapped_callback = self.make_view_atomic(callback)\n             # If it is an asynchronous view, run it in a subthread.\n             if asyncio.iscoroutinefunction(wrapped_callback):\n-                wrapped_callback = async_to_sync(wrapped_callback)\n-            try:\n-                response = wrapped_callback(request, *callback_args, **callback_kwargs)\n-            except Exception as e:\n-                response = self.process_exception_by_middleware(e, request)\n-                if response is None:\n-                    raise\n+                try:\n+                    response = await wrapped_callback(request, *callback_args, **callback_kwargs)\n+                except Exception as e:\n+                    response = await self.process_exception_by_middleware(e, request)\n+                    if response is None:\n+                        raise\n+            else:\n+                try:\n+                    response = wrapped_callback(request, *callback_args, **callback_kwargs)\n+                except Exception as e:\n+                    response = self.process_exception_by_middleware(e, request)\n+                    if response is None:\n+                        raise\n \n         # Complain if the view returned None (a common error).\n         self.check_response(response, callback)\n"}
