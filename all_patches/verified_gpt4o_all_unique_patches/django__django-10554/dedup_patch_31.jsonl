{"model_name_or_path": "agentless", "instance_id": "django__django-10554", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex ab425fb..cc80308 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -404,7 +404,9 @@ class SQLCompiler:\n         else:\n             sql, params = node.as_sql(self, self.connection)\n         if select_format is FORCE or (select_format and not self.query.subquery):\n-            return node.output_field.select_format(self, sql, params)\n+            if hasattr(node, 'output_field') and node.output_field:\n+                return node.output_field.select_format(self, sql, params)\n+            return sql, params\n         return sql, params\n \n     def get_combinator_sql(self, combinator, all):\n@@ -420,7 +422,18 @@ class SQLCompiler:\n                 if compiler.get_order_by():\n                     raise DatabaseError('ORDER BY not allowed in subqueries of compound statements.')\n         parts = ()\n+        # Ensure all ORDER BY columns are selected in combined queries\n+        order_by_cols = [expr for expr, (sql, params, is_ref) in self.get_order_by()]\n         for compiler in compilers:\n+            if order_by_cols:\n+                select_sql = [t[1] for t in compiler.select]\n+                for expr in order_by_cols:\n+                    sql, params = compiler.compile(expr)\n+                    without_ordering = compiler.ordering_parts.search(sql).group(1)\n+                    if (without_ordering, params) not in select_sql:\n+                        compiler.select.append(\n+                            (expr, (without_ordering, params), None)\n+                        )\n             try:\n                 # If the columns list is limited, then all combined queries\n                 # must have the same columns list. Set the selects defined on\n"}
