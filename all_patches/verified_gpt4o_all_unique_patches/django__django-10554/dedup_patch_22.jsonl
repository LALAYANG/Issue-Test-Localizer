{"model_name_or_path": "agentless", "instance_id": "django__django-10554", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 0a7444d..6f06bdb 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -124,6 +124,11 @@ class SQLCompiler:\n             except EmptyResultSet:\n                 sql, params = ('0', ())\n             ret.append((col, (sql, params), alias))\n+        if self.query.combinator:\n+            order_by = self.get_order_by()\n+            for expr, (sql, params, is_ref) in order_by:\n+                if isinstance(expr, OrderBy) and (not is_ref):\n+                    ret.append((expr.expression, (sql, params), None))\n         return (ret, klass_info, annotations)\n     def get_order_by(self):\n         if self.query.extra_order_by:\n@@ -236,7 +241,10 @@ class SQLCompiler:\n                 if query.low_mark or query.high_mark:\n                     raise DatabaseError('LIMIT/OFFSET not allowed in subqueries of compound statements.')\n                 if compiler.get_order_by():\n-                    raise DatabaseError('ORDER BY not allowed in subqueries of compound statements.')\n+                    select_list, _, _ = compiler.get_select()\n+                    for order_by_col, (sql, params, _) in compiler.get_order_by():\n+                        if order_by_col not in {col[0] for col in select_list}:\n+                            select_list.append((order_by_col, (sql, params), None))\n         parts = ()\n         for compiler in compilers:\n             try:"}
