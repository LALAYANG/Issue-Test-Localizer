{"model_name_or_path": "agentless", "instance_id": "django__django-13346", "model_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex a0dea96..7ffab4f 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -292,11 +292,24 @@ class KeyTransform(Transform):\n         return (lhs, params, key_transforms) if not lhs_only else (lhs, params)\n \n     def as_mysql(self, compiler, connection):\n+        if isinstance(self.rhs, list):\n+            placeholders = ', '.join(['%s'] * len(self.rhs))\n+            lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n+            json_path = compile_json_path(key_transforms)\n+            return f'JSON_UNQUOTE(JSON_EXTRACT({lhs}, %s)) IN ({placeholders})', tuple(params) + (json_path,) + tuple(self.rhs)\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n         return 'JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,)\n \n     def as_oracle(self, compiler, connection):\n+        if isinstance(self.rhs, list):\n+            placeholders = ', '.join(['%s'] * len(self.rhs))\n+            lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n+            json_path = compile_json_path(key_transforms)\n+            return (\n+                f\"COALESCE(JSON_QUERY({lhs}, '{json_path}'), JSON_VALUE({lhs}, '{json_path}')) IN ({placeholders})\",\n+                tuple(params) * 2 + tuple(self.rhs)\n+            )\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n         return (\n@@ -315,6 +328,11 @@ class KeyTransform(Transform):\n         return '(%s %s %%s)' % (lhs, self.postgres_operator), tuple(params) + (lookup,)\n \n     def as_sqlite(self, compiler, connection):\n+        if isinstance(self.rhs, list):\n+            placeholders = ', '.join(['%s'] * len(self.rhs))\n+            lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n+            json_path = compile_json_path(key_transforms)\n+            return f'JSON_EXTRACT({lhs}, %s) IN ({placeholders})', tuple(params) + (json_path,) + tuple(self.rhs)\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n         return 'JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,)\n", "occurrence": 1}
