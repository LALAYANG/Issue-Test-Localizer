{"model_name_or_path": "agentless", "instance_id": "django__django-13346", "model_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex a0dea96..219ddc1 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -291,12 +291,22 @@ class KeyTransform(Transform):\n             key_transforms = [key.replace('%', '%%') for key in key_transforms]\n         return (lhs, params, key_transforms) if not lhs_only else (lhs, params)\n \n-    def as_mysql(self, compiler, connection):\n+    def as_mysql(self, compiler, connection, lhs_only=False):\n+        if self.lookup_name == 'in':\n+            lhs, params, key_transforms = self.preprocess_lhs(compiler, connection, lhs_only)\n+            json_path = compile_json_path(key_transforms)\n+            return 'JSON_UNQUOTE(JSON_EXTRACT(%s, %%s)) IN %%s' % lhs, tuple(params) + (json_path,)\n+        lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n         return 'JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,)\n \n-    def as_oracle(self, compiler, connection):\n+    def as_oracle(self, compiler, connection, lhs_only=False):\n+        if self.lookup_name == 'in':\n+            lhs, params, key_transforms = self.preprocess_lhs(compiler, connection, lhs_only)\n+            json_path = compile_json_path(key_transforms)\n+            return 'COALESCE(JSON_VALUE(%s, %s), JSON_QUERY(%s, %s)) IN %%s' % (lhs, json_path, lhs, json_path), tuple(params) * 2\n+        lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n         return (\n@@ -314,7 +324,12 @@ class KeyTransform(Transform):\n             lookup = self.key_name\n         return '(%s %s %%s)' % (lhs, self.postgres_operator), tuple(params) + (lookup,)\n \n-    def as_sqlite(self, compiler, connection):\n+    def as_sqlite(self, compiler, connection, lhs_only=False):\n+        if self.lookup_name == 'in':\n+            lhs, params, key_transforms = self.preprocess_lhs(compiler, connection, lhs_only)\n+            json_path = compile_json_path(key_transforms)\n+            return 'JSON_UNQUOTE(JSON_EXTRACT(%s, %%s)) IN %%s' % lhs, tuple(params) + (json_path,)\n+        lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n         return 'JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,)\n"}
