{"model_name_or_path": "agentless", "instance_id": "django__django-13346", "model_patch": "--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n+@KeyTransform.register_lookup\n+class KeyTransformIn(KeyTransformInLookupMixin, lookups.In):\n+    lookup_name = 'in'\n+class KeyTransformInLookupMixin:\n+    def get_prep_lookup(self):\n+        prepared_values = []\n+        for value in self.rhs:\n+            prepared_values.append(value)\n+        return prepared_values\n+    def as_sql(self, compiler, connection):\n+        lhs, lhs_params, key_transforms = self.preprocess_lhs(compiler, connection)\n+        rhs = self.get_prep_lookup()\n+        if connection.vendor == 'mysql':\n+            json_path = compile_json_path(key_transforms)\n+            in_clause = ', '.join(['JSON_EXTRACT(%s, %%s)' % lhs] * len(rhs))\n+            return ('%s IN (%s)' % (lhs, in_clause), tuple(lhs_params + [json_path] * len(rhs) + rhs))\n+        elif connection.vendor == 'oracle':\n+            json_path = compile_json_path(key_transforms)\n+            in_clause = ', '.join([\"COALESCE(JSON_QUERY(%s, '%s'), JSON_VALUE(%s, '%s'))\" % (lhs, json_path, lhs, json_path)] * len(rhs))\n+            return ('%s IN (%s)' % (lhs, in_clause), tuple(lhs_params * 2 * len(rhs) + rhs))\n+        elif connection.vendor == 'sqlite':\n+            json_path = compile_json_path(key_transforms)\n+            in_clause = ', '.join(['JSON_EXTRACT(%s, %%s)' % lhs] * len(rhs))\n+            return ('%s IN (%s)' % (lhs, in_clause), tuple(lhs_params + [json_path] * len(rhs) + rhs))\n+        else:\n+            raise NotImplementedError('IN lookup not implemented for this database backend')"}
