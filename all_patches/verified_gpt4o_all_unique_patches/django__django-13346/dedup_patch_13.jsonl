{"model_name_or_path": "agentless", "instance_id": "django__django-13346", "model_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex a0dea96..92ed14b 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -291,18 +291,24 @@ class KeyTransform(Transform):\n             key_transforms = [key.replace('%', '%%') for key in key_transforms]\n         return (lhs, params, key_transforms) if not lhs_only else (lhs, params)\n \n-    def as_mysql(self, compiler, connection):\n+    def as_mysql(self, compiler, connection, process_in_lookup=False):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n-        return 'JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,)\n+        if process_in_lookup:\n+            return lhs, params, json_path\n+        else:\n+            return 'JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,)\n \n-    def as_oracle(self, compiler, connection):\n+    def as_oracle(self, compiler, connection, process_in_lookup=False):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n-        return (\n-            \"COALESCE(JSON_QUERY(%s, '%s'), JSON_VALUE(%s, '%s'))\" %\n-            ((lhs, json_path) * 2)\n-        ), tuple(params) * 2\n+        if process_in_lookup:\n+            return lhs, params, json_path\n+        else:\n+            return (\n+                \"COALESCE(JSON_QUERY(%s, '%s'), JSON_VALUE(%s, '%s'))\" %\n+                ((lhs, json_path) * 2)\n+            ), tuple(params) * 2\n \n     def as_postgresql(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n@@ -314,10 +320,13 @@ class KeyTransform(Transform):\n             lookup = self.key_name\n         return '(%s %s %%s)' % (lhs, self.postgres_operator), tuple(params) + (lookup,)\n \n-    def as_sqlite(self, compiler, connection):\n+    def as_sqlite(self, compiler, connection, process_in_lookup=False):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n-        return 'JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,)\n+        if process_in_lookup:\n+            return lhs, params, json_path\n+        else:\n+            return 'JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,)\n \n \n class KeyTextTransform(KeyTransform):\n", "occurrence": 1}
