{"model_name_or_path": "agentless", "instance_id": "django__django-15252", "model_patch": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex c1743b4..a377018 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -30,6 +30,8 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n     def ensure_schema(self):\n+        if not router.allow_migrate(self.connection.alias, self.Migration):\n+            return\n         if self.has_table():\n             return\n         try:\n@@ -38,14 +40,20 @@ class MigrationRecorder:\n         except DatabaseError as exc:\n             raise MigrationSchemaMissing('Unable to create the django_migrations table (%s)' % exc)\n     def applied_migrations(self):\n+        if not router.allow_migrate(self.connection.alias, self.Migration):\n+            return {}\n         if self.has_table():\n             return {(migration.app, migration.name): migration for migration in self.migration_qs}\n         else:\n             return {}\n     def record_applied(self, app, name):\n+        if not router.allow_migrate(self.connection.alias, self.Migration):\n+            return\n         self.ensure_schema()\n         self.migration_qs.create(app=app, name=name)\n     def record_unapplied(self, app, name):\n+        if not router.allow_migrate(self.connection.alias, self.Migration):\n+            return\n         self.ensure_schema()\n         self.migration_qs.filter(app=app, name=name).delete()\n     def flush(self):"}
