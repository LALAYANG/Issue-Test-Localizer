{"model_name_or_path": "agentless", "instance_id": "django__django-15252", "model_patch": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex c1743b4..fa811ae 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -30,13 +30,17 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n     def ensure_schema(self):\n-        if self.has_table():\n-            return\n-        try:\n-            with self.connection.schema_editor() as editor:\n-                editor.create_model(self.Migration)\n-        except DatabaseError as exc:\n-            raise MigrationSchemaMissing('Unable to create the django_migrations table (%s)' % exc)\n+        if self.connection.alias == 'default' and (not router.allow_migrate(self.connection.alias, self.Migration)):\n+            if not self.has_table():\n+                raise MigrationSchemaMissing(\"Migration table is missing for the 'default' database.\")\n+        else:\n+            if self.has_table():\n+                return\n+            try:\n+                with self.connection.schema_editor() as editor:\n+                    editor.create_model(self.Migration)\n+            except DatabaseError as exc:\n+                raise MigrationSchemaMissing('Unable to create the django_migrations table (%s)' % exc)\n     def applied_migrations(self):\n         if self.has_table():\n             return {(migration.app, migration.name): migration for migration in self.migration_qs}"}
