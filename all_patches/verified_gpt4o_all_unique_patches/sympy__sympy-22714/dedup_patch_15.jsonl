{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22714", "model_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex c16ec77..86559ba 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -910,8 +910,10 @@ def eval_expr(code, local_dict, global_dict):\n \n     Generally, ``parse_expr`` should be used.\n     \"\"\"\n-    expr = eval(\n-        code, global_dict, local_dict)  # take local objects in preference\n+    # Set the evaluation context for creating objects like Point2D\n+    with evaluate(False):\n+        expr = eval(\n+            code, global_dict, local_dict)  # take local objects in preference\n     return expr\n \n \n@@ -1106,6 +1108,15 @@ def evaluateFalse(s):\n     \"\"\"\n     node = ast.parse(s)\n     node = EvaluateFalseTransformer().visit(node)\n+    \n+    # Ensure all nodes are wrapped in an evaluation context\n+    for expr in node.body:\n+        expr.value = ast.Call(\n+            func=ast.Attribute(value=ast.Name(id='sp', ctx=ast.Load()), attr='evaluate', ctx=ast.Load()),\n+            args=[expr.value],\n+            keywords=[ast.keyword(arg='evaluate', value=ast.Constant(value=False))]\n+        )\n+    \n     # node is a Module, we want an Expression\n     node = ast.Expression(node.body[0].value)\n \n", "occurrence": 1}
