{"model_name_or_path": "agentless", "instance_id": "django__django-12039", "model_patch": "diff --git a/django/db/backends/ddl_references.py b/django/db/backends/ddl_references.py\nindex 1e5b986..3ea1efa 100644\n--- a/django/db/backends/ddl_references.py\n+++ b/django/db/backends/ddl_references.py\n@@ -84,9 +84,10 @@ class Columns(TableColumns):\n     def __str__(self):\n         def col_str(column, idx):\n             try:\n-                return self.quote_name(column) + self.col_suffixes[idx]\n+                col_suffix = ' ' + self.col_suffixes[idx] if self.col_suffixes[idx] else ''\n             except IndexError:\n-                return self.quote_name(column)\n+                col_suffix = ''\n+            return self.quote_name(column) + col_suffix\n \n         return ', '.join(col_str(column, idx) for idx, column in enumerate(self.columns))\n \n@@ -112,12 +113,12 @@ class IndexColumns(Columns):\n         def col_str(column, idx):\n             # Index.__init__() guarantees that self.opclasses is the same\n             # length as self.columns.\n-            col = '{} {}'.format(self.quote_name(column), self.opclasses[idx])\n+            opclass = ' ' + self.opclasses[idx] if self.opclasses[idx] else ''\n             try:\n-                col = '{} {}'.format(col, self.col_suffixes[idx])\n+                col_suffix = ' ' + self.col_suffixes[idx] if self.col_suffixes[idx] else ''\n             except IndexError:\n-                pass\n-            return col\n+                col_suffix = ''\n+            return '{}{}{}'.format(self.quote_name(column), opclass, col_suffix)\n \n         return ', '.join(col_str(column, idx) for idx, column in enumerate(self.columns))\n \n"}
