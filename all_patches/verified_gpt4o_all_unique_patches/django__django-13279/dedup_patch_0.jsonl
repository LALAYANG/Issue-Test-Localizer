{"model_name_or_path": "agentless", "instance_id": "django__django-13279", "model_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex 5b06482..054474a 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -108,18 +108,27 @@ class SessionBase:\n \n     def encode(self, session_dict):\n         \"Return the given session dictionary serialized and encoded as a string.\"\n-        return signing.dumps(\n-            session_dict, salt=self.key_salt, serializer=self.serializer,\n-            compress=True,\n-        )\n+        # Use legacy encode() if DEFAULT_HASHING_ALGORITHM is 'sha1'\n+        if settings.DEFAULT_HASHING_ALGORITHM == 'sha1':\n+            session_data = self.serializer().dumps(session_dict)\n+            hash = self._hash(session_data.encode('utf-8'))\n+            return base64.b64encode(hash.encode() + b':' + session_data.encode('utf-8')).decode('ascii')\n+        else:\n+            return signing.dumps(\n+                session_dict, salt=self.key_salt, serializer=self.serializer,\n+                compress=True,\n+            )\n \n     def decode(self, session_data):\n         try:\n+            # Attempt to decode using the new format\n             return signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)\n-        # RemovedInDjango40Warning: when the deprecation ends, handle here\n-        # exceptions similar to what _legacy_decode() does now.\n-        except Exception:\n-            return self._legacy_decode(session_data)\n+        except signing.BadSignature:\n+            # Fallback to legacy decode if DEFAULT_HASHING_ALGORITHM is 'sha1'\n+            if settings.DEFAULT_HASHING_ALGORITHM == 'sha1':\n+                return self._legacy_decode(session_data)\n+            else:\n+                raise\n \n     def _legacy_decode(self, session_data):\n         # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.\n", "occurrence": 1}
