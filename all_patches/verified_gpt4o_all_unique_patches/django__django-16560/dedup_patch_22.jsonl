{"model_name_or_path": "agentless", "instance_id": "django__django-16560", "model_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 50c20cc..a55e763 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -15,7 +15,8 @@ __all__ = ['BaseConstraint', 'CheckConstraint', 'Deferrable', 'UniqueConstraint'\n class BaseConstraint:\n     default_violation_error_message = _('Constraint \u201c%(name)s\u201d is violated.')\n     violation_error_message = None\n-    def __init__(self, *args, name=None, violation_error_message=None):\n+    def __init__(self, *args, name=None, violation_error_message=None, violation_error_code=None):\n+        self.violation_error_code = violation_error_code\n         if name is None and (not args):\n             raise TypeError(f\"{self.__class__.__name__}.__init__() missing 1 required keyword-only argument: 'name'\")\n         self.name = name\n@@ -23,6 +24,7 @@ class BaseConstraint:\n             self.violation_error_message = violation_error_message\n         else:\n             self.violation_error_message = self.default_violation_error_message\n+        self.violation_error_code = violation_error_code\n         if args:\n             warnings.warn(f'Passing positional arguments to {self.__class__.__name__} is deprecated.', RemovedInDjango60Warning, stacklevel=2)\n             for arg, attr in zip(args, ['name', 'violation_error_message']):\n@@ -40,7 +42,7 @@ class BaseConstraint:\n     def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n         raise NotImplementedError('This method must be implemented by a subclass.')\n     def get_violation_error_message(self):\n-        return self.violation_error_message % {'name': self.name}\n+        return {'message': self.violation_error_message % {'name': self.name}, 'code': self.violation_error_code}\n     def deconstruct(self):\n         path = '%s.%s' % (self.__class__.__module__, self.__class__.__name__)\n         path = path.replace('django.db.models.constraints', 'django.db.models')\n@@ -75,7 +77,8 @@ class CheckConstraint(BaseConstraint):\n         against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n         try:\n             if not Q(self.check).check(against, using=using):\n-                raise ValidationError(self.get_violation_error_message())\n+                violation_error = self.get_violation_error_message()\n+                raise ValidationError(violation_error['message'], code=violation_error['code'])\n         except FieldError:\n             pass\n     def __repr__(self):\n@@ -219,15 +222,18 @@ class UniqueConstraint(BaseConstraint):\n         if not self.condition:\n             if queryset.exists():\n                 if self.expressions:\n-                    raise ValidationError(self.get_violation_error_message())\n+                    violation_error = self.get_violation_error_message()\n+                    raise ValidationError(violation_error['message'], code=violation_error['code'])\n                 for model, constraints in instance.get_constraints():\n                     for constraint in constraints:\n                         if constraint is self:\n-                            raise ValidationError(instance.unique_error_message(model, self.fields))\n+                            violation_error = self.get_violation_error_message()\n+                            raise ValidationError(instance.unique_error_message(model, self.fields), code=violation_error['code'])\n         else:\n             against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n             try:\n                 if (self.condition & Exists(queryset.filter(self.condition))).check(against, using=using):\n-                    raise ValidationError(self.get_violation_error_message())\n+                    violation_error = self.get_violation_error_message()\n+                    raise ValidationError(violation_error['message'], code=violation_error['code'])\n             except FieldError:\n                 pass\n\\ No newline at end of file"}
