{"model_name_or_path": "agentless", "instance_id": "django__django-16560", "model_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 8b23275..ecb9d4a 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -22,7 +22,8 @@ class BaseConstraint:\n \n     # RemovedInDjango60Warning: When the deprecation ends, replace with:\n     # def __init__(self, *, name, violation_error_message=None):\n-    def __init__(self, *args, name=None, violation_error_message=None):\n+    def __init__(self, *args, name=None, violation_error_message=None, violation_error_code=None):\n+        self.violation_error_code = violation_error_code\n         # RemovedInDjango60Warning.\n         if name is None and not args:\n             raise TypeError(\n@@ -63,7 +64,7 @@ class BaseConstraint:\n         raise NotImplementedError(\"This method must be implemented by a subclass.\")\n \n     def get_violation_error_message(self):\n-        return self.violation_error_message % {\"name\": self.name}\n+        return self.violation_error_message % {\"name\": self.name}, self.violation_error_code\n \n     def deconstruct(self):\n         path = \"%s.%s\" % (self.__class__.__module__, self.__class__.__name__)\n@@ -82,13 +83,14 @@ class BaseConstraint:\n \n \n class CheckConstraint(BaseConstraint):\n-    def __init__(self, *, check, name, violation_error_message=None):\n+    def __init__(self, *, check, name, violation_error_message=None, violation_error_code=None):\n+        self.violation_error_code = violation_error_code\n         self.check = check\n         if not getattr(check, \"conditional\", False):\n             raise TypeError(\n                 \"CheckConstraint.check must be a Q instance or boolean expression.\"\n             )\n-        super().__init__(name=name, violation_error_message=violation_error_message)\n+        super().__init__(name=name, violation_error_message=violation_error_message, violation_error_code=violation_error_code)\n \n     def _get_check_sql(self, model, schema_editor):\n         query = Query(model=model, alias_cols=False)\n@@ -112,7 +114,8 @@ class CheckConstraint(BaseConstraint):\n         against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n         try:\n             if not Q(self.check).check(against, using=using):\n-                raise ValidationError(self.get_violation_error_message())\n+                message, code = self.get_violation_error_message()\n+                raise ValidationError(message, code=code)\n         except FieldError:\n             pass\n \n@@ -213,7 +216,7 @@ class UniqueConstraint(BaseConstraint):\n             F(expression) if isinstance(expression, str) else expression\n             for expression in expressions\n         )\n-        super().__init__(name=name, violation_error_message=violation_error_message)\n+        super().__init__(name=name, violation_error_message=violation_error_message, violation_error_code=violation_error_code)\n \n     @property\n     def contains_expressions(self):\n@@ -385,14 +388,16 @@ class UniqueConstraint(BaseConstraint):\n         if not self.condition:\n             if queryset.exists():\n                 if self.expressions:\n-                    raise ValidationError(self.get_violation_error_message())\n+                    message, code = self.get_violation_error_message()\n+                    raise ValidationError(message, code=code)\n                 # When fields are defined, use the unique_error_message() for\n                 # backward compatibility.\n                 for model, constraints in instance.get_constraints():\n                     for constraint in constraints:\n                         if constraint is self:\n+                            message, code = self.get_violation_error_message()\n                             raise ValidationError(\n-                                instance.unique_error_message(model, self.fields)\n+                                instance.unique_error_message(model, self.fields), code=code\n                             )\n         else:\n             against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n@@ -400,6 +405,7 @@ class UniqueConstraint(BaseConstraint):\n                 if (self.condition & Exists(queryset.filter(self.condition))).check(\n                     against, using=using\n                 ):\n-                    raise ValidationError(self.get_violation_error_message())\n+                    message, code = self.get_violation_error_message()\n+                    raise ValidationError(message, code=code)\n             except FieldError:\n-                pass\n+                pass\n", "occurrence": 1}
