{"model_name_or_path": "agentless", "instance_id": "django__django-16560", "model_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 50c20cc..7c08692 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -15,7 +15,8 @@ __all__ = ['BaseConstraint', 'CheckConstraint', 'Deferrable', 'UniqueConstraint'\n class BaseConstraint:\n     default_violation_error_message = _('Constraint \u201c%(name)s\u201d is violated.')\n     violation_error_message = None\n-    def __init__(self, *args, name=None, violation_error_message=None):\n+    def __init__(self, *args, name=None, violation_error_message=None, violation_error_code=None):\n+        self.violation_error_code = violation_error_code\n         if name is None and (not args):\n             raise TypeError(f\"{self.__class__.__name__}.__init__() missing 1 required keyword-only argument: 'name'\")\n         self.name = name\n@@ -52,11 +53,12 @@ class BaseConstraint:\n         _, args, kwargs = self.deconstruct()\n         return self.__class__(*args, **kwargs)\n class CheckConstraint(BaseConstraint):\n-    def __init__(self, *, check, name, violation_error_message=None):\n+    def __init__(self, *, check, name, violation_error_message=None, violation_error_code=None):\n+        self.violation_error_code = violation_error_code\n         self.check = check\n         if not getattr(check, 'conditional', False):\n             raise TypeError('CheckConstraint.check must be a Q instance or boolean expression.')\n-        super().__init__(name=name, violation_error_message=violation_error_message)\n+        super().__init__(name=name, violation_error_message=violation_error_message, violation_error_code=violation_error_code)\n     def _get_check_sql(self, model, schema_editor):\n         query = Query(model=model, alias_cols=False)\n         where = query.build_where(self.check)\n@@ -75,7 +77,7 @@ class CheckConstraint(BaseConstraint):\n         against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n         try:\n             if not Q(self.check).check(against, using=using):\n-                raise ValidationError(self.get_violation_error_message())\n+                raise ValidationError(self.get_violation_error_message(), code=self.violation_error_code)\n         except FieldError:\n             pass\n     def __repr__(self):\n@@ -127,7 +129,7 @@ class UniqueConstraint(BaseConstraint):\n         self.include = tuple(include) if include else ()\n         self.opclasses = opclasses\n         self.expressions = tuple((F(expression) if isinstance(expression, str) else expression for expression in expressions))\n-        super().__init__(name=name, violation_error_message=violation_error_message)\n+        super().__init__(name=name, violation_error_message=violation_error_message, violation_error_code=violation_error_code)\n     @property\n     def contains_expressions(self):\n         return bool(self.expressions)\n@@ -219,15 +221,15 @@ class UniqueConstraint(BaseConstraint):\n         if not self.condition:\n             if queryset.exists():\n                 if self.expressions:\n-                    raise ValidationError(self.get_violation_error_message())\n+                    raise ValidationError(self.get_violation_error_message(), code=self.violation_error_code)\n                 for model, constraints in instance.get_constraints():\n                     for constraint in constraints:\n                         if constraint is self:\n-                            raise ValidationError(instance.unique_error_message(model, self.fields))\n+                            raise ValidationError(instance.unique_error_message(model, self.fields), code=self.violation_error_code)\n         else:\n             against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n             try:\n                 if (self.condition & Exists(queryset.filter(self.condition))).check(against, using=using):\n-                    raise ValidationError(self.get_violation_error_message())\n+                    raise ValidationError(self.get_violation_error_message(), code=self.violation_error_code)\n             except FieldError:\n                 pass\n\\ No newline at end of file"}
