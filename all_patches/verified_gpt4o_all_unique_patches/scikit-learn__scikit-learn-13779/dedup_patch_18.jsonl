{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-13779", "model_patch": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 858d868..c64a86e 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -29,7 +29,9 @@ from ..utils import Bunch\n \n def _parallel_fit_estimator(estimator, X, y, sample_weight=None):\n     \"\"\"Private function used to fit an estimator within a job.\"\"\"\n-    if sample_weight is not None:\n+    if estimator is None:\n+        return None\n+    elif sample_weight is not None:\n         estimator.fit(X, y, sample_weight=sample_weight)\n     else:\n         estimator.fit(X, y)\n@@ -90,10 +92,10 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n             raise ValueError('All estimators are None. At least one is '\n                              'required!')\n \n-        self.estimators_ = Parallel(n_jobs=self.n_jobs)(\n+        self.estimators_ = [est for est in Parallel(n_jobs=self.n_jobs)(\n                 delayed(_parallel_fit_estimator)(clone(clf), X, y,\n                                                  sample_weight=sample_weight)\n-                for clf in clfs if clf is not None)\n+                for clf in clfs if clf is not None) if est is not None]\n \n         self.named_estimators_ = Bunch()\n         for k, e in zip(self.estimators, self.estimators_):\n", "occurrence": 1}
