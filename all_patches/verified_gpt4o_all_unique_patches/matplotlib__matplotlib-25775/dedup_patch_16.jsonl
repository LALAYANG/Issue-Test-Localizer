{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25775", "model_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 5c973cb..5575c3e 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -37,6 +37,7 @@ def _get_text_metrics_with_cache_impl(renderer_ref, text, fontprop, ismath, dpi)\n @_docstring.interpd\n @_api.define_aliases({'color': ['c'], 'fontfamily': ['family'], 'fontproperties': ['font', 'font_properties'], 'horizontalalignment': ['ha'], 'multialignment': ['ma'], 'fontname': ['name'], 'fontsize': ['size'], 'fontstretch': ['stretch'], 'fontstyle': ['style'], 'fontvariant': ['variant'], 'verticalalignment': ['va'], 'fontweight': ['weight']})\n class Text(Artist):\n+    _antialiased = mpl.rcParams['text.antialiased']\n     zorder = 3\n     _charsize_cache = dict()\n     def __repr__(self):\n@@ -116,7 +117,11 @@ class Text(Artist):\n         size_accum = np.cumsum([0] + [charsize_cache[x] for x in text])\n         std_x = x - bb.x0\n         return np.abs(size_accum - std_x).argmin()\n-    def get_rotation(self):\n+    def get_antialiased(self):\n+        return self._antialiased\n+    def set_antialiased(self, b):\n+        self._antialiased = bool(b)\n+        self.stale = True\n         if self.get_transform_rotates_text():\n             return self.get_transform().transform_angles([self._rotation], [self.get_unitless_position()]).item(0)\n         else:"}
