{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25775", "model_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex c2b18d4..2a75a1d 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -115,6 +115,7 @@ class Text(Artist):\n                  wrap=False,\n                  transform_rotates_text=False,\n                  parse_math=None,    # defaults to rcParams['text.parse_math']\n+                 antialiased=None    # defaults to rcParams['text.antialiased']\n                  **kwargs\n                  ):\n         \"\"\"\n@@ -179,6 +180,8 @@ class Text(Artist):\n         self.set_verticalalignment(verticalalignment)\n         self.set_horizontalalignment(horizontalalignment)\n         self._multialignment = multialignment\n+        self._antialiased = (antialiased if antialiased is not None \n+                             else mpl.rcParams[\"text.antialiased\"])\n         self.set_rotation(rotation)\n         self._transform_rotates_text = transform_rotates_text\n         self._bbox_patch = None  # a FancyBboxPatch instance\n@@ -1301,7 +1304,20 @@ class Text(Artist):\n         \"\"\"Return whether this `Text` object uses TeX for rendering.\"\"\"\n         return self._usetex\n \n-    def set_parse_math(self, parse_math):\n+    def set_antialiased(self, antialiased):\n+        \"\"\"\n+        Set whether the text should be drawn with antialiasing.\n+\n+        Parameters\n+        ----------\n+        antialiased : bool\n+        \"\"\"\n+        self._antialiased = bool(antialiased)\n+        self.stale = True\n+\n+    def get_antialiased(self):\n+        \"\"\"Return whether the text is drawn with antialiasing.\"\"\"\n+        return self._antialiased\n         \"\"\"\n         Override switch to disable any mathtext parsing for this `Text`.\n \n", "occurrence": 1}
