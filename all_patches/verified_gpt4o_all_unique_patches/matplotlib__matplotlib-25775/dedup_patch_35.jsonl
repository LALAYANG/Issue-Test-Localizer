{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25775", "model_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex c2b18d4..ea5dbb6 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -115,6 +115,7 @@ class Text(Artist):\n                  wrap=False,\n                  transform_rotates_text=False,\n                  parse_math=None,    # defaults to rcParams['text.parse_math']\n+                 antialiased=None,\n                  **kwargs\n                  ):\n         \"\"\"\n@@ -150,6 +151,9 @@ class Text(Artist):\n             linespacing=linespacing,\n             rotation_mode=rotation_mode,\n         )\n+        self.set_antialiased(antialiased \n+                             if antialiased is not None \n+                             else mpl.rcParams['text.antialiased'])\n         self.update(kwargs)\n \n     def _reset_visual_defaults(\n@@ -188,7 +192,22 @@ class Text(Artist):\n         self.set_linespacing(linespacing)\n         self.set_rotation_mode(rotation_mode)\n \n-    def update(self, kwargs):\n+    def set_antialiased(self, antialiased):\n+        \"\"\"\n+        Set whether the text should be antialiased.\n+\n+        Parameters\n+        ----------\n+        antialiased : bool\n+        \"\"\"\n+        self._antialiased = bool(antialiased)\n+        self.stale = True\n+\n+    def get_antialiased(self):\n+        \"\"\"\n+        Return whether the text is antialiased.\n+        \"\"\"\n+        return self._antialiased\n         # docstring inherited\n         kwargs = cbook.normalize_kwargs(kwargs, Text)\n         sentinel = object()  # bbox can be None, so use another sentinel.\n"}
