{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..fc94d16 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -788,6 +788,21 @@ class ASTExpression(ASTBase):\n class ASTLiteral(ASTExpression):\n     pass\n \n+class ASTUserDefinedLiteral(ASTLiteral):\n+    def __init__(self, value: str) -> None:\n+        self.value = value\n+\n+    def _stringify(self, transform: StringifyTransform) -> str:\n+        return self.value\n+\n+    def get_id(self, version: int) -> str:\n+        return f\"UDL{self.value}\"\n+\n+    def describe_signature(self, signode: TextElement, mode: str,\n+                           env: \"BuildEnvironment\", symbol: \"Symbol\") -> None:\n+        signode += addnodes.desc_name(self.value, self.value)\n+    pass\n+\n \n class ASTPointerLiteral(ASTLiteral):\n     def _stringify(self, transform: StringifyTransform) -> str:\n@@ -4682,7 +4697,10 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n+        # Check for user-defined literal\n+        if self.match(user_defined_literal_re):\n+            return ASTUserDefinedLiteral(self.matched_text)\n+\n         return None\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n"}
