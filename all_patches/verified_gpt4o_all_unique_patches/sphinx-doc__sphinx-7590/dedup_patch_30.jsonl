{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 4396875..d0572fa 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -3074,6 +3074,9 @@ class DefinitionParser(BaseParser):\n                 self.fail('Can not handle character literal. Internal error was: %s' % e)\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail('Can not handle character literal resulting in multiple decoded characters.')\n+        if self.match('[0-9]+(\\\\.[0-9]*)?[eE]?[+-]?[0-9]*[a-zA-Z_]\\\\w*'):\n+            value = self.matched_text\n+            return ASTLiteral(value)\n         return None\n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         if self.current_char != '(':\n@@ -3509,12 +3512,9 @@ class DefinitionParser(BaseParser):\n                     self.fail('Expected \"]\" after  \"operator ' + op + '[\"')\n                 op += '[]'\n             return ASTOperatorBuildIn(op)\n-        if self.skip_string('\"\"'):\n-            self.skip_ws()\n-            if not self.match(identifier_re):\n-                self.fail('Expected user-defined literal suffix.')\n-            identifier = ASTIdentifier(self.matched_text)\n-            return ASTOperatorLiteral(identifier)\n+        if self.match('[0-9]+(\\\\.[0-9]*)?[eE]?[+-]?[0-9]*[a-zA-Z_]\\\\w*'):\n+            literal = self.matched_text\n+            return ASTOperatorLiteral(literal)\n         type = self._parse_type(named=False, outer='operatorCast')\n         return ASTOperatorType(type)\n     def _parse_template_argument_list(self) -> ASTTemplateArgs:"}
