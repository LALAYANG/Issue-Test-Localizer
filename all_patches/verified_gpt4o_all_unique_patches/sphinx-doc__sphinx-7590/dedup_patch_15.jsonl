{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 4396875..6aa3a6b 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -219,8 +219,19 @@ class ASTExpression(ASTBase):\n         raise NotImplementedError(repr(self))\n     def describe_signature(self, signode: TextElement, mode: str, env: 'BuildEnvironment', symbol: 'Symbol') -> None:\n         raise NotImplementedError(repr(self))\n+import re\n+user_defined_literal_re = re.compile('[0-9]+[a-zA-Z_][a-zA-Z0-9_]*')\n class ASTLiteral(ASTExpression):\n     pass\n+class ASTUserDefinedLiteral(ASTLiteral):\n+    def __init__(self, value: str) -> None:\n+        self.value = value\n+    def _stringify(self, transform: StringifyTransform) -> str:\n+        return self.value\n+    def get_id(self, version: int) -> str:\n+        return 'LUD' + self.value\n+    def describe_signature(self, signode: TextElement, mode: str, env: 'BuildEnvironment', symbol: 'Symbol') -> None:\n+        signode += nodes.Text(self.value)\n class ASTPointerLiteral(ASTLiteral):\n     def _stringify(self, transform: StringifyTransform) -> str:\n         return 'nullptr'\n@@ -3074,6 +3085,8 @@ class DefinitionParser(BaseParser):\n                 self.fail('Can not handle character literal. Internal error was: %s' % e)\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail('Can not handle character literal resulting in multiple decoded characters.')\n+        if self.match(user_defined_literal_re):\n+            return ASTUserDefinedLiteral(self.matched_text)\n         return None\n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         if self.current_char != '(':"}
