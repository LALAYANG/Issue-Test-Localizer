{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..8d87dd4 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -782,13 +782,27 @@ class ASTExpression(ASTBase):\n         raise NotImplementedError(repr(self))\n \n \n-# Primary expressions\n-################################################################################\n+# User-defined literal regex\n+user_defined_literal_re = re.compile(r\"[0-9.e+-]+[a-zA-Z_]\\w*\")\n \n class ASTLiteral(ASTExpression):\n     pass\n \n \n+class ASTUserDefinedLiteral(ASTLiteral):\n+    def __init__(self, literal: str):\n+        self.literal = literal\n+\n+    def _stringify(self, transform: StringifyTransform) -> str:\n+        return self.literal\n+\n+    def get_id(self, version: int) -> str:\n+        return 'UL' + self.literal\n+\n+    def describe_signature(self, signode: TextElement, mode: str,\n+                           env: \"BuildEnvironment\", symbol: \"Symbol\") -> None:\n+        signode.append(self.literal)\n+\n class ASTPointerLiteral(ASTLiteral):\n     def _stringify(self, transform: StringifyTransform) -> str:\n         return 'nullptr'\n@@ -4682,8 +4696,12 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n-        return None\n+        # user-defined literal\n+        if self.match(user_defined_literal_re):\n+            full_literal = self.last_match.group(0)\n+            return ASTUserDefinedLiteral(full_literal)\n+\n+        self.fail(\"Expected a literal.\")\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         # \"(\" expression \")\"\n"}
