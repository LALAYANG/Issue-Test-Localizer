{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 4396875..989f8f0 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -3048,7 +3048,12 @@ class DefinitionParser(BaseParser):\n                 escape = False\n             self.pos += 1\n         return self.definition[startPos:self.pos]\n-    def _parse_literal(self) -> ASTLiteral:\n+import re\n+user_defined_literal_re = re.compile('(\\\\d+(\\\\.\\\\d+)?[eE]?\\\\d*|\\\\\\'.\\\\\\'|\".*\"|true|false|nullptr)([a-zA-Z_]\\\\w*)')\n+...\n+class ASTUserDefinedLiteral(ASTLiteral):\n+    def __init__(self, literal: str) -> None:\n+        self.literal = literal\n         self.skip_ws()\n         if self.skip_word('nullptr'):\n             return ASTPointerLiteral()\n@@ -3074,6 +3079,8 @@ class DefinitionParser(BaseParser):\n                 self.fail('Can not handle character literal. Internal error was: %s' % e)\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail('Can not handle character literal resulting in multiple decoded characters.')\n+        if self.match(user_defined_literal_re):\n+            return ASTUserDefinedLiteral(self.last_match.group())\n         return None\n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         if self.current_char != '(':"}
