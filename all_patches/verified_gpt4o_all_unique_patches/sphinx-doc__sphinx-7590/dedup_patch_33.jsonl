{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..f195e6f 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -4682,7 +4682,10 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n+        # Handle user-defined literals.\n+        if self.match(r'[0-9]+(\\.[0-9]*)?[eE]?[+-]?[0-9]*[a-zA-Z_]\\w*'):\n+            value = self.matched_text\n+            return ASTLiteral(value)\n         return None\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n@@ -5281,12 +5284,9 @@ class DefinitionParser(BaseParser):\n             return ASTOperatorBuildIn(op)\n \n         # user-defined literal?\n-        if self.skip_string('\"\"'):\n-            self.skip_ws()\n-            if not self.match(identifier_re):\n-                self.fail(\"Expected user-defined literal suffix.\")\n-            identifier = ASTIdentifier(self.matched_text)\n-            return ASTOperatorLiteral(identifier)\n+        if self.match(r'[0-9]+(\\.[0-9]*)?[eE]?[+-]?[0-9]*[a-zA-Z_]\\w*'):\n+            literal = self.matched_text\n+            return ASTOperatorLiteral(literal)\n \n         # oh well, looks like a cast operator definition.\n         # In that case, eat another type.\n"}
