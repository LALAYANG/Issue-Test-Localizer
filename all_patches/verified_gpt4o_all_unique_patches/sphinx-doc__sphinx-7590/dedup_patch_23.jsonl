{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..a60bff3 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -785,8 +785,19 @@ class ASTExpression(ASTBase):\n # Primary expressions\n ################################################################################\n \n-class ASTLiteral(ASTExpression):\n-    pass\n+class ASTUserDefinedLiteral(ASTLiteral):\n+    def __init__(self, literal: str) -> None:\n+        self.literal = literal\n+\n+    def _stringify(self, transform: StringifyTransform) -> str:\n+        return self.literal\n+\n+    def get_id(self, version: int) -> str:\n+        return 'L' + self.literal\n+\n+    def describe_signature(self, signode: TextElement, mode: str,\n+                           env: \"BuildEnvironment\", symbol: \"Symbol\") -> None:\n+        signode += addnodes.desc_name(self.literal, self.literal)\n \n \n class ASTPointerLiteral(ASTLiteral):\n@@ -4682,8 +4693,11 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n-        return None\n+        # user-defined-literal\n+        if self.match(user_defined_literal_re):\n+            literal = self.last_match.group(0)\n+            return ASTUserDefinedLiteral(literal)\n+        self.fail(\"Expected a literal.\")\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         # \"(\" expression \")\"\n"}
