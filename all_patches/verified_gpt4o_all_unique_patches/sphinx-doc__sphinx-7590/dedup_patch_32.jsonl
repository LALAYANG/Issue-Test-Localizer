{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..e3f1dc0 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -4682,7 +4682,14 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n+        # user-defined literal\n+        if self.match(integer_literal_re) or self.match(float_literal_re):\n+            literal_val = self.last_match.group()\n+            # check for user-defined suffix\n+            if self.match(r'[a-zA-Z_]\\w*'):\n+                udl_suffix = self.last_match.group()\n+                return ASTUserDefinedLiteral(literal_val, udl_suffix)\n+            self.fail(\"Expected user-defined literal suffix.\")\n         return None\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n@@ -4752,7 +4759,9 @@ class DefinitionParser(BaseParser):\n         # fold-expression\n         # id-expression -> we parse this with _parse_nested_name\n         self.skip_ws()\n-        res = self._parse_literal()  # type: ASTExpression\n+        res = self._parse_literal()\n+        if res is not None:\n+            return res\n         if res is not None:\n             return res\n         self.skip_ws()\n", "occurrence": 1}
