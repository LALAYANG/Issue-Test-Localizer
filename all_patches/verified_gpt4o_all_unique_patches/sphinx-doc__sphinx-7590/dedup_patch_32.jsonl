{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 4396875..e2317ad 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -221,6 +221,17 @@ class ASTExpression(ASTBase):\n         raise NotImplementedError(repr(self))\n class ASTLiteral(ASTExpression):\n     pass\n+class ASTUserDefinedLiteral(ASTLiteral):\n+    def __init__(self, prefix: str, literal: str) -> None:\n+        self.prefix = prefix\n+        self.literal = literal\n+    def _stringify(self, transform: StringifyTransform) -> str:\n+        return f'{self.literal}{self.prefix}'\n+    def get_id(self, version: int) -> str:\n+        return f'UDL{self.literal}{self.prefix}'\n+    def describe_signature(self, signode: TextElement, mode: str, env: 'BuildEnvironment', symbol: 'Symbol') -> None:\n+        signode += addnodes.desc_name(f'{self.literal}{self.prefix}', f'{self.literal}{self.prefix}')\n+    pass\n class ASTPointerLiteral(ASTLiteral):\n     def _stringify(self, transform: StringifyTransform) -> str:\n         return 'nullptr'\n@@ -3056,7 +3067,7 @@ class DefinitionParser(BaseParser):\n             return ASTBooleanLiteral(True)\n         if self.skip_word('false'):\n             return ASTBooleanLiteral(False)\n-        for regex in [float_literal_re, binary_literal_re, hex_literal_re, integer_literal_re, octal_literal_re]:\n+        for regex in [user_defined_literal_re, float_literal_re, binary_literal_re, hex_literal_re, integer_literal_re, octal_literal_re]:\n             pos = self.pos\n             if self.match(regex):\n                 while self.current_char in 'uUlLfF':\n@@ -3074,6 +3085,10 @@ class DefinitionParser(BaseParser):\n                 self.fail('Can not handle character literal. Internal error was: %s' % e)\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail('Can not handle character literal resulting in multiple decoded characters.')\n+        if self.match(user_defined_literal_re):\n+            literal = self.last_match.group(1)\n+            suffix = self.last_match.group(2)\n+            return ASTUserDefinedLiteral(suffix, literal)\n         return None\n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         if self.current_char != '(':"}
