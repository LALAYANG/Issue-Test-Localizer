{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..6dd0ec9 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -785,9 +785,29 @@ class ASTExpression(ASTBase):\n # Primary expressions\n ################################################################################\n \n+import re\n+\n+# Regular expression for user-defined literals\n+user_defined_literal_re = re.compile(r'(\\d*\\.?\\d+)([a-zA-Z_]\\w*)')\n+\n class ASTLiteral(ASTExpression):\n     pass\n \n+class ASTUserDefinedLiteral(ASTLiteral):\n+    def __init__(self, suffix: str, value: str) -> None:\n+        self.suffix = suffix\n+        self.value = value\n+\n+    def _stringify(self, transform: StringifyTransform) -> str:\n+        return f\"{self.value}{self.suffix}\"\n+\n+    def get_id(self, version: int) -> str:\n+        return f\"LUDL{self.value}{self.suffix}\"\n+\n+    def describe_signature(self, signode: TextElement, mode: str,\n+                           env: \"BuildEnvironment\", symbol: \"Symbol\") -> None:\n+        signode += addnodes.desc_sig_name(f\"{self.value}{self.suffix}\", f\"{self.value}{self.suffix}\")\n+\n \n class ASTPointerLiteral(ASTLiteral):\n     def _stringify(self, transform: StringifyTransform) -> str:\n@@ -4682,8 +4702,12 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n-        return None\n+        # user-defined-literal\n+        if self.match(user_defined_literal_re):\n+            suffix = self.last_match.group(1)  # the literal suffix\n+            value = self.last_match.group(2)  # the literal value\n+            return ASTUserDefinedLiteral(suffix, value)\n+        self.fail(\"Could not match any literal.\")\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         # \"(\" expression \")\"\n", "occurrence": 1}
