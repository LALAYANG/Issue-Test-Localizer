{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7748", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 4087d22..fe3bcd8 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -759,26 +759,26 @@ class DocstringSignatureMixin:\n             warnings.warn(\"The 'encoding' argument to autodoc.%s._find_signature() is deprecated.\" % self.__class__.__name__, RemovedInSphinx40Warning, stacklevel=2)\n         docstrings = self.get_doc()\n         self._new_docstrings = docstrings[:]\n-        result = None\n+        results = []\n         for i, doclines in enumerate(docstrings):\n             if not doclines:\n                 continue\n-            match = py_ext_sig_re.match(doclines[0])\n-            if not match:\n-                continue\n-            exmod, path, base, args, retann = match.groups()\n-            valid_names = [self.objpath[-1]]\n-            if isinstance(self, ClassDocumenter):\n-                valid_names.append('__init__')\n-                if hasattr(self.object, '__mro__'):\n-                    valid_names.extend((cls.__name__ for cls in self.object.__mro__))\n-            if base not in valid_names:\n-                continue\n-            tab_width = self.directive.state.document.settings.tab_width\n-            self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]), tabsize=tab_width)\n-            result = (args, retann)\n-            break\n-        return result\n+            for line in doclines:\n+                match = py_ext_sig_re.match(line)\n+                if not match:\n+                    continue\n+                exmod, path, base, args, retann = match.groups()\n+                valid_names = [self.objpath[-1]]\n+                if isinstance(self, ClassDocumenter):\n+                    valid_names.append('__init__')\n+                    if hasattr(self.object, '__mro__'):\n+                        valid_names.extend((cls.__name__ for cls in self.object.__mro__))\n+                if base not in valid_names:\n+                    continue\n+                tab_width = self.directive.state.document.settings.tab_width\n+                self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]), tabsize=tab_width)\n+                results.append((args, retann))\n+        return results if results else None\n \n     def get_doc(self, encoding: str=None, ignore: int=None) -> List[List[str]]:\n         if encoding is not None:"}
