{"model_name_or_path": "agentless", "instance_id": "django__django-13786", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex bf5c114..90f70a1 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -81,9 +81,17 @@ class CreateModel(ModelOperation):\n             return [CreateModel(self.name, fields=self.fields, options={**self.options, 'order_with_respect_to': operation.order_with_respect_to}, bases=self.bases, managers=self.managers)]\n         elif isinstance(operation, FieldOperation) and self.name_lower == operation.model_name_lower:\n             if isinstance(operation, AddField):\n-                return [CreateModel(self.name, fields=self.fields + [(operation.name, operation.field)], options=self.options, bases=self.bases, managers=self.managers)]\n+                new_options = {**self.options, **operation.options}\n+                for key in list(self.options.keys()):\n+                    if key not in operation.options:\n+                        del new_options[key]\n+                return [CreateModel(self.name, fields=self.fields, options=new_options, bases=self.bases, managers=self.managers), CreateModel(self.name, fields=self.fields + [(operation.name, operation.field)], options=self.options, bases=self.bases, managers=self.managers)]\n             elif isinstance(operation, AlterField):\n-                return [CreateModel(self.name, fields=[(n, operation.field if n == operation.name else v) for n, v in self.fields], options=self.options, bases=self.bases, managers=self.managers)]\n+                new_options = {**self.options, **operation.options}\n+                for key in list(self.options.keys()):\n+                    if key not in operation.options:\n+                        del new_options[key]\n+                return [CreateModel(self.name, fields=self.fields, options=new_options, bases=self.bases, managers=self.managers), CreateModel(self.name, fields=[(n, operation.field if n == operation.name else v) for n, v in self.fields], options=self.options, bases=self.bases, managers=self.managers)]\n             elif isinstance(operation, RemoveField):\n                 options = self.options.copy()\n                 for option_name in ('unique_together', 'index_together'):\n@@ -95,7 +103,11 @@ class CreateModel(ModelOperation):\n                 order_with_respect_to = options.get('order_with_respect_to')\n                 if order_with_respect_to == operation.name_lower:\n                     del options['order_with_respect_to']\n-                return [CreateModel(self.name, fields=[(n, v) for n, v in self.fields if n.lower() != operation.name_lower], options=options, bases=self.bases, managers=self.managers)]\n+                new_options = {**self.options, **operation.options}\n+                for key in list(self.options.keys()):\n+                    if key not in operation.options:\n+                        del new_options[key]\n+                return [CreateModel(self.name, fields=self.fields, options=new_options, bases=self.bases, managers=self.managers), CreateModel(self.name, fields=[(n, v) for n, v in self.fields if n.lower() != operation.name_lower], options=options, bases=self.bases, managers=self.managers)]\n             elif isinstance(operation, RenameField):\n                 options = self.options.copy()\n                 for option_name in ('unique_together', 'index_together'):\n@@ -105,7 +117,11 @@ class CreateModel(ModelOperation):\n                 order_with_respect_to = options.get('order_with_respect_to')\n                 if order_with_respect_to == operation.old_name:\n                     options['order_with_respect_to'] = operation.new_name\n-                return [CreateModel(self.name, fields=[(operation.new_name if n == operation.old_name else n, v) for n, v in self.fields], options=options, bases=self.bases, managers=self.managers)]\n+                new_options = {**self.options, **operation.options}\n+                for key in list(self.options.keys()):\n+                    if key not in operation.options:\n+                        del new_options[key]\n+                return [CreateModel(self.name, fields=self.fields, options=new_options, bases=self.bases, managers=self.managers), CreateModel(self.name, fields=[(operation.new_name if n == operation.old_name else n, v) for n, v in self.fields], options=options, bases=self.bases, managers=self.managers)]\n         return super().reduce(operation, app_label)\n class DeleteModel(ModelOperation):\n     def deconstruct(self):"}
