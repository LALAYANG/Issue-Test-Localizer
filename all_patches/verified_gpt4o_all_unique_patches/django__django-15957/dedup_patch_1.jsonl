{"model_name_or_path": "agentless", "instance_id": "django__django-15957", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 4910c4e..05fd04e 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -33,11 +33,32 @@ class ForwardManyToOneDescriptor:\n             query = {'%s__in' % related_field.name: {instance_attr(inst)[0] for inst in instances}}\n         else:\n             query = {'%s__in' % self.field.related_query_name(): instances}\n-        queryset = queryset.filter(**query)\n+        if queryset.query.is_sliced:\n+            low_mark = queryset.query.low_mark\n+            high_mark = queryset.query.high_mark\n+            filtered_results = []\n+            for instance in instances:\n+                instance_queryset = queryset.filter(**{related_field.name: instance_attr(instance)[0]})\n+                if low_mark is not None:\n+                    instance_queryset = instance_queryset[low_mark:high_mark]\n+                filtered_results.extend(instance_queryset)\n+            queryset = filtered_results\n+        else:\n+            queryset = queryset.filter(**query)\n         if not remote_field.multiple:\n             for rel_obj in queryset:\n                 instance = instances_dict[rel_obj_attr(rel_obj)]\n                 remote_field.set_cached_value(rel_obj, instance)\n+        if queryset.query.low_mark is not None or queryset.query.high_mark is not None:\n+            low_mark = queryset.query.low_mark\n+            high_mark = queryset.query.high_mark\n+            filtered_results = []\n+            for instance in instances:\n+                instance_queryset = queryset.filter(**{related_field.name: instance_attr(instance)[0]})\n+                if low_mark is not None:\n+                    instance_queryset = instance_queryset[low_mark:high_mark]\n+                filtered_results.extend(instance_queryset)\n+            queryset = filtered_results\n         return (queryset, rel_obj_attr, instance_attr, True, self.field.get_cache_name(), False)\n     def get_object(self, instance):\n         qs = self.get_queryset(instance=instance)"}
