{"model_name_or_path": "agentless", "instance_id": "django__django-15957", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 4910c4e..ac290fa 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -34,11 +34,16 @@ class ForwardManyToOneDescriptor:\n         else:\n             query = {'%s__in' % self.field.related_query_name(): instances}\n         queryset = queryset.filter(**query)\n+        if queryset.query.low_mark is not None or queryset.query.high_mark is not None:\n+            raise AssertionError('Cannot use sliced queryset with prefetch_related.')\n+        if queryset.query.low_mark is not None or queryset.query.high_mark is not None:\n+            high_mark = queryset.query.high_mark\n+            queryset.query.clear_limits()\n         if not remote_field.multiple:\n             for rel_obj in queryset:\n                 instance = instances_dict[rel_obj_attr(rel_obj)]\n                 remote_field.set_cached_value(rel_obj, instance)\n-        return (queryset, rel_obj_attr, instance_attr, True, self.field.get_cache_name(), False)\n+        return (queryset[:high_mark] if high_mark else queryset, rel_obj_attr, instance_attr, True, self.field.get_cache_name(), False)\n     def get_object(self, instance):\n         qs = self.get_queryset(instance=instance)\n         return qs.get(self.field.get_reverse_related_filter(instance))"}
