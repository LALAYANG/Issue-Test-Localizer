{"model_name_or_path": "agentless", "instance_id": "django__django-15128", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex c6ee433..7fd8c4d 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -332,6 +332,29 @@ class Query(BaseExpression):\n         joinpromoter = JoinPromoter(connector, 2, False)\n         joinpromoter.add_votes((j for j in self.alias_map if self.alias_map[j].join_type == INNER))\n         rhs_votes = set()\n+        change_map = {}\n+        conjunction = connector == AND\n+        reuse = set() if conjunction else set(self.alias_map)\n+        self.get_initial_alias()\n+        joinpromoter = JoinPromoter(connector, 2, False)\n+        joinpromoter.add_votes((j for j in self.alias_map if self.alias_map[j].join_type == INNER))\n+        rhs_votes = set()\n+        rhs_tables = list(rhs.alias_map)[1:]\n+        for alias in rhs_tables:\n+            join = rhs.alias_map[alias]\n+            join = join.relabeled_clone(change_map)\n+            new_alias = self.join(join, reuse=reuse)\n+            if join.join_type == INNER:\n+                rhs_votes.add(new_alias)\n+            reuse.discard(new_alias)\n+            if alias != new_alias:\n+                while new_alias in change_map:\n+                    new_alias = self.join(join, reuse=reuse)\n+                change_map[alias] = new_alias\n+            if not rhs.alias_refcount[alias]:\n+                self.unref_alias(new_alias)\n+        joinpromoter.add_votes(rhs_votes)\n+        joinpromoter.update_join_types(self)\n         rhs_tables = list(rhs.alias_map)[1:]\n         for alias in rhs_tables:\n             join = rhs.alias_map[alias]\n@@ -467,7 +490,7 @@ class Query(BaseExpression):\n             unref_amount = cur_refcount - to_counts.get(alias, 0)\n             self.unref_alias(alias, unref_amount)\n     def change_aliases(self, change_map):\n-        assert set(change_map).isdisjoint(change_map.values())\n+        assert set(change_map).isdisjoint(change_map.values()), 'Change map keys and values intersect, which means an alias might be changed twice.'\n         self.where.relabel_aliases(change_map)\n         if isinstance(self.group_by, tuple):\n             self.group_by = tuple([col.relabeled_clone(change_map) for col in self.group_by])"}
