{"model_name_or_path": "agentless", "instance_id": "django__django-15128", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex c6ee433..6650f38 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -333,11 +333,14 @@ class Query(BaseExpression):\n         joinpromoter.add_votes((j for j in self.alias_map if self.alias_map[j].join_type == INNER))\n         rhs_votes = set()\n         rhs_tables = list(rhs.alias_map)[1:]\n+        rhs_used_aliases = set(rhs.alias_map)\n         for alias in rhs_tables:\n             join = rhs.alias_map[alias]\n-            join = join.relabeled_clone(change_map)\n-            new_alias = self.join(join, reuse=reuse)\n-            if join.join_type == INNER:\n+            relabeled_join = join.relabeled_clone(change_map)\n+            new_alias = self.join(relabeled_join, reuse=reuse)\n+            while new_alias in rhs_used_aliases:\n+                new_alias = self.join(relabeled_join, reuse=reuse)\n+            if relabeled_join.join_type == INNER:\n                 rhs_votes.add(new_alias)\n             reuse.discard(new_alias)\n             if alias != new_alias:\n@@ -467,7 +470,7 @@ class Query(BaseExpression):\n             unref_amount = cur_refcount - to_counts.get(alias, 0)\n             self.unref_alias(alias, unref_amount)\n     def change_aliases(self, change_map):\n-        assert set(change_map).isdisjoint(change_map.values())\n+        assert set(change_map).isdisjoint(change_map.values()), 'Alias changes cannot overlap'\n         self.where.relabel_aliases(change_map)\n         if isinstance(self.group_by, tuple):\n             self.group_by = tuple([col.relabeled_clone(change_map) for col in self.group_by])"}
