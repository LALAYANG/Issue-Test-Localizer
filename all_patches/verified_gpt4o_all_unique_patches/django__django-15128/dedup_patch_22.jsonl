{"model_name_or_path": "agentless", "instance_id": "django__django-15128", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex c6ee433..aeece28 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -341,6 +341,8 @@ class Query(BaseExpression):\n                 rhs_votes.add(new_alias)\n             reuse.discard(new_alias)\n             if alias != new_alias:\n+                while new_alias in change_map:\n+                    new_alias = self.alias_prefix + str(len(self.alias_map) + 1)\n                 change_map[alias] = new_alias\n             if not rhs.alias_refcount[alias]:\n                 self.unref_alias(new_alias)\n@@ -467,7 +469,8 @@ class Query(BaseExpression):\n             unref_amount = cur_refcount - to_counts.get(alias, 0)\n             self.unref_alias(alias, unref_amount)\n     def change_aliases(self, change_map):\n-        assert set(change_map).isdisjoint(change_map.values())\n+        if not set(change_map).isdisjoint(change_map.values()):\n+            raise AssertionError('Alias change map keys and values intersect, which leads to ambiguous alias changes.')\n         self.where.relabel_aliases(change_map)\n         if isinstance(self.group_by, tuple):\n             self.group_by = tuple([col.relabeled_clone(change_map) for col in self.group_by])"}
