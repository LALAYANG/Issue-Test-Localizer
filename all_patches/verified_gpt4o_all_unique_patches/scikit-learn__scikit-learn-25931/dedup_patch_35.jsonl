{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25931", "model_patch": "diff --git a/sklearn/ensemble/_iforest.py b/sklearn/ensemble/_iforest.py\nindex f9e64b9..ffd1074 100644\n--- a/sklearn/ensemble/_iforest.py\n+++ b/sklearn/ensemble/_iforest.py\n@@ -46,7 +46,7 @@ class IsolationForest(OutlierMixin, BaseBagging):\n         if self.contamination == 'auto':\n             self.offset_ = -0.5\n             return self\n-        self.offset_ = np.percentile(self.score_samples(X), 100.0 * self.contamination)\n+        self.offset_ = np.percentile(self.score_samples(X, reset=False), 100.0 * self.contamination)\n         return self\n     def predict(self, X):\n         check_is_fitted(self)\n@@ -56,9 +56,9 @@ class IsolationForest(OutlierMixin, BaseBagging):\n         return is_inlier\n     def decision_function(self, X):\n         return self.score_samples(X) - self.offset_\n-    def score_samples(self, X):\n+    def score_samples(self, X, reset=True):\n         check_is_fitted(self)\n-        X = self._validate_data(X, accept_sparse='csr', dtype=np.float32, reset=False)\n+        X = self._validate_data(X, accept_sparse='csr', dtype=np.float32, reset=reset)\n         return -self._compute_chunked_score_samples(X)\n     def _compute_chunked_score_samples(self, X):\n         n_samples = _num_samples(X)"}
