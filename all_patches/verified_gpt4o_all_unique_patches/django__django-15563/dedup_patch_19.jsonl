{"model_name_or_path": "agentless", "instance_id": "django__django-15563", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex df46b1e..786a3a2 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -987,7 +987,11 @@ class QuerySet:\n         if self.query.is_sliced:\n             raise TypeError(\"Cannot update a query once a slice has been taken.\")\n         self._for_write = True\n-        query = self.query.chain(sql.UpdateQuery)\n+        if hasattr(self.model._meta, 'concrete_model'):\n+            base_model = self.model._meta.concrete_model\n+        else:\n+            base_model = self.model\n+        query = self.query.chain(sql.UpdateQuery, model=base_model)\n         query.add_update_values(kwargs)\n         # Clear any annotations so that they won't be present in subqueries.\n         query.annotations = {}\n@@ -1007,7 +1011,11 @@ class QuerySet:\n         \"\"\"\n         if self.query.is_sliced:\n             raise TypeError(\"Cannot update a query once a slice has been taken.\")\n-        query = self.query.chain(sql.UpdateQuery)\n+        if hasattr(self.model._meta, 'concrete_model'):\n+            base_model = self.model._meta.concrete_model\n+        else:\n+            base_model = self.model\n+        query = self.query.chain(sql.UpdateQuery, model=base_model)\n         query.add_update_fields(values)\n         # Clear any annotations so that they won't be present in subqueries.\n         query.annotations = {}\n", "occurrence": 1}
