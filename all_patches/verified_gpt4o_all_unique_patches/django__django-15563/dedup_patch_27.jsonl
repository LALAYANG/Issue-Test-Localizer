{"model_name_or_path": "agentless", "instance_id": "django__django-15563", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 1c22d92..cdcfbf3 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -533,7 +533,23 @@ class QuerySet:\n             raise TypeError('Cannot update a query once a slice has been taken.')\n         self._for_write = True\n         query = self.query.chain(sql.UpdateQuery)\n-        query.add_update_values(kwargs)\n+        model = self.model\n+        opts = model._meta\n+        values_map = {}\n+        for field, val in kwargs.items():\n+            field_object = opts.get_field(field)\n+            table = field_object.model._meta.db_table\n+            if table not in values_map:\n+                values_map[table] = {}\n+            values_map[table][field] = val\n+        for table, values in values_map.items():\n+            query = self.query.chain(sql.UpdateQuery)\n+            query.add_update_values(values)\n+            query.annotations = {}\n+            with transaction.mark_for_rollback_on_error(using=self.db):\n+                rows = query.get_compiler(self.db).execute_sql(CURSOR)\n+        self._result_cache = None\n+        return rows\n         query.annotations = {}\n         with transaction.mark_for_rollback_on_error(using=self.db):\n             rows = query.get_compiler(self.db).execute_sql(CURSOR)"}
