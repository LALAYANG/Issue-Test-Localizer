{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9281", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 51811ca..7ebc58f 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -11,6 +11,7 @@\n import re\n from collections import OrderedDict\n from typing import Any, Dict, Iterable, Set, cast\n+from enum import Enum\n \n from docutils import nodes\n from docutils.nodes import Element\n@@ -18,6 +19,7 @@ from docutils.nodes import Element\n from sphinx import addnodes\n from sphinx.application import Sphinx\n from sphinx.util import inspect, typing\n+from sphinx.util.inspect import object_description\n \n \n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n@@ -30,7 +32,11 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n             sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n-                    annotation[param.name] = typing.stringify(param.annotation)\n+                    if isinstance(param.default, Enum):\n+                        default_val = f\"{param.default.__class__.__name__}.{param.default.name}\"\n+                    else:\n+                        default_val = object_description(param.default)\n+                    annotation[param.name] = typing.stringify(param.annotation) + f\" = {default_val}\"\n             if sig.return_annotation is not sig.empty:\n                 annotation['return'] = typing.stringify(sig.return_annotation)\n     except (TypeError, ValueError):\n"}
