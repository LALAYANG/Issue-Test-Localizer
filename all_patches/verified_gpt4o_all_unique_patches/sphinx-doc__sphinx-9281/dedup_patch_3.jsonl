{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9281", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 7192ab0..5af3fda 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1291,7 +1291,7 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n         try:\n             self.env.app.emit('autodoc-before-process-signature', self.object, False)\n             sig = inspect.signature(self.object, type_aliases=self.config.autodoc_type_aliases)\n-            args = stringify_signature(sig, **kwargs)\n+            args = stringify_signature(sig, show_value_repr=False, **kwargs)\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a function signature for %s: %s\"),\n                            self.fullname, exc)\n@@ -1347,7 +1347,7 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.config.autodoc_type_aliases)\n \n-                sig = stringify_signature(overload, **kwargs)\n+                sig = stringify_signature(overload, show_value_repr=False, **kwargs)\n                 sigs.append(sig)\n \n         return \"\\n\".join(sigs)\n@@ -1587,7 +1587,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n                 parameters = list(overload.parameters.values())\n                 overload = overload.replace(parameters=parameters[1:],\n                                             return_annotation=Parameter.empty)\n-                sig = stringify_signature(overload, **kwargs)\n+                sig = stringify_signature(overload, show_value_repr=False, **kwargs)\n                 sigs.append(sig)\n         else:\n             sigs.append(sig)\n"}
