{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9281", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 2bf2bdb..c7294c1 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -707,7 +707,7 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n         try:\n             self.env.app.emit('autodoc-before-process-signature', self.object, False)\n             sig = inspect.signature(self.object, type_aliases=self.config.autodoc_type_aliases)\n-            args = stringify_signature(sig, **kwargs)\n+            args = stringify_signature(sig, **kwargs).replace('<', '').replace('>', '')\n         except TypeError as exc:\n             logger.warning(__('Failed to get a function signature for %s: %s'), self.fullname, exc)\n             return None\n@@ -748,7 +748,7 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n             for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n                 overload = self.merge_default_value(actual, overload)\n                 overload = evaluate_signature(overload, __globals__, self.config.autodoc_type_aliases)\n-                sig = stringify_signature(overload, **kwargs)\n+                sig = stringify_signature(overload, **kwargs).replace('<', '').replace('>', '')\n                 sigs.append(sig)\n         return '\\n'.join(sigs)\n     def merge_default_value(self, actual: Signature, overload: Signature) -> Signature:\n@@ -890,7 +890,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n                 overload = evaluate_signature(overload, __globals__, self.config.autodoc_type_aliases)\n                 parameters = list(overload.parameters.values())\n                 overload = overload.replace(parameters=parameters[1:], return_annotation=Parameter.empty)\n-                sig = stringify_signature(overload, **kwargs)\n+                sig = stringify_signature(overload, **kwargs).replace('<', '').replace('>', '')\n                 sigs.append(sig)\n         else:\n             sigs.append(sig)"}
