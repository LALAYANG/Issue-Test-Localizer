{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-10297", "model_patch": "diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py\nindex c320acd..c931ad5 100644\n--- a/sklearn/linear_model/ridge.py\n+++ b/sklearn/linear_model/ridge.py\n@@ -1301,6 +1301,9 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n         weights inversely proportional to class frequencies in the input data\n         as ``n_samples / (n_classes * np.bincount(y))``\n \n+    store_cv_values : boolean, optional, default False\n+        If True, cross-validation values (cv_values_) will be stored. This flag is only applicable when cv=None.\n+\n     Attributes\n     ----------\n     cv_values_ : array, shape = [n_samples, n_alphas] or \\\n@@ -1333,7 +1336,8 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None, store_cv_values=False):\n+        self.store_cv_values = store_cv_values\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n             scoring=scoring, cv=cv)\n@@ -1373,9 +1377,9 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n             sample_weight = (sample_weight *\n                              compute_sample_weight(self.class_weight, y))\n \n-        _BaseRidgeCV.fit(self, X, Y, sample_weight=sample_weight)\n+        _BaseRidgeCV.fit(self, X, Y, sample_weight=sample_weight, store_cv_values=self.store_cv_values)\n         return self\n \n     @property\n     def classes_(self):\n-        return self._label_binarizer.classes_\n+        return self._label_binarizer.classes_\n"}
