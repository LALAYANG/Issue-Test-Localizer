{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex be9090d..a6d7390 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -842,8 +842,8 @@ class FiniteSet(Set, EvalfMixin):\n     def _complement(self, other):\n         if isinstance(other, Interval):\n             nums = sorted((m for m in self.args if m.is_number))\n+            syms = [m for m in self.args if not m.is_number]\n             if other == S.Reals and nums != []:\n-                syms = [m for m in self.args if m.is_Symbol]\n                 intervals = []\n                 intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]\n                 for a, b in zip(nums[:-1], nums[1:]):\n@@ -854,7 +854,22 @@ class FiniteSet(Set, EvalfMixin):\n                 else:\n                     return Union(intervals, evaluate=False)\n             elif nums == []:\n-                return None\n+                return FiniteSet(*syms)\n+        elif isinstance(other, FiniteSet):\n+            unk = []\n+            for i in self:\n+                c = sympify(other.contains(i))\n+                if c is not S.true and c is not S.false:\n+                    unk.append(i)\n+            unk = FiniteSet(*unk)\n+            if unk == self:\n+                return\n+            not_true = []\n+            for i in other:\n+                c = sympify(self.contains(i))\n+                if c is not S.true:\n+                    not_true.append(i)\n+            return Complement(FiniteSet(*not_true), unk)\n         elif isinstance(other, FiniteSet):\n             unk = []\n             for i in self:"}
