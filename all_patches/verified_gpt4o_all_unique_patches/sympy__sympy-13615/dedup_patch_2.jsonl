{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..3d3d267 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -217,7 +217,7 @@ class Set(Basic):\n             return S.EmptySet\n \n         elif isinstance(other, FiniteSet):\n-            return FiniteSet(*[el for el in other if self.contains(el) != True])\n+            return FiniteSet(*[el for el in other if not self.contains(el)])\n \n     def symmetric_difference(self, other):\n         \"\"\"\n@@ -1069,6 +1069,11 @@ class Interval(Set, EvalfMixin):\n             if not other.is_real is None:\n                 return other.is_real\n \n+        from sympy.core.relational import Relational\n+\n+        if isinstance(other, Relational):\n+            return other\n+\n         if self.left_open:\n             expr = other > self.start\n         else:\n@@ -1126,6 +1131,11 @@ class Interval(Set, EvalfMixin):\n         except NotImplementedError:\n             return\n \n+        from sympy.core.relational import Relational\n+\n+        if isinstance(other, Relational):\n+            return other\n+\n         if self.left_open:\n             _start = limit(expr, var, self.start, dir=\"+\")\n         elif self.start not in sing:\n@@ -1203,6 +1213,11 @@ class Interval(Set, EvalfMixin):\n             right = x < self.end\n         else:\n             right = x <= self.end\n+        from sympy.core.relational import Relational\n+\n+        if isinstance(other, Relational):\n+            return other\n+\n         if self.left_open:\n             left = self.start < x\n         else:\n"}
