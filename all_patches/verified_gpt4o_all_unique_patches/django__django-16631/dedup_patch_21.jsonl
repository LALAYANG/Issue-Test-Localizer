{"model_name_or_path": "agentless", "instance_id": "django__django-16631", "model_patch": "diff --git a/django/contrib/auth/base_user.py b/django/contrib/auth/base_user.py\nindex 718fbb5..c2bf2ba 100644\n--- a/django/contrib/auth/base_user.py\n+++ b/django/contrib/auth/base_user.py\n@@ -136,11 +136,32 @@ class AbstractBaseUser(models.Model):\n         Return an HMAC of the password field.\n         \"\"\"\n         key_salt = \"django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash\"\n-        return salted_hmac(\n-            key_salt,\n-            self.password,\n-            algorithm=\"sha256\",\n-        ).hexdigest()\n+        from django.conf import settings\n+        from django.core.signing import BadSignature\n+\n+        def get_hmac(key):\n+            return salted_hmac(\n+                key_salt,\n+                self.password,\n+                secret=key,\n+                algorithm=\"sha256\",\n+            ).hexdigest()\n+\n+        # Try the primary SECRET_KEY first\n+        try:\n+            return get_hmac(settings.SECRET_KEY)\n+        except BadSignature:\n+            pass\n+\n+        # Fallback to SECRET_KEY_FALLBACKS if the primary key fails\n+        for key in getattr(settings, 'SECRET_KEY_FALLBACKS', []):\n+            try:\n+                return get_hmac(key)\n+            except BadSignature:\n+                continue\n+\n+        # If all keys fail, raise an exception\n+        raise BadSignature(\"All secret keys failed to validate the session auth hash.\")\n \n     @classmethod\n     def get_email_field_name(cls):\n", "occurrence": 1}
