{"model_name_or_path": "agentless", "instance_id": "django__django-11265", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 60a9579..125b4ab 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -761,6 +761,9 @@ class Query(BaseExpression):\n                 elif name in self._filtered_relations and pos == 0:\n                     filtered_relation = self._filtered_relations[name]\n                     field = opts.get_field(filtered_relation.relation_name)\n+                elif name in self.annotation_select:\n+                    filtered_relation = self._filtered_relations[name]\n+                    field = opts.get_field(filtered_relation.relation_name)\n             if field is not None:\n                 if field.is_relation and (not field.related_model):\n                     raise FieldError('Field %r does not generate an automatic reverse relation and therefore cannot be used for reverse querying. If it is a GenericForeignKey, consider adding a GenericRelation.' % name)\n@@ -889,7 +892,9 @@ class Query(BaseExpression):\n         if isinstance(filter_rhs, F):\n             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))\n         query = Query(self.model)\n-        query.add_filter(filter_expr)\n+        query.add_filter(filter_expr, negate=True)\n+        query.add_annotation_select(self.annotation_select)\n+        query.add_annotation_select_mask(self._annotation_select_mask)\n         query.clear_ordering(True)\n         trimmed_prefix, contains_louter = query.trim_start(names_with_path)\n         col = query.select[0]"}
