{"model_name_or_path": "agentless", "instance_id": "django__django-13964", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 11b8ac6..89573fa 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -68,23 +68,19 @@ class ForwardManyToOneDescriptor:\n     def __set__(self, instance, value):\n         if value is not None and (not isinstance(value, self.field.remote_field.model._meta.concrete_model)):\n             raise ValueError('Cannot assign \"%r\": \"%s.%s\" must be a \"%s\" instance.' % (value, instance._meta.object_name, self.field.name, self.field.remote_field.model._meta.object_name))\n-        elif value is not None:\n-            if instance._state.db is None:\n-                instance._state.db = router.db_for_write(instance.__class__, instance=value)\n+        if value is not None:\n             if value._state.db is None:\n                 value._state.db = router.db_for_write(value.__class__, instance=instance)\n             if not router.allow_relation(value, instance):\n                 raise ValueError('Cannot assign \"%r\": the current database router prevents this relation.' % value)\n-        remote_field = self.field.remote_field\n-        if value is None:\n+            for lh_field, rh_field in self.field.related_fields:\n+                setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n+        else:\n             related = self.field.get_cached_value(instance, default=None)\n             if related is not None:\n                 remote_field.set_cached_value(related, None)\n             for lh_field, rh_field in self.field.related_fields:\n                 setattr(instance, lh_field.attname, None)\n-        else:\n-            for lh_field, rh_field in self.field.related_fields:\n-                setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n         self.field.set_cached_value(instance, value)\n         if value is not None and (not remote_field.multiple):\n             remote_field.set_cached_value(value, instance)"}
