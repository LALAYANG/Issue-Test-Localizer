{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..c433151 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -78,18 +78,18 @@ ModuleEntry = NamedTuple('ModuleEntry', [('docname', str),\n                                          ('deprecated', bool)])\n \n \n-def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xref:\n+def type_to_xref(text: str, env: BuildEnvironment = None, py_module: str = None, py_class: str = None) -> addnodes.pending_xref:\n     \"\"\"Convert a type string to a cross reference node.\"\"\"\n     if text == 'None':\n         reftype = 'obj'\n     else:\n         reftype = 'class'\n \n-    if env:\n-        kwargs = {'py:module': env.ref_context.get('py:module'),\n-                  'py:class': env.ref_context.get('py:class')}\n-    else:\n-        kwargs = {}\n+    kwargs = {}\n+    if py_module:\n+        kwargs['py:module'] = py_module\n+    if py_class:\n+        kwargs['py:class'] = py_class\n \n     return pending_xref('', nodes.Text(text),\n                         refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n@@ -157,9 +157,11 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod\n     try:\n         tree = ast_parse(annotation)\n         result = unparse(tree)\n+        current_module = env.ref_context.get('py:module') if env else None\n+        current_class = env.ref_context.get('py:class') if env else None\n         for i, node in enumerate(result):\n             if isinstance(node, nodes.Text):\n-                result[i] = type_to_xref(str(node), env)\n+                result[i] = type_to_xref(str(node), env, current_module, current_class)\n         return result\n     except SyntaxError:\n         return [type_to_xref(annotation, env)]\n", "occurrence": 1}
