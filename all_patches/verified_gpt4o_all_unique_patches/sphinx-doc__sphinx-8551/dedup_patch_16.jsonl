{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..67a3d60 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -40,7 +40,7 @@ def type_to_xref(text: str, env: BuildEnvironment=None) -> addnodes.pending_xref\n     else:\n         reftype = 'class'\n     if env:\n-        kwargs = {'py:module': env.ref_context.get('py:module'), 'py:class': env.ref_context.get('py:class')}\n+        kwargs = {'py:module': env.ref_context.get('py:module'), 'py:class': env.ref_context.get('py:class'), 'refspecific': True}\n     else:\n         kwargs = {}\n     return pending_xref('', nodes.Text(text), refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n@@ -748,34 +748,22 @@ class PythonDomain(Domain):\n             return []\n         matches = []\n         newname = None\n-        if searchmode == 1:\n-            if type is None:\n-                objtypes = list(self.object_types)\n-            else:\n-                objtypes = self.objtypes_for_role(type)\n-            if objtypes is not None:\n-                if modname and classname:\n-                    fullname = modname + '.' + classname + '.' + name\n-                    if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n-                        newname = fullname\n-                if not newname:\n-                    if modname and modname + '.' + name in self.objects and (self.objects[modname + '.' + name].objtype in objtypes):\n-                        newname = modname + '.' + name\n-                    elif name in self.objects and self.objects[name].objtype in objtypes:\n-                        newname = name\n-                    else:\n-                        searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n-        elif name in self.objects:\n-            newname = name\n-        elif type == 'mod':\n-            return []\n-        elif classname and classname + '.' + name in self.objects:\n-            newname = classname + '.' + name\n-        elif modname and modname + '.' + name in self.objects:\n-            newname = modname + '.' + name\n-        elif modname and classname and (modname + '.' + classname + '.' + name in self.objects):\n-            newname = modname + '.' + classname + '.' + name\n+        if type is None:\n+            objtypes = list(self.object_types)\n+        else:\n+            objtypes = self.objtypes_for_role(type)\n+        if objtypes is not None:\n+            if modname and classname:\n+                fullname = modname + '.' + classname + '.' + name\n+                if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n+                    newname = fullname\n+            if not newname:\n+                if modname and modname + '.' + name in self.objects and (self.objects[modname + '.' + name].objtype in objtypes):\n+                    newname = modname + '.' + name\n+                elif classname and classname + '.' + name in self.objects and (self.objects[classname + '.' + name].objtype in objtypes):\n+                    newname = classname + '.' + name\n+                elif name in self.objects and self.objects[name].objtype in objtypes:\n+                    newname = name\n         if newname is not None:\n             matches.append((newname, self.objects[newname]))\n         return matches"}
