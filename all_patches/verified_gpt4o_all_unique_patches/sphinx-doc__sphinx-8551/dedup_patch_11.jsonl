{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..43a3cc1 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -40,9 +40,18 @@ def type_to_xref(text: str, env: BuildEnvironment=None) -> addnodes.pending_xref\n     else:\n         reftype = 'class'\n     if env:\n-        kwargs = {'py:module': env.ref_context.get('py:module'), 'py:class': env.ref_context.get('py:class')}\n+        ref_context = env.ref_context\n+        current_module = ref_context.get('py:module')\n+        if current_module:\n+            possible_targets = [current_module]\n+            while '.' in current_module:\n+                current_module = current_module.rsplit('.', 1)[0]\n+                possible_targets.append(current_module)\n+            kwargs = {'py:module': tuple(possible_targets), 'py:class': ref_context.get('py:class')}\n+        else:\n+            kwargs = {'py:module': None, 'py:class': ref_context.get('py:class')}\n     else:\n-        kwargs = {}\n+        kwargs = {'py:module': None, 'py:class': None}\n     return pending_xref('', nodes.Text(text), refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n def _parse_annotation(annotation: str, env: BuildEnvironment=None) -> List[Node]:\n     def unparse(node: ast.AST) -> List[Node]:"}
