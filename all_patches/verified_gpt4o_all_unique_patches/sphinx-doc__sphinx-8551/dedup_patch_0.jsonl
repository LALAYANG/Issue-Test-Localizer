{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..07c522b 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -91,8 +91,10 @@ def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xr\n     else:\n         kwargs = {}\n \n+    # Ensure the current module context is properly used for cross-references\n     return pending_xref('', nodes.Text(text),\n-                        refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n+                        refdomain='py', reftype=reftype, reftarget=text,\n+                        refexplicit=False, reftarget_node=None, **kwargs)\n \n \n def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Node]:\n@@ -314,7 +316,9 @@ class PyField(PyXrefMixin, Field):\n             # None is not a type, so use obj role instead.\n             rolename = 'obj'\n \n-        return super().make_xref(rolename, domain, target, innernode, contnode, env)\n+        # Ensure the current module context is properly used for cross-references\n+        return super().make_xref(rolename, domain, target, innernode,\n+                                 contnode=contnode, env=env)\n \n \n class PyGroupedField(PyXrefMixin, GroupedField):\n@@ -329,7 +333,9 @@ class PyTypedField(PyXrefMixin, TypedField):\n             # None is not a type, so use obj role instead.\n             rolename = 'obj'\n \n-        return super().make_xref(rolename, domain, target, innernode, contnode, env)\n+        # Ensure the current module context is properly used for cross-references\n+        return super().make_xref(rolename, domain, target, innernode,\n+                                 contnode=contnode, env=env)\n \n \n class PyObject(ObjectDescription):\n", "occurrence": 1}
