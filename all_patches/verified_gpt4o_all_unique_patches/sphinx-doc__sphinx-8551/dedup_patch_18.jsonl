{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..791a288 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -748,34 +748,26 @@ class PythonDomain(Domain):\n             return []\n         matches = []\n         newname = None\n-        if searchmode == 1:\n-            if type is None:\n-                objtypes = list(self.object_types)\n-            else:\n-                objtypes = self.objtypes_for_role(type)\n-            if objtypes is not None:\n-                if modname and classname:\n-                    fullname = modname + '.' + classname + '.' + name\n-                    if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n-                        newname = fullname\n-                if not newname:\n-                    if modname and modname + '.' + name in self.objects and (self.objects[modname + '.' + name].objtype in objtypes):\n-                        newname = modname + '.' + name\n-                    elif name in self.objects and self.objects[name].objtype in objtypes:\n-                        newname = name\n-                    else:\n-                        searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n-        elif name in self.objects:\n-            newname = name\n-        elif type == 'mod':\n-            return []\n-        elif classname and classname + '.' + name in self.objects:\n-            newname = classname + '.' + name\n-        elif modname and modname + '.' + name in self.objects:\n-            newname = modname + '.' + name\n-        elif modname and classname and (modname + '.' + classname + '.' + name in self.objects):\n-            newname = modname + '.' + classname + '.' + name\n+        objtypes = self.objtypes_for_role(type) if type else list(self.object_types)\n+        search_list = []\n+        if modname:\n+            search_list.append(modname + '.' + name)\n+            if classname:\n+                search_list.append(modname + '.' + classname + '.' + name)\n+        if classname:\n+            search_list.append(classname + '.' + name)\n+        search_list.append(name)\n+        for searchname in search_list:\n+            if searchmode == 1:\n+                if searchname in self.objects and self.objects[searchname].objtype in objtypes:\n+                    newname = searchname\n+                    break\n+            elif searchname in self.objects:\n+                newname = searchname\n+                break\n+        if newname is None and searchmode == 1:\n+            searchname = '.' + name\n+            matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n         if newname is not None:\n             matches.append((newname, self.objects[newname]))\n         return matches"}
