{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..2a096dc 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -747,37 +747,32 @@ class PythonDomain(Domain):\n         if not name:\n             return []\n         matches = []\n-        newname = None\n+        def add_match(objname):\n+            if objname in self.objects:\n+                matches.append((objname, self.objects[objname]))\n         if searchmode == 1:\n             if type is None:\n                 objtypes = list(self.object_types)\n             else:\n                 objtypes = self.objtypes_for_role(type)\n             if objtypes is not None:\n+                if modname:\n+                    if classname:\n+                        add_match(modname + '.' + classname + '.' + name)\n+                    add_match(modname + '.' + name)\n+                add_match(name)\n+                if not matches:\n+                    searchname = '.' + name\n+                    matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n+        else:\n+            add_match(name)\n+            if type != 'mod':\n+                if classname:\n+                    add_match(classname + '.' + name)\n+                if modname:\n+                    add_match(modname + '.' + name)\n                 if modname and classname:\n-                    fullname = modname + '.' + classname + '.' + name\n-                    if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n-                        newname = fullname\n-                if not newname:\n-                    if modname and modname + '.' + name in self.objects and (self.objects[modname + '.' + name].objtype in objtypes):\n-                        newname = modname + '.' + name\n-                    elif name in self.objects and self.objects[name].objtype in objtypes:\n-                        newname = name\n-                    else:\n-                        searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n-        elif name in self.objects:\n-            newname = name\n-        elif type == 'mod':\n-            return []\n-        elif classname and classname + '.' + name in self.objects:\n-            newname = classname + '.' + name\n-        elif modname and modname + '.' + name in self.objects:\n-            newname = modname + '.' + name\n-        elif modname and classname and (modname + '.' + classname + '.' + name in self.objects):\n-            newname = modname + '.' + classname + '.' + name\n-        if newname is not None:\n-            matches.append((newname, self.objects[newname]))\n+                    add_match(modname + '.' + classname + '.' + name)\n         return matches\n     def resolve_xref(self, env: BuildEnvironment, fromdocname: str, builder: Builder, type: str, target: str, node: pending_xref, contnode: Element) -> Element:\n         modname = node.get('py:module')"}
