{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..5488bac 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -78,7 +78,7 @@ ModuleEntry = NamedTuple('ModuleEntry', [('docname', str),\n                                          ('deprecated', bool)])\n \n \n-def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xref:\n+def type_to_xref(text: str, env: BuildEnvironment = None, current_module: str = None) -> addnodes.pending_xref:\n     \"\"\"Convert a type string to a cross reference node.\"\"\"\n     if text == 'None':\n         reftype = 'obj'\n@@ -91,11 +91,14 @@ def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xr\n     else:\n         kwargs = {}\n \n+    if current_module:\n+        kwargs['py:module'] = current_module\n+\n     return pending_xref('', nodes.Text(text),\n                         refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n \n \n-def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Node]:\n+def _parse_annotation(annotation: str, env: BuildEnvironment = None, current_module: str = None) -> List[Node]:\n     \"\"\"Parse type annotation.\"\"\"\n     def unparse(node: ast.AST) -> List[Node]:\n         if isinstance(node, ast.Attribute):\n@@ -159,7 +162,7 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod\n         result = unparse(tree)\n         for i, node in enumerate(result):\n             if isinstance(node, nodes.Text):\n-                result[i] = type_to_xref(str(node), env)\n+                result[i] = type_to_xref(str(node), env, current_module)\n         return result\n     except SyntaxError:\n         return [type_to_xref(annotation, env)]\n", "occurrence": 1}
