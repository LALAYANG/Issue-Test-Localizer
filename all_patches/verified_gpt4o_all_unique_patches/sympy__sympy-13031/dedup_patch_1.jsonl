{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13031", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex e9f8bf4..08ccbe8 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -121,12 +121,18 @@ class BlockDiagMatrix(BlockMatrix):\n         from sympy.matrices.immutable import ImmutableDenseMatrix\n         mats = self.args\n         data = [[mats[i] if i == j else ZeroMatrix(mats[i].rows, mats[j].cols) for j in range(len(mats))] for i in range(len(mats))]\n+        if all((block.rows == 0 for block in self.args)):\n+            return ImmutableDenseMatrix(data[:1])\n         return ImmutableDenseMatrix(data)\n     @property\n     def shape(self):\n+        if all((block.rows == 0 for block in self.args)):\n+            return (0, sum((block.cols for block in self.args)))\n         return (sum((block.rows for block in self.args)), sum((block.cols for block in self.args)))\n     @property\n     def blockshape(self):\n+        if all((block.rows == 0 for block in self.args)):\n+            return (1, len(self.args))\n         n = len(self.args)\n         return (n, n)\n     @property"}
