{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7454", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex cf5467b..afcb0ba 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -99,8 +99,15 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         elif parts[0] == 'rtype':\n             arguments['return'] = {'type': True}\n \n-    for name, annotation in annotations.items():\n+    for name, ann in annotations.items():\n         if name == 'return':\n+            # Special handling for return annotations\n+            if 'None' in ann:\n+                ann = ann.replace('None', ':obj:`None`')\n+            field = nodes.field()\n+            field += nodes.field_name('', 'rtype')\n+            field += nodes.field_body('', nodes.paragraph('', ann))\n+            node += field\n             continue\n \n         arg = arguments.get(name, {})\n@@ -110,23 +117,20 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n             continue\n         elif arg.get('param'):\n             # only param: fill type field\n+            if 'None' in ann:\n+                ann = ann.replace('None', ':obj:`None`')\n             field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotation))\n+            field += nodes.field_body('', nodes.paragraph('', ann))\n         elif arg.get('type'):\n             # only type: It's odd...\n             field += nodes.field_name('', 'param ' + name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n         else:\n             # both param and type are not found\n-            field += nodes.field_name('', 'param ' + annotation + ' ' + name)\n+            if 'None' in ann:\n+                ann = ann.replace('None', ':obj:`None`')\n+            field += nodes.field_name('', 'param ' + ann + ' ' + name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n-\n-        node += field\n-\n-    if 'return' in annotations and 'return' not in arguments:\n-        field = nodes.field()\n-        field += nodes.field_name('', 'rtype')\n-        field += nodes.field_body('', nodes.paragraph('', annotation))\n         node += field\n \n \n", "occurrence": 1}
