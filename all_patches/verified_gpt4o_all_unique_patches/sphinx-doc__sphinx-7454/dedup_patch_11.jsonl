{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7454", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex cf5467b..4aa3247 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -18,7 +18,9 @@ from docutils.nodes import Element\n \n from sphinx import addnodes\n from sphinx.application import Sphinx\n-from sphinx.util import inspect, typing\n+from sphinx.util import inspect, typing, logging\n+\n+logger = logging.getLogger(__name__)\n \n \n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n@@ -33,7 +35,10 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n                 if param.annotation is not param.empty:\n                     annotation[param.name] = typing.stringify(param.annotation)\n             if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+                return_annotation = typing.stringify(sig.return_annotation)\n+                if return_annotation == 'None':\n+                    return_annotation = '<a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#None\" title=\"(in Python v3.8)\">None</a>'\n+                annotation['return'] = return_annotation\n     except (TypeError, ValueError):\n         pass\n \n@@ -53,13 +58,22 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n         fullname = signature['fullname']\n     annotations = app.env.temp_data.get('annotations', {})\n     if annotations.get(fullname, {}):\n-        field_lists = [n for n in contentnode if isinstance(n, nodes.field_list)]\n-        if field_lists == []:\n-            field_list = insert_field_list(contentnode)\n-            field_lists.append(field_list)\n+        if app.config.autodoc_typehints == 'signature':\n+            for child in contentnode.traverse(nodes.paragraph):\n+                text = child.astext()\n+                for name, annotation in annotations[fullname].items():\n+                    if annotation == 'None':\n+                        annotation = '<a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#None\" title=\"(in Python v3.8)\">None</a>'\n+                    text = re.sub(r'\\b{}\\b'.format(name), annotation, text)\n+                child.replace(child[0], nodes.raw('', text, format='html'))\n+        else:\n+            field_lists = [n for n in contentnode if isinstance(n, nodes.field_list)]\n+            if field_lists == []:\n+                field_list = insert_field_list(contentnode)\n+                field_lists.append(field_list)\n \n-        for field_list in field_lists:\n-            modify_field_list(field_list, annotations[fullname])\n+            for field_list in field_lists:\n+                modify_field_list(field_list, annotations[fullname])\n \n \n def insert_field_list(node: Element) -> nodes.field_list:\n@@ -138,4 +152,4 @@ def setup(app: Sphinx) -> Dict[str, Any]:\n         'version': 'builtin',\n         'parallel_read_safe': True,\n         'parallel_write_safe': True,\n-    }\n+    }\n", "occurrence": 1}
