{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7454", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex cf5467b..4630c1e 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -19,6 +19,7 @@ from docutils.nodes import Element\n from sphinx import addnodes\n from sphinx.application import Sphinx\n from sphinx.util import inspect, typing\n+from sphinx.util.typing import stringify_annotation\n \n \n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n@@ -31,9 +32,9 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n             sig = inspect.signature(obj)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n-                    annotation[param.name] = typing.stringify(param.annotation)\n+                    annotation[param.name] = stringify_annotation(param.annotation)\n             if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+                annotation['return'] = stringify_annotation(sig.return_annotation)\n     except (TypeError, ValueError):\n         pass\n \n@@ -53,7 +54,7 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n         fullname = signature['fullname']\n     annotations = app.env.temp_data.get('annotations', {})\n     if annotations.get(fullname, {}):\n-        field_lists = [n for n in contentnode if isinstance(n, nodes.field_list)]\n+        field_lists = [n for n in contentnode if isinstance(n, nodes.field_list) or isinstance(n, nodes.field)]\n         if field_lists == []:\n             field_list = insert_field_list(contentnode)\n             field_lists.append(field_list)\n@@ -126,7 +127,10 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n     if 'return' in annotations and 'return' not in arguments:\n         field = nodes.field()\n         field += nodes.field_name('', 'rtype')\n-        field += nodes.field_body('', nodes.paragraph('', annotation))\n+        if annotation == 'None':\n+            field += nodes.field_body('', nodes.paragraph('', nodes.reference('', 'None', refuri='https://docs.python.org/3/library/constants.html#None')))\n+        else:\n+            field += nodes.field_body('', nodes.paragraph('', annotation))\n         node += field\n \n \n@@ -138,4 +142,4 @@ def setup(app: Sphinx) -> Dict[str, Any]:\n         'version': 'builtin',\n         'parallel_read_safe': True,\n         'parallel_write_safe': True,\n-    }\n+    }\n"}
