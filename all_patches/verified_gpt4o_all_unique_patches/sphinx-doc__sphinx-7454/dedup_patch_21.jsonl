{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7454", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex f356328..a4d43e8 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -17,6 +17,10 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Di\n                 if param.annotation is not param.empty:\n                     annotation[param.name] = typing.stringify(param.annotation)\n             if sig.return_annotation is not sig.empty:\n+                return_annotation = typing.stringify(sig.return_annotation)\n+                if return_annotation == 'NoneType':\n+                    return_annotation = 'None'\n+                annotation['return'] = return_annotation\n                 annotation['return'] = typing.stringify(sig.return_annotation)\n     except (TypeError, ValueError):\n         pass\n@@ -72,6 +76,8 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n             arguments['return'] = {'type': True}\n     for name, annotation in annotations.items():\n         if name == 'return':\n+            if annotation == 'NoneType':\n+                annotation = 'None'\n             continue\n         arg = arguments.get(name, {})\n         field = nodes.field()"}
