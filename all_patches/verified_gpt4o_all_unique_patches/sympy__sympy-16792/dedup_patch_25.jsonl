{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16792", "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex 6b78c94..cb269b0 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -413,14 +413,12 @@ setup(ext_modules=cythonize(ext_mods, **cy_opts))\n         py_locals = []\n         py_inferred = {}\n         for arg in args:\n+            py_args.append(arg)\n             if isinstance(arg, OutputArgument):\n                 py_returns.append(arg)\n                 py_locals.append(arg)\n             elif isinstance(arg, InOutArgument):\n                 py_returns.append(arg)\n-                py_args.append(arg)\n-            else:\n-                py_args.append(arg)\n         # Find arguments that are array dimensions. These can be inferred\n         # locally in the Cython code.\n             if isinstance(arg, (InputArgument, InOutArgument)) and arg.dimensions:\n@@ -432,8 +430,7 @@ setup(ext_modules=cythonize(ext_mods, **cy_opts))\n         for arg in args:\n             if arg.name in py_inferred:\n                 py_inferred[arg] = py_inferred.pop(arg.name)\n-        # Filter inferred arguments from py_args\n-        py_args = [a for a in py_args if a not in py_inferred]\n+        # Ensure all original arguments are kept in py_args, even if inferred\n         return py_returns, py_args, py_locals, py_inferred\n \n     def _prototype_arg(self, arg):\n", "occurrence": 1}
