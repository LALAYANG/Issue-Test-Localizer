{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16792", "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex da40c47..b6b7bb2 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -189,11 +189,12 @@ class CythonCodeWrapper(CodeWrapper):\n             if arg.name in py_inferred:\n                 py_inferred[arg] = py_inferred.pop(arg.name)\n         py_args = [a for a in py_args if a not in py_inferred]\n+        py_args += [InputArgument(name, arg.get_datatype('c'), arg.dimensions) for name, arg in py_inferred.items()]\n         return (py_returns, py_args, py_locals, py_inferred)\n     def _prototype_arg(self, arg):\n         mat_dec = 'np.ndarray[{mtype}, ndim={ndim}] {name}'\n         np_types = {'double': 'np.double_t', 'int': 'np.int_t'}\n-        t = arg.get_datatype('c')\n+        t = np_types[arg.get_datatype('c')]\n         if arg.dimensions:\n             self._need_numpy = True\n             ndim = len(arg.dimensions)"}
