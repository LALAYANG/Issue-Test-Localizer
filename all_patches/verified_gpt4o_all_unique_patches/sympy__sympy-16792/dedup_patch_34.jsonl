{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16792", "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex da40c47..ea09a71 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -143,15 +143,14 @@ class CythonCodeWrapper(CodeWrapper):\n             py_rets, py_args, py_loc, py_inf = self._partition_args(routine.arguments)\n             name = routine.name\n             arg_string = ', '.join((self._prototype_arg(arg) for arg in py_args))\n-            local_decs = []\n-            for arg, val in py_inf.items():\n-                proto = self._prototype_arg(arg)\n-                mat, ind = [self._string_var(v) for v in val]\n-                local_decs.append('    cdef {0} = {1}.shape[{2}]'.format(proto, mat, ind))\n-            local_decs.extend(['    cdef {0}'.format(self._declare_arg(a)) for a in py_loc])\n+            local_decs = ['    cdef {0}'.format(self._declare_arg(a)) for a in py_loc]\n             declarations = '\\n'.join(local_decs)\n             if declarations:\n                 declarations = declarations + '\\n'\n+            for arg, val in py_inf.items():\n+                proto = self._prototype_arg(arg)\n+                mat, ind = [self._string_var(v) for v in val]\n+                declarations += '    cdef {0} = {1}.shape[{2}]\\n'.format(proto, mat, ind)\n             args_c = ', '.join([self._call_arg(a) for a in routine.arguments])\n             rets = ', '.join([self._string_var(r.name) for r in py_rets])\n             if routine.results:\n@@ -188,7 +187,6 @@ class CythonCodeWrapper(CodeWrapper):\n         for arg in args:\n             if arg.name in py_inferred:\n                 py_inferred[arg] = py_inferred.pop(arg.name)\n-        py_args = [a for a in py_args if a not in py_inferred]\n         return (py_returns, py_args, py_locals, py_inferred)\n     def _prototype_arg(self, arg):\n         mat_dec = 'np.ndarray[{mtype}, ndim={ndim}] {name}'"}
