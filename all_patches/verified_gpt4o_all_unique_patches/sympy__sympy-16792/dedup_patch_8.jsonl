{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16792", "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex da40c47..5389b59 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -172,14 +172,12 @@ class CythonCodeWrapper(CodeWrapper):\n         py_locals = []\n         py_inferred = {}\n         for arg in args:\n+            py_args.append(arg)\n             if isinstance(arg, OutputArgument):\n                 py_returns.append(arg)\n                 py_locals.append(arg)\n             elif isinstance(arg, InOutArgument):\n                 py_returns.append(arg)\n-                py_args.append(arg)\n-            else:\n-                py_args.append(arg)\n             if isinstance(arg, (InputArgument, InOutArgument)) and arg.dimensions:\n                 dims = [d[1] + 1 for d in arg.dimensions]\n                 sym_dims = [(i, d) for i, d in enumerate(dims) if isinstance(d, Symbol)]\n@@ -188,7 +186,6 @@ class CythonCodeWrapper(CodeWrapper):\n         for arg in args:\n             if arg.name in py_inferred:\n                 py_inferred[arg] = py_inferred.pop(arg.name)\n-        py_args = [a for a in py_args if a not in py_inferred]\n         return (py_returns, py_args, py_locals, py_inferred)\n     def _prototype_arg(self, arg):\n         mat_dec = 'np.ndarray[{mtype}, ndim={ndim}] {name}'"}
