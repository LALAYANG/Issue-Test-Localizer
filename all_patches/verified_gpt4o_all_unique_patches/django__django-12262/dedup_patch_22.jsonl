{"model_name_or_path": "agentless", "instance_id": "django__django-12262", "model_patch": "diff --git a/django/template/library.py b/django/template/library.py\nindex e9453ed..a9cec99 100644\n--- a/django/template/library.py\n+++ b/django/template/library.py\n@@ -255,6 +255,32 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults,\n         kwarg for kwarg in kwonly\n         if not kwonly_defaults or kwarg not in kwonly_defaults\n     ]\n+    for bit in bits:\n+        # First we try to extract a potential kwarg from the bit\n+        kwarg = token_kwargs([bit], parser)\n+        if kwarg:\n+            # The kwarg was successfully extracted\n+            param, value = kwarg.popitem()\n+            if param not in params and param not in unhandled_kwargs and varkw is None:\n+                # An unexpected keyword argument was supplied\n+                raise TemplateSyntaxError(\n+                    \"'%s' received unexpected keyword argument '%s'\" %\n+                    (name, param))\n+            elif param in kwargs:\n+                # The keyword argument has already been supplied once\n+                raise TemplateSyntaxError(\n+                    \"'%s' received multiple values for keyword argument '%s'\" %\n+                    (name, param))\n+            else:\n+                # All good, record the keyword argument\n+                kwargs[str(param)] = value\n+                if param in unhandled_params:\n+                    # If using the keyword syntax for a positional arg, then\n+                    # consume it.\n+                    unhandled_params.remove(param)\n+                elif param in unhandled_kwargs:\n+                    # Same for keyword-only arguments\n+                    unhandled_kwargs.remove(param)\n     for bit in bits:\n         # First we try to extract a potential kwarg from the bit\n         kwarg = token_kwargs([bit], parser)\n"}
