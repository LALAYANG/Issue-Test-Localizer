{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-22865", "model_patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex 5ebeaf9..987e7d3 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -645,9 +645,10 @@ class Colorbar:\n                 and any(hatch is not None for hatch in mappable.hatches)):\n             self._add_solids_patches(X, Y, C, mappable)\n         else:\n+            edgecolors = 'none' if not self.drawedges else 'face'\n             self.solids = self.ax.pcolormesh(\n                 X, Y, C, cmap=self.cmap, norm=self.norm, alpha=self.alpha,\n-                edgecolors='none', shading='flat')\n+                edgecolors=edgecolors, shading='flat')\n             if not self.drawedges:\n                 if len(self._y) >= self.n_rasterize:\n                     self.solids.set_rasterized(True)\n@@ -727,7 +728,7 @@ class Colorbar:\n             val = -1 if self._long_axis().get_inverted() else 0\n             color = self.cmap(self.norm(self._values[val]))\n             patch = mpatches.PathPatch(\n-                mpath.Path(xy), facecolor=color, linewidth=0,\n+                mpath.Path(xy), facecolor=color, linewidth=1 if self.drawedges else 0,\n                 antialiased=False, transform=self.ax.transAxes,\n                 hatch=hatches[0], clip_on=False,\n                 # Place it right behind the standard patches, which is\n@@ -749,7 +750,7 @@ class Colorbar:\n             color = self.cmap(self.norm(self._values[val]))\n             patch = mpatches.PathPatch(\n                 mpath.Path(xy), facecolor=color,\n-                linewidth=0, antialiased=False,\n+                linewidth=1 if self.drawedges else 0, antialiased=False,\n                 transform=self.ax.transAxes, hatch=hatches[-1], clip_on=False,\n                 # Place it right behind the standard patches, which is\n                 # needed if we updated the extends\n", "occurrence": 1}
