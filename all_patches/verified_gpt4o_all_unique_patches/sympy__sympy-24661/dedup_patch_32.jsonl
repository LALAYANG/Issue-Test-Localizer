{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24661", "model_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 2ec3cf6..de5cbec 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -1072,7 +1072,7 @@ def parse_expr(s: str, local_dict: Optional[DICT] = None,\n     code = stringify_expr(s, local_dict, global_dict, _transformations)\n \n     if not evaluate:\n-        code = compile(evaluateFalse(code), '<string>', 'eval')\n+        code = compile(evaluateFalse(code, evaluate), '<string>', 'eval')\n \n     try:\n         rv = eval_expr(code, local_dict, global_dict)\n@@ -1087,12 +1087,12 @@ def parse_expr(s: str, local_dict: Optional[DICT] = None,\n         raise e from ValueError(f\"Error from parse_expr with transformed code: {code!r}\")\n \n \n-def evaluateFalse(s: str):\n+def evaluateFalse(s: str, evaluate=True):\n     \"\"\"\n     Replaces operators with the SymPy equivalent and sets evaluate=False.\n     \"\"\"\n     node = ast.parse(s)\n-    transformed_node = EvaluateFalseTransformer().visit(node)\n+    transformed_node = EvaluateFalseTransformer(evaluate).visit(node)\n     # node is a Module, we want an Expression\n     transformed_node = ast.Expression(transformed_node.body[0].value)\n \n", "occurrence": 1}
