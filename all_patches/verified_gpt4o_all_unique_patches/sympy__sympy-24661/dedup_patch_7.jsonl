{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24661", "model_patch": "diff --git a/sympy/core/relational.py b/sympy/core/relational.py\nindex c35b72b..9ae0c1a 100644\n--- a/sympy/core/relational.py\n+++ b/sympy/core/relational.py\n@@ -614,11 +614,9 @@ class Equality(Relational):\n         lhs = _sympify(lhs)\n         rhs = _sympify(rhs)\n         if evaluate:\n-            val = is_eq(lhs, rhs)\n-            if val is None:\n-                return cls(lhs, rhs, evaluate=False)\n-            else:\n-                return _sympify(val)\n+            val = cls._eval_relation(lhs, rhs)\n+            if val is not None:\n+                return val\n \n         return Relational.__new__(cls, lhs, rhs)\n \n@@ -765,11 +763,9 @@ class Unequality(Relational):\n         rhs = _sympify(rhs)\n         evaluate = options.pop('evaluate', global_parameters.evaluate)\n         if evaluate:\n-            val = is_neq(lhs, rhs)\n-            if val is None:\n-                return cls(lhs, rhs, evaluate=False)\n-            else:\n-                return _sympify(val)\n+            val = cls._eval_relation(lhs, rhs)\n+            if val is not None:\n+                return val\n \n         return Relational.__new__(cls, lhs, rhs, **options)\n \n@@ -799,6 +795,15 @@ Ne = Unequality\n \n \n class _Inequality(Relational):\n+    def __new__(cls, lhs, rhs, **options):\n+        lhs = _sympify(lhs)\n+        rhs = _sympify(rhs)\n+        evaluate = options.pop('evaluate', global_parameters.evaluate)\n+        if evaluate:\n+            val = cls._eval_relation(lhs, rhs)\n+            if val is not None:\n+                return val\n+        return Relational.__new__(cls, lhs, rhs, **options)\n     \"\"\"Internal base class for all *Than types.\n \n     Each subclass must implement _eval_relation to provide the method for\n", "occurrence": 1}
