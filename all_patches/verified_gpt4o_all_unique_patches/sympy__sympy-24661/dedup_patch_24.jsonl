{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24661", "model_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 0c06cf1..7631864 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -511,7 +511,7 @@ def parse_expr(s: str, local_dict: Optional[DICT]=None, transformations: tUnion[\n         _transformations = transformations\n     code = stringify_expr(s, local_dict, global_dict, _transformations)\n     if not evaluate:\n-        code = compile(evaluateFalse(code), '<string>', 'eval')\n+        code = compile(evaluateFalse(code, evaluate), '<string>', 'eval')\n     try:\n         rv = eval_expr(code, local_dict, global_dict)\n         for i in local_dict.pop(null, ()):\n@@ -521,9 +521,9 @@ def parse_expr(s: str, local_dict: Optional[DICT]=None, transformations: tUnion[\n         for i in local_dict.pop(null, ()):\n             local_dict[i] = null\n         raise e from ValueError(f'Error from parse_expr with transformed code: {code!r}')\n-def evaluateFalse(s: str):\n+def evaluateFalse(s: str, evaluate=True):\n     node = ast.parse(s)\n-    transformed_node = EvaluateFalseTransformer().visit(node)\n+    transformed_node = EvaluateFalseTransformer(evaluate).visit(node)\n     transformed_node = ast.Expression(transformed_node.body[0].value)\n     return ast.fix_missing_locations(transformed_node)\n class EvaluateFalseTransformer(ast.NodeTransformer):"}
