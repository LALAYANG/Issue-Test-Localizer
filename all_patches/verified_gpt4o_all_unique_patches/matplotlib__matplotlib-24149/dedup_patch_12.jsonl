{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-24149", "model_patch": "diff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py\nindex d655165..8b27f57 100644\n--- a/lib/matplotlib/cbook/__init__.py\n+++ b/lib/matplotlib/cbook/__init__.py\n@@ -737,7 +737,14 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n             return np.isfinite(val) if np.isscalar(val) else True\n         except TypeError:\n             return True\n-    if skip_nonfinite is False:\n+    if skip_nonfinite:\n+        if isinstance(obj, np.flatiter):\n+            return next((val for val in obj if safe_isfinite(val)), np.nan)\n+        elif isinstance(obj, collections.abc.Iterator):\n+            raise RuntimeError('matplotlib does not support generators as input')\n+        else:\n+            return next((val for val in obj if safe_isfinite(val)), np.nan)\n+    else:\n         if isinstance(obj, collections.abc.Iterator):\n             try:\n                 return obj[0]\n@@ -745,12 +752,6 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n                 pass\n             raise RuntimeError('matplotlib does not support generators as input')\n         return next(iter(obj))\n-    elif isinstance(obj, np.flatiter):\n-        return obj[0]\n-    elif isinstance(obj, collections.abc.Iterator):\n-        raise RuntimeError('matplotlib does not support generators as input')\n-    else:\n-        return next((val for val in obj if safe_isfinite(val)))\n def sanitize_sequence(data):\n     return list(data) if isinstance(data, collections.abc.MappingView) else data\n def normalize_kwargs(kw, alias_mapping=None):"}
