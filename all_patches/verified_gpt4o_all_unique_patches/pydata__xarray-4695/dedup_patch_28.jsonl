{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4695", "model_patch": "diff --git a/xarray/core/indexing.py b/xarray/core/indexing.py\nindex 27ac399..a53c21a 100644\n--- a/xarray/core/indexing.py\n+++ b/xarray/core/indexing.py\n@@ -57,7 +57,7 @@ def get_indexer_nd(index, labels, method=None, tolerance=None):\n     flat_indexer = index.get_indexer(flat_labels, method=method, tolerance=tolerance)\n     indexer = flat_indexer.reshape(labels.shape)\n     return indexer\n-def convert_label_indexer(index, label, index_name='', method=None, tolerance=None):\n+def convert_label_indexer(index, label, index_name='', method=None, tolerance=None, dim_method=None):\n     new_index = None\n     if isinstance(label, slice):\n         if method is not None or tolerance is not None:\n@@ -98,13 +98,13 @@ def convert_label_indexer(index, label, index_name='', method=None, tolerance=No\n                     raise ValueError(\"'tolerance' is not a valid kwarg when indexing using a CategoricalIndex.\")\n                 indexer = index.get_loc(label_value)\n             else:\n-                indexer = index.get_loc(label_value, method=method, tolerance=tolerance)\n+                indexer = index.get_loc(label_value, method=dim_method, tolerance=tolerance)\n         elif label.dtype.kind == 'b':\n             indexer = label\n         else:\n             if isinstance(index, pd.MultiIndex) and label.ndim > 1:\n                 raise ValueError('Vectorized selection is not available along MultiIndex variable: ' + index_name)\n-            indexer = get_indexer_nd(index, label, method, tolerance)\n+            indexer = get_indexer_nd(index, label, dim_method, tolerance)\n             if np.any(indexer < 0):\n                 raise KeyError(f'not all values found in index {index_name!r}')\n     return (indexer, new_index)"}
