{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-12973", "model_patch": "diff --git a/sklearn/linear_model/least_angle.py b/sklearn/linear_model/least_angle.py\nindex 04326da..00df3aa 100644\n--- a/sklearn/linear_model/least_angle.py\n+++ b/sklearn/linear_model/least_angle.py\n@@ -383,7 +383,12 @@ class LassoLarsIC(LassoLars):\n         self.precompute = precompute\n         self.eps = eps\n         self.fit_path = True\n-    def fit(self, X, y, copy_X=True):\n+    def fit(self, X, y, copy_X=None):\n+        if copy_X is None:\n+            copy_X = self.copy_X\n+        else:\n+            self.copy_X = copy_X\n+        \"Fit the model using X, y as training data.\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape (n_samples, n_features)\\n            training data.\\n\\n        y : array-like, shape (n_samples,)\\n            target values. Will be cast to X's dtype if necessary\\n\\n        copy_X : boolean, optional, default True\\n            If ``True``, X will be copied; else, it may be overwritten.\\n\\n        Returns\\n        -------\\n        self : object\\n            returns an instance of self.\\n        \"\n         X, y = check_X_y(X, y, y_numeric=True)\n         X, y, Xmean, ymean, Xstd = LinearModel._preprocess_data(X, y, self.fit_intercept, self.normalize, self.copy_X)\n         max_iter = self.max_iter"}
