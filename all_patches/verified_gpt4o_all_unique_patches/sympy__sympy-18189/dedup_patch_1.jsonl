{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18189", "model_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex 6132016..09c3226 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -70,7 +70,14 @@ def diophantine(eq, param=symbols('t', integer=True), syms=None, permute=False):\n             if not is_sequence(syms):\n                 raise TypeError('syms should be given as a sequence, e.g. a list')\n             syms = [i for i in syms if i in var]\n-            if syms != var:\n+            if permute:\n+                solutions = diophantine(eq, param)\n+                permuted_solutions = set()\n+                for sol in solutions:\n+                    for perm in permutations(sol):\n+                        permuted_solutions.add(tuple((perm[syms.index(v)] for v in var)))\n+                return permuted_solutions\n+            elif syms != var:\n                 dict_sym_index = dict(zip(syms, range(len(syms))))\n                 return {tuple([t[dict_sym_index[i]] for i in var]) for t in diophantine(eq, param)}\n         n, d = eq.as_numer_denom()"}
