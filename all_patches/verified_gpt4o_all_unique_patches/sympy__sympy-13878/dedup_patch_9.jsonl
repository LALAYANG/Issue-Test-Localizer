{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13878", "model_patch": "--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n+    def _cdf(self, x):\n+        a, b = (self.a, self.b)\n+        return 2 / pi * asin(sqrt((x - a) / (b - a)))\n+    def _cdf(self, x):\n+        p, a, b = (self.p, self.a, self.b)\n+        return 1 - (1 + (x / b) ** (-a)) ** (-p)\n+    def _cdf(self, x):\n+        a, s, m = (self.a, self.s, self.m)\n+        return exp(-((x - m) / s) ** (-a))\n+    def _cdf(self, x):\n+        k, theta = (self.k, self.theta)\n+        return lowergamma(k, x / theta) / gamma(k)\n+    def _cdf(self, x):\n+        a, b = (self.a, self.b)\n+        return uppergamma(a, b / x) / gamma(a)\n+    def _cdf(self, x):\n+        a, b = (self.a, self.b)\n+        return 1 - (1 - x ** a) ** b\n+    def _cdf(self, x):\n+        mu, b = (self.mu, self.b)\n+        return Piecewise((S(1) / 2 * exp((x - mu) / b), x < mu), (1 - S(1) / 2 * exp(-(x - mu) / b), x >= mu))\n+    def _cdf(self, x):\n+        mu, s = (self.mu, self.s)\n+        return 1 / (1 + exp(-(x - mu) / s))\n+    def _cdf(self, x):\n+        mu, omega = (self.mu, self.omega)\n+        return gamma(mu, mu / omega * x ** 2) / gamma(mu)\n+    def _cdf(self, x):\n+        nu = self.nu\n+        return S(1) / 2 + x * gamma((nu + 1) / 2) / (sqrt(pi * nu) * gamma(nu / 2) * hyp2f1(S(1) / 2, (nu + 1) / 2, S(3) / 2, -x ** 2 / nu))"}
