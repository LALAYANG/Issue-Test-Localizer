{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13878", "model_patch": "--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n+class ArcsinDistribution(SingleContinuousDistribution):\n+    _argnames = ('a', 'b')\n+    def pdf(self, x):\n+        return 1 / (pi * sqrt((x - self.a) * (self.b - x)))\n+    def _cdf(self, x):\n+        a, b = (self.a, self.b)\n+        return 2 / pi * asin(sqrt((x - a) / (b - a)))\n+class DagumDistribution(SingleContinuousDistribution):\n+    _argnames = ('p', 'a', 'b')\n+    def pdf(self, x):\n+        p, a, b = (self.p, self.a, self.b)\n+        return a * p / x * ((x / b) ** (a * p) / ((x / b) ** a + 1) ** (p + 1))\n+    def _cdf(self, x):\n+        p, a, b = (self.p, self.a, self.b)\n+        return 1 - (1 + (x / b) ** (-a)) ** (-p)\n+class ErlangDistribution(SingleContinuousDistribution):\n+    _argnames = ('k', 'l')\n+    def pdf(self, x):\n+        k, l = (self.k, self.l)\n+        return l ** k * x ** (k - 1) * exp(-l * x) / factorial(k - 1)\n+    def _cdf(self, x):\n+        k, l = (self.k, self.l)\n+        return Piecewise((uppergamma(k, l * x) / factorial(k - 1), x >= 0), (0, True))\n+class FrechetDistribution(SingleContinuousDistribution):\n+    _argnames = ('a', 's', 'm')\n+    set = Interval(0, oo)\n+    def __new__(cls, a, s=1, m=0):\n+        a, s, m = list(map(sympify, (a, s, m)))\n+        return Basic.__new__(cls, a, s, m)\n+    def pdf(self, x):\n+        a, s, m = (self.a, self.s, self.m)\n+        return a / s * ((x - m) / s) ** (-1 - a) * exp(-((x - m) / s) ** (-a))\n+    def _cdf(self, x):\n+        a, s, m = (self.a, self.s, self.m)\n+        return exp(-((x - m) / s) ** (-a))\n+class GammaDistribution(SingleContinuousDistribution):\n+    _argnames = ('k', 'theta')\n+    set = Interval(0, oo)\n+    @staticmethod\n+    def check(k, theta):\n+        _value_check(k > 0, 'k must be positive')\n+        _value_check(theta > 0, 'Theta must be positive')\n+    def pdf(self, x):\n+        k, theta = (self.k, self.theta)\n+        return x ** (k - 1) * exp(-x / theta) / (gamma(k) * theta ** k)\n+    def _cdf(self, x):\n+        k, theta = (self.k, self.theta)\n+        return lowergamma(k, x / theta) / gamma(k)\n+    def sample(self):\n+        return random.gammavariate(self.k, self.theta)"}
