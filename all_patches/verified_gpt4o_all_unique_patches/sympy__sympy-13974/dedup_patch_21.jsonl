{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13974", "model_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex 153c783..bbcc91f 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -239,6 +239,12 @@ class TensorProduct(Expr):\n         return TensorProduct(*[item.doit(**hints) for item in self.args])\n \n     def _eval_expand_tensorproduct(self, **hints):\n+        from sympy import Pow\n+\n+        if isinstance(self, Pow):\n+            base = self.base._eval_expand_tensorproduct(**hints)\n+            exp = self.exp\n+            return Pow(base, exp)._eval_expand_tensorproduct(**hints)\n         \"\"\"Distribute TensorProducts across addition.\"\"\"\n         args = self.args\n         add_args = []\n@@ -346,6 +352,9 @@ def tensor_product_simp_Mul(e):\n \n \n def tensor_product_simp(e, **hints):\n+    if isinstance(e, Pow) and isinstance(e.base, TensorProduct):\n+        base = tensor_product_simp(e.base)\n+        return TensorProduct(*[arg**e.exp for arg in base.args])\n     \"\"\"Try to simplify and combine TensorProducts.\n \n     In general this will try to pull expressions inside of ``TensorProducts``.\n@@ -390,4 +399,4 @@ def tensor_product_simp(e, **hints):\n     elif isinstance(e, AntiCommutator):\n         return AntiCommutator(*[tensor_product_simp(arg) for arg in e.args])\n     else:\n-        return e\n+        return e\n"}
