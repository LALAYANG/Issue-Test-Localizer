{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-9288", "model_patch": "diff --git a/sklearn/cluster/k_means_.py b/sklearn/cluster/k_means_.py\nindex abcc315..830f20d 100644\n--- a/sklearn/cluster/k_means_.py\n+++ b/sklearn/cluster/k_means_.py\n@@ -108,7 +108,8 @@ def k_means(X, n_clusters, sample_weight=None, init='k-means++', precompute_dist\n         raise ValueError(\"Algorithm must be 'auto', 'full' or 'elkan', got %s\" % str(algorithm))\n     if effective_n_jobs(n_jobs) == 1:\n         for it in range(n_init):\n-            labels, inertia, centers, n_iter_ = kmeans_single(X, sample_weight, n_clusters, max_iter=max_iter, init=init, verbose=verbose, precompute_distances=precompute_distances, tol=tol, x_squared_norms=x_squared_norms, random_state=random_state)\n+            single_run_random_state = check_random_state(random_state.randint(np.iinfo(np.int32).max))\n+            labels, inertia, centers, n_iter_ = kmeans_single(X, sample_weight, n_clusters, max_iter=max_iter, init=init, verbose=verbose, precompute_distances=precompute_distances, tol=tol, x_squared_norms=x_squared_norms, random_state=single_run_random_state)\n             if best_inertia is None or inertia < best_inertia:\n                 best_labels = labels.copy()\n                 best_centers = centers.copy()\n@@ -116,7 +117,8 @@ def k_means(X, n_clusters, sample_weight=None, init='k-means++', precompute_dist\n                 best_n_iter = n_iter_\n     else:\n         seeds = random_state.randint(np.iinfo(np.int32).max, size=n_init)\n-        results = Parallel(n_jobs=n_jobs, verbose=0)((delayed(kmeans_single)(X, sample_weight, n_clusters, max_iter=max_iter, init=init, verbose=verbose, tol=tol, precompute_distances=precompute_distances, x_squared_norms=x_squared_norms, random_state=seed) for seed in seeds))\n+        single_run_random_states = [check_random_state(seed) for seed in seeds]\n+        results = Parallel(n_jobs=n_jobs, verbose=0)((delayed(kmeans_single)(X, sample_weight, n_clusters, max_iter=max_iter, init=init, verbose=verbose, tol=tol, precompute_distances=precompute_distances, x_squared_norms=x_squared_norms, random_state=single_run_random_state) for single_run_random_state in single_run_random_states))\n         labels, inertia, centers, n_iters = zip(*results)\n         best = np.argmin(inertia)\n         best_labels = labels[best]"}
