{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-13124", "model_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex a142d27..83a4dc1 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -562,7 +562,16 @@ class StratifiedKFold(_BaseKFold):\n             raise ValueError('n_splits=%d cannot be greater than the number of members in each class.' % self.n_splits)\n         if self.n_splits > min_groups:\n             warnings.warn('The least populated class in y has only %d members, which is too few. The minimum number of members in any class cannot be less than n_splits=%d.' % (min_groups, self.n_splits), Warning)\n-        per_cls_cvs = [KFold(self.n_splits, shuffle=self.shuffle, random_state=rng).split(np.zeros(max(count, self.n_splits))) for count in y_counts]\n+        if self.shuffle:\n+            for cls in np.unique(y):\n+                cls_idx = np.where(y == cls)[0]\n+                rng.shuffle(cls_idx)\n+                y[cls_idx] = y[cls_idx]\n+        y = column_or_1d(y)\n+        n_samples = y.shape[0]\n+        unique_y, y_inversed = np.unique(y, return_inverse=True)\n+        y_counts = np.bincount(y_inversed)\n+        per_cls_cvs = [KFold(self.n_splits, shuffle=False, random_state=rng).split(np.zeros(max(count, self.n_splits))) for count in y_counts]\n         test_folds = np.zeros(n_samples, dtype=np.int)\n         for test_fold_indices, per_cls_splits in enumerate(zip(*per_cls_cvs)):\n             for cls, (_, test_split) in zip(unique_y, per_cls_splits):"}
