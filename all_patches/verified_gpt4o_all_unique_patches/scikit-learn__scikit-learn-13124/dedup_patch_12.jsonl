{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-13124", "model_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex 1bd5697..69e9f26 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -632,6 +632,8 @@ class StratifiedKFold(_BaseKFold):\n         y = column_or_1d(y)\n         n_samples = y.shape[0]\n         unique_y, y_inversed = np.unique(y, return_inverse=True)\n+        if self.shuffle:\n+            rng.shuffle(y_inversed)\n         y_counts = np.bincount(y_inversed)\n         min_groups = np.min(y_counts)\n         if np.all(self.n_splits > y_counts):\n@@ -651,9 +653,13 @@ class StratifiedKFold(_BaseKFold):\n         # NOTE: Passing the data corresponding to ith class say X[y==class_i]\n         # will break when the data is not 100% stratifiable for all classes.\n         # So we pass np.zeroes(max(c, n_splits)) as data to the KFold\n+        if self.shuffle:\n+            indices = np.arange(n_samples)\n+            rng.shuffle(indices)\n+            y = y[indices]\n+        \n         per_cls_cvs = [\n-            KFold(self.n_splits, shuffle=self.shuffle,\n-                  random_state=rng).split(np.zeros(max(count, self.n_splits)))\n+            KFold(self.n_splits, shuffle=False).split(np.zeros(max(count, self.n_splits)))\n             for count in y_counts]\n \n         test_folds = np.zeros(n_samples, dtype=np.int)\n", "occurrence": 1}
