{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-13124", "model_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex 1bd5697..e2d9f4d 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -645,16 +645,18 @@ class StratifiedKFold(_BaseKFold):\n                            \" be less than n_splits=%d.\"\n                            % (min_groups, self.n_splits)), Warning)\n \n-        # pre-assign each sample to a test fold index using individual KFold\n-        # splitting strategies for each class so as to respect the balance of\n-        # classes\n-        # NOTE: Passing the data corresponding to ith class say X[y==class_i]\n-        # will break when the data is not 100% stratifiable for all classes.\n-        # So we pass np.zeroes(max(c, n_splits)) as data to the KFold\n-        per_cls_cvs = [\n-            KFold(self.n_splits, shuffle=self.shuffle,\n-                  random_state=rng).split(np.zeros(max(count, self.n_splits)))\n-            for count in y_counts]\n+        # Shuffle each class' samples before pre-assigning each sample \n+        # to a test fold index using individual KFold splitting strategies \n+        # for each class so as to respect the balance of classes.\n+        rng = check_random_state(rng)\n+        for cls in unique_y:\n+            cls_indices = np.where(y == cls)[0]\n+            if self.shuffle:\n+                rng.shuffle(cls_indices)\n+            test_folds[cls_indices] = np.array_split(cls_indices, self.n_splits)\n+        \n+        # Flatten the test_folds to match the expected format\n+        test_folds = np.concatenate([np.full(len(fold), i) for i, fold in enumerate(test_folds)])\n \n         test_folds = np.zeros(n_samples, dtype=np.int)\n         for test_fold_indices, per_cls_splits in enumerate(zip(*per_cls_cvs)):\n"}
