{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-13124", "model_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex 1bd5697..a08029e 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -645,15 +645,16 @@ class StratifiedKFold(_BaseKFold):\n                            \" be less than n_splits=%d.\"\n                            % (min_groups, self.n_splits)), Warning)\n \n-        # pre-assign each sample to a test fold index using individual KFold\n+        # Pre-assign each sample to a test fold index using individual KFold\n         # splitting strategies for each class so as to respect the balance of\n-        # classes\n-        # NOTE: Passing the data corresponding to ith class say X[y==class_i]\n-        # will break when the data is not 100% stratifiable for all classes.\n-        # So we pass np.zeroes(max(c, n_splits)) as data to the KFold\n+        # classes. Shuffle indices within each class if self.shuffle is True.\n+        if self.shuffle:\n+            for cls in unique_y:\n+                rng.shuffle(np.flatnonzero(y == cls))\n+\n         per_cls_cvs = [\n-            KFold(self.n_splits, shuffle=self.shuffle,\n-                  random_state=rng).split(np.zeros(max(count, self.n_splits)))\n+            KFold(self.n_splits, shuffle=self.shuffle, random_state=rng).split(\n+                np.zeros(max(count, self.n_splits)))\n             for count in y_counts]\n \n         test_folds = np.zeros(n_samples, dtype=np.int)\n"}
