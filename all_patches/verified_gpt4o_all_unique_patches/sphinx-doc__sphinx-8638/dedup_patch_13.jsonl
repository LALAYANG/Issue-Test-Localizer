{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8638", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 320f592..c876731 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -338,7 +338,11 @@ class Documenter:\n         elif self.options.inherited_members:\n             return (False, [(m.name, m.value) for m in members.values()])\n         else:\n-            return (False, [(m.name, m.value) for m in members.values() if m.directly_defined])\n+            filtered_members = []\n+            for m in members.values():\n+                if m.directly_defined or m.value is INSTANCEATTR:\n+                    filtered_members.append((m.name, m.value))\n+            return (False, filtered_members)\n     def filter_members(self, members: ObjectMembers, want_all: bool) -> List[Tuple[str, Any, bool]]:\n         def is_filtered_inherited_member(name: str, obj: Any) -> bool:\n             if inspect.isclass(self.object):"}
