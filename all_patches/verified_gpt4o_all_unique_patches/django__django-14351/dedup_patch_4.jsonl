{"model_name_or_path": "agentless", "instance_id": "django__django-14351", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 9591387..2c7745d 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -438,7 +438,7 @@ class Query(BaseExpression):\n         # those operations must be done in a subquery so that the query\n         # aggregates on the limit and/or distinct results instead of applying\n         # the distinct and limit after the aggregation.\n-        if (isinstance(self.group_by, tuple) or self.is_sliced or existing_annotations or\n+        if (isinstance(self.group_by, tuple) or self.is_sliced or self.distinct or self.combinator or existing_annotations or\n                 self.distinct or self.combinator):\n             from django.db.models.sql.subqueries import AggregateQuery\n             inner_query = self.clone()\n@@ -484,7 +484,10 @@ class Query(BaseExpression):\n                 # In case of Model.objects[0:3].count(), there would be no\n                 # field selected in the inner query, yet we must use a subquery.\n                 # So, make sure at least one field is selected.\n-                inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)\n+                if not inner_query.default_cols:\n+                    inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)\n+                else:\n+                    inner_query.select = ()\n         else:\n             outer_query = self\n             self.select = ()\n", "occurrence": 1}
