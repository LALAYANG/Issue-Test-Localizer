{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25311", "model_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex a038473..92f522f 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -67,11 +67,22 @@ class DraggableLegend(DraggableOffsetBox):\n             If \"bbox\", update the *bbox_to_anchor* parameter.\n         \"\"\"\n         self.legend = legend\n+        self._draggable_state = None\n \n         _api.check_in_list([\"loc\", \"bbox\"], update=update)\n         self._update = update\n \n         super().__init__(legend, legend._legend_box, use_blit=use_blit)\n+        self._draggable_state = (use_blit, update)\n+\n+    def __getstate__(self):\n+        state = self.__dict__.copy()\n+        state.pop('legend', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        self.__dict__.update(state)\n+        self.legend = None\n \n     def finalize_offset(self):\n         if self._update == \"loc\":\n@@ -1202,7 +1213,10 @@ class Legend(Artist):\n             if self._draggable is not None:\n                 self._draggable.disconnect()\n             self._draggable = None\n-        return self._draggable\n+        draggable = self._draggable\n+        if draggable is not None:\n+            draggable.legend = self\n+        return draggable\n \n     def get_draggable(self):\n         \"\"\"Return ``True`` if the legend is draggable, ``False`` otherwise.\"\"\"\n"}
