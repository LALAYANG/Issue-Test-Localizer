{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25311", "model_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 8070532..adef7de 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -19,14 +19,26 @@ from . import legend_handler\n class DraggableLegend(DraggableOffsetBox):\n     def __init__(self, legend, use_blit=False, update='loc'):\n         self.legend = legend\n+        self._manager = None\n         _api.check_in_list(['loc', 'bbox'], update=update)\n         self._update = update\n         super().__init__(legend, legend._legend_box, use_blit=use_blit)\n+        self._manager = self.legend.figure.canvas.manager if hasattr(self.legend.figure.canvas, 'manager') else None\n     def finalize_offset(self):\n         if self._update == 'loc':\n+            if hasattr(self.legend, '_draggable'):\n+                self.legend._draggable._manager = None\n             self._update_loc(self.get_loc_in_canvas())\n         elif self._update == 'bbox':\n             self._bbox_to_anchor(self.get_loc_in_canvas())\n+    def __getstate__(self):\n+        state = self.__dict__.copy()\n+        state['_manager'] = None\n+        return state\n+    def __setstate__(self, state):\n+        self.__dict__.update(state)\n+        if self._manager is not None:\n+            self.legend.figure.canvas.manager = self._manager\n     def _update_loc(self, loc_in_canvas):\n         bbox = self.legend.get_bbox_to_anchor()\n         if bbox.width == 0 or bbox.height == 0:"}
