{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13877", "model_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 3216a40..64ce26a 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -174,10 +174,14 @@ class MatrixDeterminant(MatrixCommon):\n         http://www.eecis.udel.edu/~saunders/papers/sffge/it5.ps.\n         \"\"\"\n \n-        # XXX included as a workaround for issue #12362.  Should use `_find_reasonable_pivot` instead\n-        def _find_pivot(l):\n-            for pos,val in enumerate(l):\n-                if val:\n+        def _find_reasonable_pivot(l):\n+            # find the first non-zero entry in the list l\n+            for pos, val in enumerate(l):\n+                if val.is_nonzero:\n+                    return (pos, val, None, None)\n+            # fallback: use any non-zero entry\n+            for pos, val in enumerate(l):\n+                if val != 0:\n                     return (pos, val, None, None)\n             return (None, None, None, None)\n \n@@ -208,7 +212,7 @@ class MatrixDeterminant(MatrixCommon):\n             def entry(i, j):\n                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm\n                 if not ret.is_Atom:\n-                    cancel(ret)\n+                    ret = cancel(ret)\n                 return ret\n \n             return sign*bareiss(self._new(mat.rows - 1, mat.cols - 1, entry), pivot_val)\n", "occurrence": 1}
