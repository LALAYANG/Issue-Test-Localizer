{"model_name_or_path": "agentless", "instance_id": "django__django-15278", "model_patch": "diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 7430999..941a53c 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -120,9 +120,23 @@ FORMAT_QMARK_REGEX = _lazy_re_compile('(?<!%)%s')\n class SQLiteCursorWrapper(Database.Cursor):\n     def execute(self, query, params=None):\n         if params is None:\n-            return Database.Cursor.execute(self, query)\n+            try:\n+                return Database.Cursor.execute(self, query)\n+            except Database.OperationalError as e:\n+                if 'Cannot add a UNIQUE column' in str(e):\n+                    model = self.connection.introspection.get_table_description(self.connection.cursor(), e.table)\n+                    self.connection.schema_editor()._remake_table(model)\n+                    return Database.Cursor.execute(self, query)\n+                raise\n         query = self.convert_query(query)\n-        return Database.Cursor.execute(self, query, params)\n+        try:\n+            return Database.Cursor.execute(self, query, params)\n+        except Database.OperationalError as e:\n+            if 'Cannot add a UNIQUE column' in str(e):\n+                model = self.connection.introspection.get_table_description(self.connection.cursor(), e.table)\n+                self.connection.schema_editor()._remake_table(model)\n+                return Database.Cursor.execute(self, query, params)\n+            raise\n     def executemany(self, query, param_list):\n         query = self.convert_query(query)\n         return Database.Cursor.executemany(self, query, param_list)"}
