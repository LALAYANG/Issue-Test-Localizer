{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12489", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 83aa418..ad28514 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -162,15 +162,16 @@ class Permutation(Basic):\n     _cycle_structure = None\n     _size = None\n     _rank = None\n+    @classmethod\n     def __new__(cls, *args, **kwargs):\n         size = kwargs.pop('size', None)\n         if size is not None:\n             size = int(size)\n         ok = True\n         if not args:\n-            return _af_new(list(range(size or 0)))\n+            return cls._af_new(list(range(size or 0)))\n         elif len(args) > 1:\n-            return _af_new(Cycle(*args).list(size))\n+            return cls._af_new(Cycle(*args).list(size))\n         if len(args) == 1:\n             a = args[0]\n             if isinstance(a, Perm):\n@@ -178,9 +179,9 @@ class Permutation(Basic):\n                     return a\n                 return Perm(a.array_form, size=size)\n             if isinstance(a, Cycle):\n-                return _af_new(a.list(size))\n+                return cls._af_new(a.list(size))\n             if not is_sequence(a):\n-                return _af_new(list(range(a + 1)))\n+                return cls._af_new(list(range(a + 1)))\n             if has_variety((is_sequence(ai) for ai in a)):\n                 ok = False\n         else:\n@@ -213,9 +214,9 @@ class Permutation(Basic):\n         obj._array_form = aform\n         obj._size = size\n         return obj\n-    @staticmethod\n-    def _af_new(perm):\n-        p = Basic.__new__(Perm, perm)\n+    @classmethod\n+    def _af_new(cls, perm):\n+        p = Basic.__new__(cls, perm)\n         p._array_form = perm\n         p._size = len(perm)\n         return p"}
