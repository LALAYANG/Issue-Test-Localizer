{"model_name_or_path": "agentless", "instance_id": "django__django-16901", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 0f80339..480ecc6 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -36,7 +36,20 @@ class Q(tree.Node):\n     def __and__(self, other):\n         return self._combine(other, self.AND)\n     def __xor__(self, other):\n-        return self._combine(other, self.XOR)\n+        if not isinstance(other, Q):\n+            raise TypeError(other)\n+        if not other:\n+            return self.copy()\n+        combined = Q(_connector=self.XOR)\n+        for q in (self, other):\n+            for child in q.flatten():\n+                if isinstance(child, Q):\n+                    combined.children.append(child)\n+                else:\n+                    combined.children.extend(child.children)\n+        if len(combined.children) > 2:\n+            combined = Q(_connector=self.OR, children=[Q(combined.children[i], _connector=self.AND, _negated=i % 2 == 1) for i in range(len(combined.children))])\n+        return combined\n     def __invert__(self):\n         obj = self.copy()\n         obj.negate()"}
