{"model_name_or_path": "agentless", "instance_id": "django__django-16901", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 0f80339..c1e7be5 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -27,10 +27,22 @@ class Q(tree.Node):\n             return other.copy()\n         if not other and isinstance(other, Q):\n             return self.copy()\n-        obj = self.create(connector=conn)\n-        obj.add(self, conn)\n-        obj.add(other, conn)\n-        return obj\n+        if conn == self.XOR:\n+            obj = self.create(connector=self.OR)\n+            obj.add(self, self.OR)\n+            obj.add(other, self.OR)\n+            return obj._combine_xor_conditions()\n+        else:\n+            obj = self.create(connector=conn)\n+            obj.add(self, conn)\n+            obj.add(other, conn)\n+            return obj\n+    def _combine_xor_conditions(self):\n+        true_conditions = [child for child in self.children if child]\n+        if len(true_conditions) % 2 == 1:\n+            return Q()\n+        else:\n+            return ~Q()\n     def __or__(self, other):\n         return self._combine(other, self.OR)\n     def __and__(self, other):"}
