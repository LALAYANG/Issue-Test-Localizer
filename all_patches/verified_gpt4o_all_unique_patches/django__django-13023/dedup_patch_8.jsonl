{"model_name_or_path": "agentless", "instance_id": "django__django-13023", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex d93730b..dbaacdb 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -747,11 +747,15 @@ class DecimalField(Field):\n     def to_python(self, value):\n         if value is None:\n             return value\n-        if isinstance(value, float):\n+        if isinstance(value, dict):\n+            raise exceptions.ValidationError(self.error_messages['invalid'], code='invalid', params={'value': value})\n+            return self.context.create_decimal_from_float(value)\n+        if isinstance(value, dict):\n+            raise exceptions.ValidationError(self.error_messages['invalid'], code='invalid', params={'value': value})\n             return self.context.create_decimal_from_float(value)\n         try:\n             return decimal.Decimal(value)\n-        except decimal.InvalidOperation:\n+        except (decimal.InvalidOperation, TypeError):\n             raise exceptions.ValidationError(self.error_messages['invalid'], code='invalid', params={'value': value})\n     def get_db_prep_save(self, value, connection):\n         return connection.ops.adapt_decimalfield_value(self.to_python(value), self.max_digits, self.decimal_places)"}
