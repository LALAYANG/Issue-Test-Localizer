{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22456", "model_patch": "diff --git a/sympy/codegen/ast.py b/sympy/codegen/ast.py\nindex 7a7d795..7caa99f 100644\n--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n@@ -229,6 +229,8 @@ class Token(CodegenAST):\n         for attrname in cls.__slots__[len(args):]:\n             if attrname in kwargs:\n                 argval = kwargs.pop(attrname)\n+            elif attrname == 'text' and len(args) == 1:\n+                argval = args[0]\n \n             elif attrname in cls.defaults:\n                 argval = cls.defaults[attrname]\n@@ -250,6 +252,8 @@ class Token(CodegenAST):\n \n         # Set attributes\n         for attr, arg in zip(cls.__slots__, attrvals):\n+            if attr == 'text':\n+                setattr(obj, attr, str(arg))  # Ensure text is always a string\n             setattr(obj, attr, arg)\n \n         return obj\n@@ -870,6 +874,7 @@ class For(Token):\n \n \n class String(Token):\n+    __slots__ = ('text',)\n     \"\"\" SymPy object representing a string.\n \n     Atomic object which is not an expression (as opposed to Symbol).\n"}
