{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9461", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 00b90de..554604f 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2128,6 +2128,9 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n         obj = self.parent.__dict__.get(self.object_name, self.object)\n         if inspect.isabstractmethod(obj):\n             self.add_line('   :abstractmethod:', sourcename)\n+        if inspect.isclassmethod(obj):\n+            self.add_line('   :classmethod:', sourcename)\n+            self.add_line('   :abstractmethod:', sourcename)\n         if inspect.iscoroutinefunction(obj):\n             self.add_line('   :async:', sourcename)\n         if inspect.isclassmethod(obj):\n@@ -2229,6 +2232,15 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n             return None\n \n     def get_doc(self, ignore: int = None) -> Optional[List[List[str]]]:\n+        if inspect.isproperty(self.object):\n+            docstring = getdoc(self.object.fget, self.get_attr,\n+                               self.config.autodoc_inherit_docstrings,\n+                               self.parent, self.object_name)\n+            if docstring:\n+                tab_width = self.directive.state.document.settings.tab_width\n+                return [prepare_docstring(docstring, tabsize=tab_width)]\n+            else:\n+                return []\n         if self.objpath[-1] == '__init__':\n             docstring = getdoc(self.object, self.get_attr,\n                                self.config.autodoc_inherit_docstrings,\n", "occurrence": 1}
