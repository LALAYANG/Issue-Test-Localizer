{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9461", "model_patch": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 9e39b23..43b1ea4 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -384,13 +384,21 @@ def iscoroutinefunction(obj: Any) -> bool:\n \n \n def isproperty(obj: Any) -> bool:\n-    \"\"\"Check if the object is property.\"\"\"\n+    \"\"\"Check if the object is property, including classmethod(property).\"\"\"\n     if sys.version_info >= (3, 8):\n         from functools import cached_property  # cached_property is available since py3.8\n         if isinstance(obj, cached_property):\n             return True\n \n-    return isinstance(obj, property)\n+    if isinstance(obj, property):\n+        return True\n+\n+    # Check if the object is classmethod(property)\n+    if isinstance(obj, classmethod):\n+        descriptor = getattr(obj, '__func__', obj)\n+        return isinstance(descriptor, property)\n+\n+    return False\n \n \n def isgenericalias(obj: Any) -> bool:\n@@ -862,4 +870,10 @@ def getdoc(obj: Any, attrgetter: Callable = safe_getattr,\n         if doc is None:\n             doc = inspect.getdoc(obj)\n \n+    # Check if the object is classmethod(property)\n+    if doc is None and isinstance(obj, classmethod):\n+        descriptor = getattr(obj, '__func__', obj)\n+        if isinstance(descriptor, property):\n+            doc = attrgetter(descriptor, '__doc__', None)\n+\n     return doc\n", "occurrence": 1}
