{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9461", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 00b90de..826ee78 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2126,7 +2126,7 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n \n         sourcename = self.get_sourcename()\n         obj = self.parent.__dict__.get(self.object_name, self.object)\n-        if inspect.isabstractmethod(obj):\n+        if inspect.isabstractmethod(obj) or (inspect.isclass(obj) and 'fget' in obj.__dict__):\n             self.add_line('   :abstractmethod:', sourcename)\n         if inspect.iscoroutinefunction(obj):\n             self.add_line('   :async:', sourcename)\n@@ -2661,7 +2661,8 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n                             ) -> bool:\n-        return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\n+        # Check if the member is a property or a classmethod property\n+        return inspect.isproperty(member) or (inspect.isclass(member) and 'fget' in member.__dict__)\n \n     def document_members(self, all_members: bool = False) -> None:\n         pass\n@@ -2676,9 +2677,11 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n         if inspect.isabstractmethod(self.object):\n             self.add_line('   :abstractmethod:', sourcename)\n \n-        if safe_getattr(self.object, 'fget', None) and self.config.autodoc_typehints != 'none':\n+        # Support for documenting classmethod property\n+        fget = getattr(self.object, 'fget', None) or getattr(self.object, '__func__', None)\n+        if fget and self.config.autodoc_typehints != 'none':\n             try:\n-                signature = inspect.signature(self.object.fget,\n+                signature = inspect.signature(fget,\n                                               type_aliases=self.config.autodoc_type_aliases)\n                 if signature.return_annotation is not Parameter.empty:\n                     objrepr = stringify_typehint(signature.return_annotation)\n"}
