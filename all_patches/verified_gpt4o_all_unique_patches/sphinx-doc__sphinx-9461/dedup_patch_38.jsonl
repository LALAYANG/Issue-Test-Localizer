{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9461", "model_patch": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 7ca87ab..f5214d0 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -229,6 +229,8 @@ def isproperty(obj: Any) -> bool:\n         from functools import cached_property\n         if isinstance(obj, cached_property):\n             return True\n+    if isinstance(obj, (classmethod, staticmethod)):\n+        obj = obj.__func__\n     return isinstance(obj, property)\n def isgenericalias(obj: Any) -> bool:\n     if hasattr(typing, '_GenericAlias') and isinstance(obj, typing._GenericAlias):\n@@ -498,6 +500,8 @@ def signature_from_ast(node: ast.FunctionDef, code: str='') -> inspect.Signature\n     return_annotation = ast_unparse(node.returns, code) or Parameter.empty\n     return inspect.Signature(params, return_annotation=return_annotation)\n def getdoc(obj: Any, attrgetter: Callable=safe_getattr, allow_inherited: bool=False, cls: Any=None, name: str=None) -> str:\n+    if isinstance(obj, (classmethod, staticmethod)):\n+        obj = obj.__func__\n     doc = attrgetter(obj, '__doc__', None)\n     if ispartial(obj) and doc == obj.__class__.__doc__:\n         return getdoc(obj.func)"}
