{"model_name_or_path": "agentless", "instance_id": "django__django-16819", "model_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex 06fbfa5..e1e00e0 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -12,24 +12,11 @@ class MigrationOptimizer:\n     def optimize_inner(self, operations, app_label):\n         new_operations = []\n         for i, operation in enumerate(operations):\n-            right = True\n-            for j, other in enumerate(operations[i + 1:]):\n-                result = operation.reduce(other, app_label)\n-                if isinstance(result, list):\n-                    in_between = operations[i + 1:i + j + 1]\n-                    if right:\n-                        new_operations.extend(in_between)\n-                        new_operations.extend(result)\n-                    elif all((op.reduce(other, app_label) is True for op in in_between)):\n-                        new_operations.extend(result)\n-                        new_operations.extend(in_between)\n-                    else:\n-                        new_operations.append(operation)\n-                        break\n-                    new_operations.extend(operations[i + j + 2:])\n-                    return new_operations\n-                elif not result:\n-                    right = False\n+            if isinstance(operation, AddIndex):\n+                for j, other in enumerate(operations[i + 1:]):\n+                    if isinstance(other, RemoveIndex) and operation.model_name == other.model_name and (operation.index.name == other.name):\n+                        new_operations.extend(operations[i + j + 2:])\n+                        return new_operations\n             else:\n                 new_operations.append(operation)\n         return new_operations\n\\ No newline at end of file"}
