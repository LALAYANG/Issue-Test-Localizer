{"model_name_or_path": "agentless", "instance_id": "django__django-16819", "model_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex a9ec258..e9cb66b 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -41,29 +41,43 @@ class MigrationOptimizer:\n         \"\"\"Inner optimization loop.\"\"\"\n         new_operations = []\n         for i, operation in enumerate(operations):\n-            right = True  # Should we reduce on the right or on the left.\n-            # Compare it to each operation after it\n-            for j, other in enumerate(operations[i + 1 :]):\n-                result = operation.reduce(other, app_label)\n-                if isinstance(result, list):\n-                    in_between = operations[i + 1 : i + j + 1]\n-                    if right:\n-                        new_operations.extend(in_between)\n-                        new_operations.extend(result)\n-                    elif all(op.reduce(other, app_label) is True for op in in_between):\n-                        # Perform a left reduction if all of the in-between\n-                        # operations can optimize through other.\n-                        new_operations.extend(result)\n-                        new_operations.extend(in_between)\n-                    else:\n-                        # Otherwise keep trying.\n-                        new_operations.append(operation)\n-                        break\n-                    new_operations.extend(operations[i + j + 2 :])\n-                    return new_operations\n-                elif not result:\n-                    # Can't perform a right reduction.\n-                    right = False\n+            # Handle AddIndex/RemoveIndex optimization\n+            if isinstance(operation, AddIndex):\n+                for j, other in enumerate(operations[i + 1 :]):\n+                    if isinstance(other, RemoveIndex) and operation.model_name_lower == other.model_name_lower and operation.index.name == other.name:\n+                        # Skip both operations as they cancel each other out\n+                        new_operations.extend(operations[i + j + 2 :])\n+                        return new_operations\n+            elif isinstance(operation, RemoveIndex):\n+                for j, other in enumerate(operations[i + 1 :]):\n+                    if isinstance(other, AddIndex) and operation.model_name_lower == other.model_name_lower and operation.name == other.index.name:\n+                        # Skip both operations as they cancel each other out\n+                        new_operations.extend(operations[i + j + 2 :])\n+                        return new_operations\n             else:\n-                new_operations.append(operation)\n-        return new_operations\n+                right = True  # Should we reduce on the right or on the left.\n+                # Compare it to each operation after it\n+                for j, other in enumerate(operations[i + 1 :]):\n+                    result = operation.reduce(other, app_label)\n+                    if isinstance(result, list):\n+                        in_between = operations[i + 1 : i + j + 1]\n+                        if right:\n+                            new_operations.extend(in_between)\n+                            new_operations.extend(result)\n+                        elif all(op.reduce(other, app_label) is True for op in in_between):\n+                            # Perform a left reduction if all of the in-between\n+                            # operations can optimize through other.\n+                            new_operations.extend(result)\n+                            new_operations.extend(in_between)\n+                        else:\n+                            # Otherwise keep trying.\n+                            new_operations.append(operation)\n+                            break\n+                        new_operations.extend(operations[i + j + 2 :])\n+                        return new_operations\n+                    elif not result:\n+                        # Can't perform a right reduction.\n+                        right = False\n+                else:\n+                    new_operations.append(operation)\n+        return new_operations\n"}
