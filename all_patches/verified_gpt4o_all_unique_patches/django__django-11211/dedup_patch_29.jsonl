{"model_name_or_path": "agentless", "instance_id": "django__django-11211", "model_patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex 8e99ea7..d1c1a20 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -79,6 +79,7 @@ class GenericForeignKey(FieldCacheMixin):\n     def get_prefetch_queryset(self, instances, queryset=None):\n         if queryset is not None:\n             raise ValueError(\"Custom queryset can't be used for this lookup.\")\n+        from uuid import UUID\n         fk_dict = defaultdict(set)\n         instance_dict = {}\n         ct_attname = self.model._meta.get_field(self.ct_field).get_attname()\n@@ -87,13 +88,17 @@ class GenericForeignKey(FieldCacheMixin):\n             if ct_id is not None:\n                 fk_val = getattr(instance, self.fk_field)\n                 if fk_val is not None:\n+                    try:\n+                        fk_val = UUID(fk_val)\n+                    except ValueError:\n+                        pass\n                     fk_dict[ct_id].add(fk_val)\n                     instance_dict[ct_id] = instance\n         ret_val = []\n         for ct_id, fkeys in fk_dict.items():\n             instance = instance_dict[ct_id]\n             ct = self.get_content_type(id=ct_id, using=instance._state.db)\n-            ret_val.extend(ct.get_all_objects_for_this_type(pk__in=fkeys))\n+            ret_val.extend(ct.get_all_objects_for_this_type(pk__in=list(fkeys)))\n         def gfk_key(obj):\n             ct_id = getattr(obj, ct_attname)\n             if ct_id is None:"}
