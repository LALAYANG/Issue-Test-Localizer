{"model_name_or_path": "agentless", "instance_id": "django__django-11532", "model_patch": "diff --git a/django/core/mail/message.py b/django/core/mail/message.py\nindex bf67640..baa334e 100644\n--- a/django/core/mail/message.py\n+++ b/django/core/mail/message.py\n@@ -33,6 +33,13 @@ def forbid_multi_line_headers(name, val, encoding):\n     except UnicodeEncodeError:\n         if name.lower() in ADDRESS_HEADERS:\n             val = ', '.join((sanitize_address(addr, encoding) for addr in getaddresses((val,))))\n+        elif name.lower() == 'message-id':\n+            try:\n+                val.encode('ascii')\n+            except UnicodeEncodeError:\n+                local_part, domain_part = val.split('@')\n+                domain_part = domain_part.encode('idna').decode('ascii')\n+                val = f'{local_part}@{domain_part}'\n         else:\n             val = Header(val, encoding).encode()\n     else:\n@@ -160,7 +167,12 @@ class EmailMessage:\n         if 'date' not in header_names:\n             msg['Date'] = formatdate(localtime=settings.EMAIL_USE_LOCALTIME)\n         if 'message-id' not in header_names:\n-            msg['Message-ID'] = make_msgid(domain=DNS_NAME)\n+            domain = str(DNS_NAME)\n+            try:\n+                domain.encode('ascii')\n+            except UnicodeEncodeError:\n+                domain = domain.encode('idna').decode('ascii')\n+            msg['Message-ID'] = make_msgid(domain=domain)\n         for name, value in self.extra_headers.items():\n             if name.lower() != 'from':\n                 msg[name] = value"}
