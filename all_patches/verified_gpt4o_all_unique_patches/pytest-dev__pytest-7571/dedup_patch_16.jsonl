{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7571", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 16efd55..67353f9 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -436,6 +436,12 @@ class LogCaptureFixture:\n         logger_obj.setLevel(level)\n         self.handler.setLevel(level)\n \n+    def teardown(self):\n+        \"\"\"Restore log levels to their initial values after the test.\"\"\"\n+        for logger_name, level in self._initial_logger_levels.items():\n+            logging.getLogger(logger_name).setLevel(level)\n+        self._initial_logger_levels.clear()\n+\n     @contextmanager\n     def at_level(\n         self, level: int, logger: Optional[str] = None\n@@ -459,6 +465,14 @@ class LogCaptureFixture:\n \n \n @pytest.fixture\n+def caplog(request: FixtureRequest) -> Generator[LogCaptureFixture, None, None]:\n+    \"\"\"Access and control log capturing.\"\"\"\n+\n+    caplog_fixture = LogCaptureFixture()\n+\n+    yield caplog_fixture\n+\n+    caplog_fixture.teardown()\n def caplog(request: FixtureRequest) -> Generator[LogCaptureFixture, None, None]:\n     \"\"\"Access and control log capturing.\n \n", "occurrence": 1}
