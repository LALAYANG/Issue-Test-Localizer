{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7571", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 16efd55..401550b 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -346,13 +346,15 @@ class LogCaptureFixture:\n         self._item = item\n         # dict of log name -> log level\n         self._initial_logger_levels = {}  # type: Dict[Optional[str], int]\n+        self._initial_handler_level = self.handler.level\n \n     def _finalize(self) -> None:\n         \"\"\"Finalizes the fixture.\n \n         This restores the log levels changed by :meth:`set_level`.\n         \"\"\"\n-        # restore log levels\n+        # restore handler level\n+        self.handler.setLevel(self._initial_handler_level)\n         for logger_name, level in self._initial_logger_levels.items():\n             logger = logging.getLogger(logger_name)\n             logger.setLevel(level)\n@@ -419,7 +421,11 @@ class LogCaptureFixture:\n         \"\"\"Reset the list of log records and the captured log text.\"\"\"\n         self.handler.reset()\n \n-    def set_level(self, level: Union[int, str], logger: Optional[str] = None) -> None:\n+        # restore handler level\n+        self.handler.setLevel(self._initial_handler_level)\n+        for logger_name, level in self._initial_logger_levels.items():\n+            logger = logging.getLogger(logger_name)\n+            logger.setLevel(level)\n         \"\"\"Sets the level for capturing of logs. The level will be restored to its previous value at the end of\n         the test.\n \n"}
