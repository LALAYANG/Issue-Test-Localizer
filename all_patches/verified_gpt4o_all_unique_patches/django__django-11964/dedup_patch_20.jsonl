{"model_name_or_path": "agentless", "instance_id": "django__django-11964", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 6957452..925e5c8 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1010,7 +1010,10 @@ class CharField(Field):\n     def to_python(self, value):\n         if isinstance(value, str) or value is None:\n             return value\n-        return str(value)\n+        if isinstance(value, enum.Enum):\n+            return value.value\n+        else:\n+            return str(value)\n \n     def get_prep_value(self, value):\n         value = super().get_prep_value(value)\n@@ -1757,7 +1760,10 @@ class IntegerField(Field):\n         if value is None:\n             return None\n         try:\n-            return int(value)\n+            if isinstance(value, enum.Enum):\n+                return value.value\n+            else:\n+                return int(value)\n         except (TypeError, ValueError) as e:\n             raise e.__class__(\n                 \"Field '%s' expected a number but got %r.\" % (self.name, value),\n@@ -1770,7 +1776,10 @@ class IntegerField(Field):\n         if value is None:\n             return value\n         try:\n-            return int(value)\n+            if isinstance(value, enum.Enum):\n+                return value.value\n+            else:\n+                return int(value)\n         except (TypeError, ValueError):\n             raise exceptions.ValidationError(\n                 self.error_messages['invalid'],\n"}
