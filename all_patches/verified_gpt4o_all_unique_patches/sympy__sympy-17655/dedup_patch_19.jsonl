{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17655", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex a708f18..7e7d52d 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -213,10 +213,20 @@ class Point(GeometryEntity):\n         sympy.geometry.point.Point.translate\n \n         \"\"\"\n-        try:\n-            s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n-        except TypeError:\n-            raise GeometryError(\"Don't know how to add {} and a Point object\".format(other))\n+        if isinstance(other, Point):\n+            s, o = Point._normalize_dimension(self, other)\n+        else:\n+            try:\n+                other = sympify(other)\n+                if isinstance(other, Mul) and any(isinstance(arg, Point) for arg in other.args):\n+                    new_args = [arg for arg in other.args if not isinstance(arg, Point)]\n+                    scalar = Mul(*new_args)\n+                    other_point = [arg for arg in other.args if isinstance(arg, Point)][0]\n+                    s, o = Point._normalize_dimension(self, Point([scalar * coord for coord in other_point.args], evaluate=False))\n+                else:\n+                    s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n+            except TypeError:\n+                raise GeometryError(\"Don't know how to add {} and a Point object\".format(other))\n \n         coords = [simplify(a + b) for a, b in zip(s, o)]\n         return Point(coords, evaluate=False)\n", "occurrence": 1}
