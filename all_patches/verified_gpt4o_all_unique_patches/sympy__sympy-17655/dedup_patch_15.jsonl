{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17655", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex e45d95f..425cd7b 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -62,12 +62,18 @@ class Point(GeometryEntity):\n         origin = Point([0] * len(self))\n         return Point.distance(origin, self)\n     def __add__(self, other):\n-        try:\n-            s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n-        except TypeError:\n-            raise GeometryError(\"Don't know how to add {} and a Point object\".format(other))\n-        coords = [simplify(a + b) for a, b in zip(s, o)]\n-        return Point(coords, evaluate=False)\n+        if isinstance(other, (int, float, sympy.core.numbers.Number, sympy.core.symbol.Symbol)):\n+            other = Point([other * coord for coord in self.args], evaluate=False)\n+            s, o = Point._normalize_dimension(self, other)\n+            coords = [simplify(a + b) for a, b in zip(s, o)]\n+            return Point(coords, evaluate=False)\n+        else:\n+            try:\n+                s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n+            except TypeError:\n+                raise GeometryError(\"Don't know how to add {} and a Point object\".format(other))\n+            coords = [simplify(a + b) for a, b in zip(s, o)]\n+            return Point(coords, evaluate=False)\n     def __contains__(self, item):\n         return item in self.args\n     def __div__(self, divisor):"}
