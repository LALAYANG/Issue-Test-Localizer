{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8459", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 6f90bd7..45b9ffa 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -38,6 +38,11 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n \n \n def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element) -> None:\n+    def apply_type_aliases(annotation: str) -> str:\n+        # Apply type aliases from the configuration\n+        for alias, real_type in app.config.autodoc_type_aliases.items():\n+            annotation = annotation.replace(real_type, alias)\n+        return annotation\n     if domain != 'py':\n         return\n     if app.config.autodoc_typehints != 'description':\n@@ -111,7 +116,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         if not arg.get('type'):\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotation))\n+            field += nodes.field_body('', nodes.paragraph('', apply_type_aliases(annotation)))\n             node += field\n         if not arg.get('param'):\n             field = nodes.field()\n@@ -122,7 +127,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n     if 'return' in annotations and 'return' not in arguments:\n         field = nodes.field()\n         field += nodes.field_name('', 'rtype')\n-        field += nodes.field_body('', nodes.paragraph('', annotation))\n+        field += nodes.field_body('', nodes.paragraph('', apply_type_aliases(annotation)))\n         node += field\n \n \n"}
