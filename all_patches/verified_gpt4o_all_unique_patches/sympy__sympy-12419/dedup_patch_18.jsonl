{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12419", "model_patch": "diff --git a/sympy/matrices/expressions/matmul.py b/sympy/matrices/expressions/matmul.py\nindex 5b270b9..5d0d883 100644\n--- a/sympy/matrices/expressions/matmul.py\n+++ b/sympy/matrices/expressions/matmul.py\n@@ -26,10 +26,10 @@ class MatMul(MatrixExpr):\n     def _entry(self, i, j, expand=True):\n         coeff, matrices = self.as_coeff_matrices()\n         if len(matrices) == 1:\n-            return coeff * matrices[0][i, j]\n+            return coeff * matrices[0]._entry(i, j, expand)\n         head, tail = (matrices[0], matrices[1:])\n         if len(tail) == 0:\n-            raise ValueError('lenth of tail cannot be 0')\n+            raise ValueError('length of tail cannot be 0')\n         X = head\n         Y = MatMul(*tail)\n         from sympy.core.symbol import Dummy\n@@ -37,8 +37,8 @@ class MatMul(MatrixExpr):\n         from sympy.matrices import ImmutableMatrix\n         k = Dummy('k', integer=True)\n         if X.has(ImmutableMatrix) or Y.has(ImmutableMatrix):\n-            return coeff * Add(*[X[i, k] * Y[k, j] for k in range(X.cols)])\n-        result = Sum(coeff * X[i, k] * Y[k, j], (k, 0, X.cols - 1))\n+            return coeff * Add(*[X._entry(i, k, expand) * Y._entry(k, j, expand) for k in range(X.cols)])\n+        result = Sum(coeff * X._entry(i, k, expand) * Y._entry(k, j, expand), (k, 0, X.cols - 1))\n         if not X.cols.is_number:\n             expand = False\n         return result.doit() if expand else result"}
