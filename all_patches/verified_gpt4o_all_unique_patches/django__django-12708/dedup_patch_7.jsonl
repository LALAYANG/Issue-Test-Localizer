{"model_name_or_path": "agentless", "instance_id": "django__django-12708", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex d7d8448..2990356 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -407,12 +407,31 @@ class BaseDatabaseSchemaEditor:\n             model, columns, exclude=meta_constraint_names | meta_index_names,\n             **constraint_kwargs\n         )\n-        if len(constraint_names) != 1:\n+        if len(constraint_names) > 2:  # There should be at most one unique and one index constraint\n             raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n                 len(constraint_names),\n                 model._meta.db_table,\n                 \", \".join(columns),\n             ))\n+        elif len(constraint_names) == 2:\n+            # Separate the unique constraint and index constraint\n+            unique_constraint = None\n+            index_constraint = None\n+            for name in constraint_names:\n+                if '_uniq' in name:\n+                    unique_constraint = name\n+                elif '_idx' in name:\n+                    index_constraint = name\n+            if not unique_constraint or not index_constraint:\n+                raise ValueError(\"Found unexpected constraints structure for %s(%s)\" % (\n+                    model._meta.db_table,\n+                    \", \".join(columns),\n+                ))\n+            # Determine which constraint to remove based on the constraint_kwargs\n+            if constraint_kwargs.get('unique'):\n+                constraint_names = [unique_constraint]\n+            elif constraint_kwargs.get('index'):\n+                constraint_names = [index_constraint]\n         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n \n     def alter_db_table(self, model, old_db_table, new_db_table):\n", "occurrence": 1}
