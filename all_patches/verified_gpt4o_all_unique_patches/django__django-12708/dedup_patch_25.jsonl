{"model_name_or_path": "agentless", "instance_id": "django__django-12708", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex d7d8448..a51300f 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -400,14 +400,26 @@ class BaseDatabaseSchemaEditor:\n             self.execute(self._create_index_sql(model, fields, suffix=\"_idx\"))\n \n     def _delete_composed_index(self, model, fields, constraint_kwargs, sql):\n-        meta_constraint_names = {constraint.name for constraint in model._meta.constraints}\n-        meta_index_names = {constraint.name for constraint in model._meta.indexes}\n+        meta_constraint_names = {constraint.name for constraint in model._meta.constraints if isinstance(constraint, UniqueConstraint)}\n+        meta_index_names = {index.name for index in model._meta.indexes}\n         columns = [model._meta.get_field(field).column for field in fields]\n         constraint_names = self._constraint_names(\n             model, columns, exclude=meta_constraint_names | meta_index_names,\n             **constraint_kwargs\n         )\n-        if len(constraint_names) != 1:\n+        if len(constraint_names) == 0:\n+            raise ValueError(\"No constraint found for %s(%s)\" % (\n+                model._meta.db_table,\n+                \", \".join(columns),\n+            ))\n+        elif len(constraint_names) > 1:\n+            constraint_names = [name for name in constraint_names if name.endswith('_idx')]\n+            if len(constraint_names) != 1:\n+                raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n+                    len(constraint_names),\n+                    model._meta.db_table,\n+                    \", \".join(columns),\n+                ))\n             raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n                 len(constraint_names),\n                 model._meta.db_table,\n"}
