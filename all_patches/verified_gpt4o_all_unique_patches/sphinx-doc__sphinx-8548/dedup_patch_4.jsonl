{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8548", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 60d49fe..3fa901d 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -646,10 +646,15 @@ class Documenter:\n                                    (name, self.fullname), type='autodoc')\n             return False, selected\n         elif self.options.inherited_members:\n-            return False, [(m.name, m.value) for m in members.values()]\n+            inherited_members = []\n+            for cls in self.object.__mro__[1:]:  # Skip the first class (self.object)\n+                inherited_members.extend(\n+                    (m.name, m.value) for m in get_class_members(cls, [], self.get_attr).values()\n+                )\n+            return False, [(m.name, m.value) for m in members.values()] + inherited_members\n         else:\n             return False, [(m.name, m.value) for m in members.values()\n-                           if m.directly_defined]\n+                           if m.directly_defined or self.options.inherited_members]\n \n     def filter_members(self, members: ObjectMembers, want_all: bool\n                        ) -> List[Tuple[str, Any, bool]]:\n", "occurrence": 1}
