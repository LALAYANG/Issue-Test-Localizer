{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8548", "model_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex 6a4748c..c99df3a 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -252,7 +252,7 @@ class ClassAttribute:\n \n \n def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n-                      analyzer: ModuleAnalyzer = None) -> Dict[str, ClassAttribute]:\n+                      analyzer: ModuleAnalyzer = None, base_class_check: bool = True) -> Dict[str, ClassAttribute]:\n     \"\"\"Get members and attributes of target class.\"\"\"\n     from sphinx.ext.autodoc import INSTANCEATTR\n \n@@ -307,13 +307,14 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n         except AttributeError:\n             pass\n \n-    if analyzer:\n-        # append instance attributes (cf. self.attr1) if analyzer knows\n-        namespace = '.'.join(objpath)\n-        for (ns, name), docstring in analyzer.attr_docs.items():\n-            if namespace == ns and name not in members:\n-                members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n-                                               '\\n'.join(docstring))\n+    if analyzer or base_class_check:\n+        # Check current class and base classes for instance attributes\n+        namespaces = ['.'.join(cls.__module__.split('.') + [cls.__name__]) for cls in getmro(subject)]\n+        for namespace in namespaces:\n+            for (ns, name), docstring in analyzer.attr_docs.items():\n+                if namespace == ns and name not in members:\n+                    members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n+                                                   '\\n'.join(docstring))\n \n     return members\n \n"}
