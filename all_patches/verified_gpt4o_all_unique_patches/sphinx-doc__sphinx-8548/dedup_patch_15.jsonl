{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8548", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 60d49fe..a3ee5c9 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -645,7 +645,7 @@ class Documenter:\n                     logger.warning(__('missing attribute %s in object %s') %\n                                    (name, self.fullname), type='autodoc')\n             return False, selected\n-        elif self.options.inherited_members:\n+        elif self.options.inherited_members and not isinstance(self, ClassDocumenter):\n             return False, [(m.name, m.value) for m in members.values()]\n         else:\n             return False, [(m.name, m.value) for m in members.values()\n@@ -682,7 +682,11 @@ class Documenter:\n         ret = []\n \n         # search for members in source code too\n-        namespace = '.'.join(self.objpath)  # will be empty for modules\n+        namespaces = ['.'.join(self.objpath)]  # will be empty for modules\n+        if inspect.isclass(self.object):\n+            for base in self.object.__mro__[1:]:\n+                base_ns = base.__module__ + '.' + base.__qualname__\n+                namespaces.append(base_ns)\n \n         if self.analyzer:\n             attr_docs = self.analyzer.find_attr_docs()\n@@ -746,7 +750,7 @@ class Documenter:\n                         keep = has_doc or self.options.undoc_members\n                 else:\n                     keep = False\n-            elif (namespace, membername) in attr_docs:\n+            elif any((ns, membername) in attr_docs for ns in namespaces):\n                 if want_all and isprivate:\n                     if self.options.private_members is None:\n                         keep = False\n", "occurrence": 1}
