{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-10356", "model_patch": "diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py\nindex d345d83..5d9b0d6 100644\n--- a/src/_pytest/mark/structures.py\n+++ b/src/_pytest/mark/structures.py\n@@ -386,9 +386,11 @@ def store_mark(obj, mark: Mark) -> None:\n     This is used to implement the Mark declarations/decorators correctly.\n     \"\"\"\n     assert isinstance(mark, Mark), mark\n-    # Always reassign name to avoid updating pytestmark in a reference that\n-    # was only borrowed.\n-    obj.pytestmark = [*get_unpacked_marks(obj), mark]\n+    # Combine markers from all base classes considering the MRO, avoiding duplications.\n+    existing_marks = set(get_unpacked_marks(obj))\n+    new_marks = set(normalize_mark_list([mark]))\n+    combined_marks = list(existing_marks.union(new_marks))\n+    obj.pytestmark = combined_marks\n \n \n # Typing for builtin pytest marks. This is cheating; it gives builtin marks\n"}
