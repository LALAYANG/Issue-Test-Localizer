{"model_name_or_path": "agentless", "instance_id": "django__django-11734", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex d6b917d..ea88354 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -315,8 +315,9 @@ class F(Combinable):\n         return hash(self.name)\n class ResolvedOuterRef(F):\n     contains_aggregate = False\n-    def as_sql(self, *args, **kwargs):\n-        raise ValueError('This queryset contains a reference to an outer query and may only be used in a subquery.')\n+    def as_sql(self, compiler, connection):\n+        sql, params = compiler.compile(self.target)\n+        return (sql, params)\n     def relabeled_clone(self, relabels):\n         return self\n class OuterRef(F):\n@@ -665,6 +666,9 @@ class Exists(Subquery):\n         clone.negated = not self.negated\n         return clone\n     def as_sql(self, compiler, connection, template=None, **extra_context):\n+        outer_query = extra_context.get('outer_query', None)\n+        if outer_query:\n+            self.queryset.query.external_aliases.update(outer_query.alias_map)\n         sql, params = super().as_sql(compiler, connection, template, **extra_context)\n         if self.negated:\n             sql = 'NOT {}'.format(sql)"}
