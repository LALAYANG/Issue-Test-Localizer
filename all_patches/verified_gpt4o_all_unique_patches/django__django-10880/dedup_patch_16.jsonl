{"model_name_or_path": "agentless", "instance_id": "django__django-10880", "model_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex f40a983..9a5ee35 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -76,14 +76,27 @@ class Count(Aggregate):\n     name = 'Count'\n     output_field = IntegerField()\n     allow_distinct = True\n-    def __init__(self, expression, filter=None, **extra):\n+    def __init__(self, expression, filter=None, distinct=False, **extra):\n         if expression == '*':\n             expression = Star()\n         if isinstance(expression, Star) and filter is not None:\n             raise ValueError('Star cannot be used with filter. Please specify a field.')\n-        super().__init__(expression, filter=filter, **extra)\n+        super().__init__(expression, filter=filter, distinct=distinct, **extra)\n+        self.distinct = distinct\n     def convert_value(self, value, expression, connection):\n         return 0 if value is None else value\n+    def as_sql(self, compiler, connection):\n+        if self.distinct:\n+            self.function = 'COUNT(DISTINCT'\n+            template = '%(function)s %(field)s%(case)s)'\n+        else:\n+            template = '%(function)s(%(field)s%(case)s)'\n+        sql, params = super().as_sql(compiler, connection)\n+        case_sql = ''\n+        if isinstance(self.source_expressions[0], Case):\n+            case_sql, case_params = compiler.compile(self.source_expressions[0])\n+            params = case_params + params[1:]\n+        return (template % {'function': self.function, 'field': sql, 'case': case_sql}, params)\n class Max(Aggregate):\n     function = 'MAX'\n     name = 'Max'"}
