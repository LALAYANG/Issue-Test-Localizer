{"model_name_or_path": "agentless", "instance_id": "django__django-13212", "model_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex 7587523..9d83ca0 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -36,7 +36,7 @@ class RegexValidator:\n         regex_matches = self.regex.search(str(value))\n         invalid_input = regex_matches if self.inverse_match else not regex_matches\n         if invalid_input:\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message % {'value': value}, code=self.code)\n     def __eq__(self, other):\n         return isinstance(other, RegexValidator) and self.regex.pattern == other.regex.pattern and (self.regex.flags == other.regex.flags) and (self.message == other.message) and (self.code == other.code) and (self.inverse_match == other.inverse_match)\n @deconstructible\n@@ -57,10 +57,10 @@ class URLValidator(RegexValidator):\n             self.schemes = schemes\n     def __call__(self, value):\n         if not isinstance(value, str):\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message % {'value': value}, code=self.code)\n         scheme = value.split('://')[0].lower()\n         if scheme not in self.schemes:\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message % {'value': value}, code=self.code)\n         try:\n             super().__call__(value)\n         except ValidationError as e:\n@@ -68,7 +68,7 @@ class URLValidator(RegexValidator):\n                 try:\n                     scheme, netloc, path, query, fragment = urlsplit(value)\n                 except ValueError:\n-                    raise ValidationError(self.message, code=self.code)\n+                    raise ValidationError(self.message % {'value': value}, code=self.code)\n                 try:\n                     netloc = punycode(netloc)\n                 except UnicodeError:\n@@ -84,9 +84,9 @@ class URLValidator(RegexValidator):\n                 try:\n                     validate_ipv6_address(potential_ip)\n                 except ValidationError:\n-                    raise ValidationError(self.message, code=self.code)\n+                    raise ValidationError(self.message % {'value': value}, code=self.code)\n         if len(urlsplit(value).netloc) > 253:\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message % {'value': value}, code=self.code)\n integer_validator = RegexValidator(_lazy_re_compile('^-?\\\\d+\\\\Z'), message=_('Enter a valid integer.'), code='invalid')\n def validate_integer(value):\n     return integer_validator(value)\n@@ -118,10 +118,10 @@ class EmailValidator:\n             self.domain_allowlist = allowlist\n     def __call__(self, value):\n         if not value or '@' not in value:\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message % {'value': value}, code=self.code)\n         user_part, domain_part = value.rsplit('@', 1)\n         if not self.user_regex.match(user_part):\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message % {'value': value}, code=self.code)\n         if domain_part not in self.domain_allowlist and (not self.validate_domain_part(domain_part)):\n             try:\n                 domain_part = punycode(domain_part)\n@@ -130,7 +130,7 @@ class EmailValidator:\n             else:\n                 if self.validate_domain_part(domain_part):\n                     return\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message % {'value': value}, code=self.code)\n     def validate_domain_part(self, domain_part):\n         if self.domain_regex.match(domain_part):\n             return True"}
