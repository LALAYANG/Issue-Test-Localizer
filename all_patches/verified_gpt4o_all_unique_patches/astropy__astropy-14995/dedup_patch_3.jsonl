{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-14995", "model_patch": "--- a/astropy/nddata/nddata_withmixins.py\n+++ b/astropy/nddata/nddata_withmixins.py\n-    pass\n+    def _arithmetic_mask_handling(self, other_mask, handle_mask):\n+        if handle_mask is None:\n+            return None\n+        if self.mask is None and other_mask is None:\n+            return None\n+        elif self.mask is None:\n+            return other_mask\n+        elif other_mask is None:\n+            return self.mask\n+        return handle_mask(self.mask, other_mask)\n+    def multiply(self, operand, handle_mask=np.bitwise_or):\n+        result = super().multiply(operand)\n+        result_mask = self._arithmetic_mask_handling(getattr(operand, 'mask', None), handle_mask)\n+        result.mask = result_mask\n+        return result\n+    def add(self, operand, handle_mask=np.bitwise_or):\n+        result = super().add(operand)\n+        result_mask = self._arithmetic_mask_handling(getattr(operand, 'mask', None), handle_mask)\n+        result.mask = result_mask\n+        return result\n+    def subtract(self, operand, handle_mask=np.bitwise_or):\n+        result = super().subtract(operand)\n+        result_mask = self._arithmetic_mask_handling(getattr(operand, 'mask', None), handle_mask)\n+        result.mask = result_mask\n+        return result\n+    def divide(self, operand, handle_mask=np.bitwise_or):\n+        result = super().divide(operand)\n+        result_mask = self._arithmetic_mask_handling(getattr(operand, 'mask', None), handle_mask)\n+        result.mask = result_mask\n+        return result"}
