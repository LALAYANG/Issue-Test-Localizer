{"model_name_or_path": "agentless", "instance_id": "django__django-14725", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 2db5c72..e8d3069 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -573,7 +573,8 @@ class BaseModelFormSet(BaseFormSet):\n     unique_fields = set()\n \n     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n-                 queryset=None, *, initial=None, **kwargs):\n+                 queryset=None, *, initial=None, allow_new_objects=True, **kwargs):\n+        self.allow_new_objects = allow_new_objects\n         self.queryset = queryset\n         self.initial_extra = initial\n         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n@@ -621,7 +622,7 @@ class BaseModelFormSet(BaseFormSet):\n                         kwargs['instance'] = self._existing_object(pk)\n             else:\n                 kwargs['instance'] = self.get_queryset()[i]\n-        elif self.initial_extra:\n+        elif self.initial_extra and self.allow_new_objects:\n             # Set initial values for extra forms\n             try:\n                 kwargs['initial'] = self.initial_extra[i - self.initial_form_count()]\n@@ -813,7 +814,7 @@ class BaseModelFormSet(BaseFormSet):\n \n     def save_new_objects(self, commit=True):\n         self.new_objects = []\n-        for form in self.extra_forms:\n+        for form in self.extra_forms if self.allow_new_objects else []:\n             if not form.has_changed():\n                 continue\n             # If someone has marked an add form for deletion, don't save the\n@@ -874,7 +875,7 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                          can_order=False, max_num=None, fields=None, exclude=None,\n                          widgets=None, validate_max=False, localized_fields=None,\n                          labels=None, help_texts=None, error_messages=None,\n-                         min_num=None, validate_min=False, field_classes=None,\n+                         min_num=None, validate_min=False, field_classes=None, allow_new_objects=True,\n                          absolute_max=None, can_delete_extra=True, renderer=None):\n     \"\"\"Return a FormSet class for the given Django model class.\"\"\"\n     meta = getattr(form, 'Meta', None)\n@@ -893,7 +894,7 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n     FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,\n                               can_order=can_order, can_delete=can_delete,\n                               validate_min=validate_min, validate_max=validate_max,\n-                              absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n+                              absolute_max=absolute_max, can_delete_extra=can_delete_extra, allow_new_objects=allow_new_objects,\n                               renderer=renderer)\n     FormSet.model = model\n     return FormSet\n", "occurrence": 1}
