{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19954", "model_patch": "diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py\nindex eb05c35..ef9aa98 100644\n--- a/sympy/combinatorics/perm_groups.py\n+++ b/sympy/combinatorics/perm_groups.py\n@@ -2195,17 +2195,26 @@ class PermutationGroup(Basic):\n                 # respect to the already discovere ones\n                 minimal = True\n                 to_remove = []\n+                new_num_blocks = []\n+                new_blocks = []\n+                new_rep_blocks = []\n                 for i, r in enumerate(rep_blocks):\n                     if len(r) > len(rep) and rep.issubset(r):\n                         # i-th block system is not minimal\n-                        del num_blocks[i], blocks[i]\n-                        to_remove.append(rep_blocks[i])\n+                        to_remove.append(i)\n                     elif len(r) < len(rep) and r.issubset(rep):\n                         # the system being checked is not minimal\n                         minimal = False\n                         break\n                 # remove non-minimal representative blocks\n-                rep_blocks = [r for r in rep_blocks if r not in to_remove]\n+                for i in range(len(rep_blocks)):\n+                    if i not in to_remove:\n+                        new_num_blocks.append(num_blocks[i])\n+                        new_blocks.append(blocks[i])\n+                        new_rep_blocks.append(rep_blocks[i])\n+                num_blocks = new_num_blocks\n+                blocks = new_blocks\n+                rep_blocks = new_rep_blocks\n \n                 if minimal and num_block not in num_blocks:\n                     blocks.append(block)\n"}
