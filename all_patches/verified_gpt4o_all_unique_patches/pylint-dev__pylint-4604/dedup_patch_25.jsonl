{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4604", "model_patch": "diff --git a/pylint/checkers/imports.py b/pylint/checkers/imports.py\nindex 7e31505..f4c0b82 100644\n--- a/pylint/checkers/imports.py\n+++ b/pylint/checkers/imports.py\n@@ -518,7 +518,15 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n         \"\"\"Callback returning the deprecated modules.\"\"\"\n         return self.config.deprecated_modules\n \n-    @check_messages(*MSGS)\n+    def _collect_type_comments(self, node):\n+        \"\"\"Collects names used in type comments.\"\"\"\n+        type_comments = set()\n+        if node.parent and node.parent.type_comment:\n+            type_comment = node.parent.type_comment\n+            for name in node.names:\n+                if name[0] in type_comment:\n+                    type_comments.add(name[0])\n+        return type_comments\n     def visit_import(self, node):\n         \"\"\"triggered when an import statement is seen\"\"\"\n         self._check_reimport(node)\n@@ -529,7 +537,11 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n         if len(names) >= 2:\n             self.add_message(\"multiple-imports\", args=\", \".join(names), node=node)\n \n+        type_comments = self._collect_type_comments(node)\n+\n         for name in names:\n+            if name in type_comments:\n+                continue\n             self.check_deprecated_module(node, name)\n             self._check_preferred_module(node, name)\n             imported_module = self._get_imported_module(node, name)\n@@ -544,7 +556,15 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n \n             self._add_imported_module(node, imported_module.name)\n \n-    @check_messages(*MSGS)\n+    def _collect_type_comments(self, node):\n+        \"\"\"Collects names used in type comments.\"\"\"\n+        type_comments = set()\n+        if node.parent and node.parent.type_comment:\n+            type_comment = node.parent.type_comment\n+            for name in node.names:\n+                if name[0] in type_comment:\n+                    type_comments.add(name[0])\n+        return type_comments\n     def visit_importfrom(self, node):\n         \"\"\"triggered when a from statement is seen\"\"\"\n         basename = node.modname\n@@ -566,13 +586,25 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n             self._record_import(node, imported_module)\n         if imported_module is None:\n             return\n+        type_comments = self._collect_type_comments(node)\n+\n         for name, _ in node.names:\n+            if name in type_comments:\n+                continue\n             if name != \"*\":\n                 self._add_imported_module(node, f\"{imported_module.name}.{name}\")\n             else:\n                 self._add_imported_module(node, imported_module.name)\n \n-    @check_messages(*MSGS)\n+    def _collect_type_comments(self, node):\n+        \"\"\"Collects names used in type comments.\"\"\"\n+        type_comments = set()\n+        if node.parent and node.parent.type_comment:\n+            type_comment = node.parent.type_comment\n+            for name in node.names:\n+                if name[0] in type_comment:\n+                    type_comments.add(name[0])\n+        return type_comments\n     def leave_module(self, node):\n         # Check imports are grouped by category (standard, 3rd party, local)\n         std_imports, ext_imports, loc_imports = self._check_imports_order(node)\n"}
