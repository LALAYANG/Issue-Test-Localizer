{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4604", "model_patch": "diff --git a/pylint/checkers/imports.py b/pylint/checkers/imports.py\nindex 7e31505..ab0aa79 100644\n--- a/pylint/checkers/imports.py\n+++ b/pylint/checkers/imports.py\n@@ -518,7 +518,13 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n         \"\"\"Callback returning the deprecated modules.\"\"\"\n         return self.config.deprecated_modules\n \n-    @check_messages(*MSGS)\n+    def _is_used_in_type_comment(self, node, module_name):\n+        \"\"\"Check if an imported module is used in a type comment.\"\"\"\n+        for comment in node.root().get_children():\n+            if isinstance(comment, astroid.node_classes.Expr) and isinstance(comment.value, astroid.node_classes.Const) and isinstance(comment.value.value, str):\n+                if module_name in comment.value.value:\n+                    return True\n+        return False\n     def visit_import(self, node):\n         \"\"\"triggered when an import statement is seen\"\"\"\n         self._check_reimport(node)\n@@ -542,9 +548,17 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n             if imported_module is None:\n                 continue\n \n-            self._add_imported_module(node, imported_module.name)\n+            # Check if the module is used in a type comment\n+            if not self._is_used_in_type_comment(node, name):\n+                self._add_imported_module(node, imported_module.name)\n \n-    @check_messages(*MSGS)\n+    def _is_used_in_type_comment(self, node, module_name):\n+        \"\"\"Check if an imported module is used in a type comment.\"\"\"\n+        for comment in node.root().get_children():\n+            if isinstance(comment, astroid.node_classes.Expr) and isinstance(comment.value, astroid.node_classes.Const) and isinstance(comment.value.value, str):\n+                if module_name in comment.value.value:\n+                    return True\n+        return False\n     def visit_importfrom(self, node):\n         \"\"\"triggered when a from statement is seen\"\"\"\n         basename = node.modname\n@@ -568,11 +582,19 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n             return\n         for name, _ in node.names:\n             if name != \"*\":\n-                self._add_imported_module(node, f\"{imported_module.name}.{name}\")\n+                # Check if the module is used in a type comment\n+                if not self._is_used_in_type_comment(node, name):\n+                    self._add_imported_module(node, f\"{imported_module.name}.{name}\")\n             else:\n                 self._add_imported_module(node, imported_module.name)\n \n-    @check_messages(*MSGS)\n+    def _is_used_in_type_comment(self, node, module_name):\n+        \"\"\"Check if an imported module is used in a type comment.\"\"\"\n+        for comment in node.root().get_children():\n+            if isinstance(comment, astroid.node_classes.Expr) and isinstance(comment.value, astroid.node_classes.Const) and isinstance(comment.value.value, str):\n+                if module_name in comment.value.value:\n+                    return True\n+        return False\n     def leave_module(self, node):\n         # Check imports are grouped by category (standard, 3rd party, local)\n         std_imports, ext_imports, loc_imports = self._check_imports_order(node)\n"}
