{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4604", "model_patch": "diff --git a/pylint/checkers/imports.py b/pylint/checkers/imports.py\nindex 7e31505..74d4102 100644\n--- a/pylint/checkers/imports.py\n+++ b/pylint/checkers/imports.py\n@@ -542,6 +542,11 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n             if imported_module is None:\n                 continue\n \n+            # Check if the import is used in a type comment\n+            if any(isinstance(child, astroid.TypeComment) and imported_module.name in child.value\n+                   for child in node.root().get_children()):\n+                continue\n+\n             self._add_imported_module(node, imported_module.name)\n \n     @check_messages(*MSGS)\n@@ -566,6 +571,12 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n             self._record_import(node, imported_module)\n         if imported_module is None:\n             return\n+\n+        # Check if the import is used in a type comment\n+        if any(isinstance(child, astroid.TypeComment) and imported_module.name in child.value\n+               for child in node.root().get_children()):\n+            continue\n+            return\n         for name, _ in node.names:\n             if name != \"*\":\n                 self._add_imported_module(node, f\"{imported_module.name}.{name}\")\n", "occurrence": 1}
