{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4604", "model_patch": "diff --git a/pylint/checkers/imports.py b/pylint/checkers/imports.py\nindex 1045c62..0addd89 100644\n--- a/pylint/checkers/imports.py\n+++ b/pylint/checkers/imports.py\n@@ -165,7 +165,13 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n                 self.add_message('cyclic-import', args=' -> '.join(cycle))\n     def deprecated_modules(self):\n         return self.config.deprecated_modules\n-    @check_messages(*MSGS)\n+    def _is_node_used_in_type_comment(self, node, module_name):\n+        parent = node.parent\n+        while parent:\n+            if hasattr(parent, 'type_comment') and module_name in parent.type_comment:\n+                return True\n+            parent = parent.parent\n+        return False\n     def visit_import(self, node):\n         self._check_reimport(node)\n         self._check_import_as_rename(node)\n@@ -183,8 +189,17 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n                 self._record_import(node, imported_module)\n             if imported_module is None:\n                 continue\n-            self._add_imported_module(node, imported_module.name)\n-    @check_messages(*MSGS)\n+            if self._is_node_used_in_type_comment(node, imported_module.name):\n+                self._add_imported_module(node, imported_module.name)\n+            else:\n+                self._add_imported_module(node, imported_module.name)\n+    def _is_node_used_in_type_comment(self, node, module_name):\n+        parent = node.parent\n+        while parent:\n+            if hasattr(parent, 'type_comment') and module_name in parent.type_comment:\n+                return True\n+            parent = parent.parent\n+        return False\n     def visit_importfrom(self, node):\n         basename = node.modname\n         imported_module = self._get_imported_module(node, basename)\n@@ -207,7 +222,13 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n                 self._add_imported_module(node, f'{imported_module.name}.{name}')\n             else:\n                 self._add_imported_module(node, imported_module.name)\n-    @check_messages(*MSGS)\n+    def _is_node_used_in_type_comment(self, node, module_name):\n+        parent = node.parent\n+        while parent:\n+            if hasattr(parent, 'type_comment') and module_name in parent.type_comment:\n+                return True\n+            parent = parent.parent\n+        return False\n     def leave_module(self, node):\n         std_imports, ext_imports, loc_imports = self._check_imports_order(node)\n         met_import = set()"}
