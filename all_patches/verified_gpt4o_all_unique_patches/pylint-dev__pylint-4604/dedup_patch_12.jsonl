{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4604", "model_patch": "diff --git a/pylint/checkers/imports.py b/pylint/checkers/imports.py\nindex 7e31505..865b398 100644\n--- a/pylint/checkers/imports.py\n+++ b/pylint/checkers/imports.py\n@@ -518,7 +518,18 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n         \"\"\"Callback returning the deprecated modules.\"\"\"\n         return self.config.deprecated_modules\n \n-    @check_messages(*MSGS)\n+    def _is_used_in_type_comment(self, node, name):\n+        \"\"\"Check if the imported module is used in type comments.\"\"\"\n+        def is_in_type_comment(n):\n+            return isinstance(n, astroid.Const) and isinstance(n.value, str) and 'type:' in n.value\n+\n+        # Traverse the module body to find type comments\n+        module_body = node.root().body\n+        for stmt in module_body:\n+            if isinstance(stmt, astroid.Expr) and is_in_type_comment(stmt.value):\n+                if name in stmt.value.value:\n+                    return True\n+        return False\n     def visit_import(self, node):\n         \"\"\"triggered when an import statement is seen\"\"\"\n         self._check_reimport(node)\n@@ -539,12 +550,23 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n             if isinstance(node.scope(), astroid.Module):\n                 self._record_import(node, imported_module)\n \n-            if imported_module is None:\n+            if imported_module is None and not self._is_used_in_type_comment(node, name):\n                 continue\n \n             self._add_imported_module(node, imported_module.name)\n \n-    @check_messages(*MSGS)\n+    def _is_used_in_type_comment(self, node, name):\n+        \"\"\"Check if the imported module is used in type comments.\"\"\"\n+        def is_in_type_comment(n):\n+            return isinstance(n, astroid.Const) and isinstance(n.value, str) and 'type:' in n.value\n+\n+        # Traverse the module body to find type comments\n+        module_body = node.root().body\n+        for stmt in module_body:\n+            if isinstance(stmt, astroid.Expr) and is_in_type_comment(stmt.value):\n+                if name in stmt.value.value:\n+                    return True\n+        return False\n     def visit_importfrom(self, node):\n         \"\"\"triggered when a from statement is seen\"\"\"\n         basename = node.modname\n@@ -572,7 +594,18 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n             else:\n                 self._add_imported_module(node, imported_module.name)\n \n-    @check_messages(*MSGS)\n+    def _is_used_in_type_comment(self, node, name):\n+        \"\"\"Check if the imported module is used in type comments.\"\"\"\n+        def is_in_type_comment(n):\n+            return isinstance(n, astroid.Const) and isinstance(n.value, str) and 'type:' in n.value\n+\n+        # Traverse the module body to find type comments\n+        module_body = node.root().body\n+        for stmt in module_body:\n+            if isinstance(stmt, astroid.Expr) and is_in_type_comment(stmt.value):\n+                if name in stmt.value.value:\n+                    return True\n+        return False\n     def leave_module(self, node):\n         # Check imports are grouped by category (standard, 3rd party, local)\n         std_imports, ext_imports, loc_imports = self._check_imports_order(node)\n"}
