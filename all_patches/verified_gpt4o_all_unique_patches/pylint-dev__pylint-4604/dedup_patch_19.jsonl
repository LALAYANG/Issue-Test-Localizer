{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4604", "model_patch": "diff --git a/pylint/checkers/imports.py b/pylint/checkers/imports.py\nindex 1045c62..c1f880b 100644\n--- a/pylint/checkers/imports.py\n+++ b/pylint/checkers/imports.py\n@@ -200,7 +200,7 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n             self._check_position(node)\n         if isinstance(node.scope(), astroid.Module):\n             self._record_import(node, imported_module)\n-        if imported_module is None:\n+        if imported_module is None and (not self._is_module_used_in_type_comment(node, basename)):\n             return\n         for name, _ in node.names:\n             if name != '*':\n@@ -457,4 +457,7 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n         if scoped_imports:\n             self.add_message('import-outside-toplevel', args=', '.join(scoped_imports), node=node)\n def register(linter):\n+    def _is_module_used_in_type_comment(self, node, module_name):\n+        type_comments = [node.after_comment, getattr(node, 'type_comment', None)]\n+        return any((type_comment and module_name in type_comment for type_comment in type_comments))\n     linter.register_checker(ImportsChecker(linter))\n\\ No newline at end of file"}
