{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4604", "model_patch": "diff --git a/pylint/checkers/utils.py b/pylint/checkers/utils.py\nindex 25ab41a..4cf8c96 100644\n--- a/pylint/checkers/utils.py\n+++ b/pylint/checkers/utils.py\n@@ -822,11 +822,12 @@ def is_node_in_type_annotation_context(node: astroid.node_classes.NodeNG) -> boo\n     \"\"\"Check if node is in type annotation context.\n \n     Check for 'AnnAssign', function 'Arguments',\n-    or part of function return type anntation.\n+    or part of function return type annotation,\n+    or used in a type comment.\n     \"\"\"\n     current_node, parent_node = (node, node.parent)\n     while True:\n-        if isinstance(parent_node, astroid.AnnAssign) and parent_node.annotation == current_node or (isinstance(parent_node, astroid.Arguments) and current_node in (*parent_node.annotations, *parent_node.posonlyargs_annotations, *parent_node.kwonlyargs_annotations, parent_node.varargannotation, parent_node.kwargannotation)) or (isinstance(parent_node, astroid.FunctionDef) and parent_node.returns == current_node):\n+        if isinstance(parent_node, astroid.AnnAssign) and parent_node.annotation == current_node or (isinstance(parent_node, astroid.Arguments) and current_node in (*parent_node.annotations, *parent_node.posonlyargs_annotations, *parent_node.kwonlyargs_annotations, parent_node.varargannotation, parent_node.kwargannotation)) or (isinstance(parent_node, astroid.FunctionDef) and parent_node.returns == current_node) or (isinstance(parent_node, astroid.Expr) and isinstance(parent_node.value, astroid.Const) and isinstance(parent_node.value.value, str) and ('type: ' in parent_node.value.value)):\n             return True\n         current_node, parent_node = (parent_node, parent_node.parent)\n         if isinstance(parent_node, astroid.Module):"}
