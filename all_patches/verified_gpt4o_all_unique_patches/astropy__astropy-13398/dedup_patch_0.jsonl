{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-13398", "model_patch": "--- a/astropy/coordinates/builtin_frames/altaz.py\n+++ b/astropy/coordinates/builtin_frames/altaz.py\n+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, AltAz)\n+def itrs_to_altaz(itrs_coo, altaz_frame):\n+    topocentric_itrs_repr = itrs_coo.cartesian - altaz_frame.location.get_itrs().cartesian\n+    rep = topocentric_itrs_repr.transform(itrs_to_observed_mat(altaz_frame))\n+    return altaz_frame.realize_frame(rep)\n+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, ITRS)\n+def altaz_to_itrs(altaz_coo, itrs_frame):\n+    topocentric_itrs_repr = altaz_coo.cartesian.transform(matrix_transpose(itrs_to_observed_mat(altaz_coo)))\n+    rep = topocentric_itrs_repr + altaz_coo.location.get_itrs().cartesian\n+    return itrs_frame.realize_frame(rep)\n+def itrs_to_observed_mat(observed_frame):\n+    lon, lat, height = observed_frame.location.to_geodetic('WGS84')\n+    elong = lon.to_value(u.radian)\n+    if isinstance(observed_frame, AltAz):\n+        elat = lat.to_value(u.radian)\n+        minus_x = np.eye(3)\n+        minus_x[0][0] = -1.0\n+        mat = minus_x @ rotation_matrix(PIOVER2 - elat, 'y', unit=u.radian) @ rotation_matrix(elong, 'z', unit=u.radian)\n+    else:\n+        minus_y = np.eye(3)\n+        minus_y[1][1] = -1.0\n+        mat = minus_y @ rotation_matrix(elong, 'z', unit=u.radian)\n+    return mat"}
