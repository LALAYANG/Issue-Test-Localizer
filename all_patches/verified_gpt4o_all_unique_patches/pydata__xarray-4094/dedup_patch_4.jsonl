{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 1e17b93..5012510 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3442,13 +3442,12 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n         \"\"\"\n         stacking_dims = tuple(dim for dim in self.dims if dim not in sample_dims)\n \n-        for variable in self:\n+        for variable in self.data_vars:\n             dims = self[variable].dims\n-            dims_include_sample_dims = set(sample_dims) <= set(dims)\n-            if not dims_include_sample_dims:\n+            if not set(sample_dims).issubset(dims):\n                 raise ValueError(\n-                    \"All variables in the dataset must contain the \"\n-                    \"dimensions {}.\".format(dims)\n+                    f\"All variables in the dataset must contain the dimensions {sample_dims}. \"\n+                    f\"Variable '{variable}' does not.\"\n                 )\n \n         def ensure_stackable(val):\n@@ -3475,12 +3474,13 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n         # coerce the levels of the MultiIndex to have the same type as the\n         # input dimensions. This code is messy, so it might be better to just\n         # input a dummy value for the singleton dimension.\n-        idx = data_array.indexes[new_dim]\n-        levels = [idx.levels[0]] + [\n-            level.astype(self[level.name].dtype) for level in idx.levels[1:]\n-        ]\n-        new_idx = idx.set_levels(levels)\n-        data_array[new_dim] = IndexVariable(new_dim, new_idx)\n+        if isinstance(data_array.indexes[new_dim], pd.MultiIndex):\n+            idx = data_array.indexes[new_dim]\n+            levels = [idx.levels[0]] + [\n+                level.astype(self[level.name].dtype) for level in idx.levels[1:]\n+            ]\n+            new_idx = idx.set_levels(levels)\n+            data_array[new_dim] = IndexVariable(new_dim, new_idx)\n \n         if name is not None:\n             data_array.name = name\n"}
