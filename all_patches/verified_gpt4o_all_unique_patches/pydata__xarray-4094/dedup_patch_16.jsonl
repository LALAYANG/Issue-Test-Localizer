{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 21ef2a4..ec7ee8b 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -1149,17 +1149,19 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             assign_coords = {variable_dim: val.name}\n             for dim in stacking_dims:\n                 if dim not in val.dims:\n-                    assign_coords[dim] = None\n+                    if len(val.dims) > 1:\n+                        assign_coords[dim] = None\n             expand_dims = set(stacking_dims).difference(set(val.dims))\n             expand_dims.add(variable_dim)\n             expand_dims = list(expand_dims)\n             return val.assign_coords(**assign_coords).expand_dims(expand_dims).stack({new_dim: (variable_dim,) + stacking_dims})\n         stackable_vars = [ensure_stackable(self[key]) for key in self.data_vars]\n         data_array = xr.concat(stackable_vars, dim=new_dim)\n-        idx = data_array.indexes[new_dim]\n-        levels = [idx.levels[0]] + [level.astype(self[level.name].dtype) for level in idx.levels[1:]]\n-        new_idx = idx.set_levels(levels)\n-        data_array[new_dim] = IndexVariable(new_dim, new_idx)\n+        if stacking_dims:\n+            idx = data_array.indexes[new_dim]\n+            levels = [idx.levels[0]] + [level.astype(self[level.name].dtype) for level in idx.levels[1:]]\n+            new_idx = idx.set_levels(levels)\n+            data_array[new_dim] = IndexVariable(new_dim, new_idx)\n         if name is not None:\n             data_array.name = name\n         return data_array"}
