{"model_name_or_path": "agentless", "instance_id": "psf__requests-1921", "model_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 1467bfc..bd35ff6 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -104,7 +104,8 @@ class Session(SessionRedirectMixin):\n         return self\n     def __exit__(self, *args):\n         self.close()\n-    def prepare_request(self, request):\n+    def _clean_headers(self, headers):\n+        return CaseInsensitiveDict({k: v for k, v in headers.items() if v is not None})\n         cookies = request.cookies or {}\n         if not isinstance(cookies, cookielib.CookieJar):\n             cookies = cookiejar_from_dict(cookies)\n@@ -113,7 +114,7 @@ class Session(SessionRedirectMixin):\n         if self.trust_env and (not auth) and (not self.auth):\n             auth = get_netrc_auth(request.url)\n         p = PreparedRequest()\n-        p.prepare(method=request.method.upper(), url=request.url, files=request.files, data=request.data, headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict), params=merge_setting(request.params, self.params), auth=merge_setting(auth, self.auth), cookies=merged_cookies, hooks=merge_hooks(request.hooks, self.hooks))\n+        p.prepare(method=request.method.upper(), url=request.url, files=request.files, data=request.data, headers=self._clean_headers(merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict)), params=merge_setting(request.params, self.params), auth=merge_setting(auth, self.auth), cookies=merged_cookies, hooks=merge_hooks(request.hooks, self.hooks))\n         return p\n     def request(self, method, url, params=None, data=None, headers=None, cookies=None, files=None, auth=None, timeout=None, allow_redirects=True, proxies=None, hooks=None, stream=None, verify=None, cert=None):\n         method = builtin_str(method)"}
