{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25232", "model_patch": "diff --git a/sklearn/impute/_iterative.py b/sklearn/impute/_iterative.py\nindex 62cdd57..899b694 100644\n--- a/sklearn/impute/_iterative.py\n+++ b/sklearn/impute/_iterative.py\n@@ -281,6 +281,7 @@ class IterativeImputer(_BaseImputer):\n         \"initial_strategy\": [\n             StrOptions({\"mean\", \"median\", \"most_frequent\", \"constant\"})\n         ],\n+        \"fill_value\": [numbers.Integral, numbers.Real, \"str\", None],\n         \"imputation_order\": [\n             StrOptions({\"ascending\", \"descending\", \"roman\", \"arabic\", \"random\"})\n         ],\n@@ -303,6 +304,7 @@ class IterativeImputer(_BaseImputer):\n         initial_strategy=\"mean\",\n         imputation_order=\"ascending\",\n         skip_complete=False,\n+        fill_value=None,\n         min_value=-np.inf,\n         max_value=np.inf,\n         verbose=0,\n@@ -323,6 +325,7 @@ class IterativeImputer(_BaseImputer):\n         self.n_nearest_features = n_nearest_features\n         self.initial_strategy = initial_strategy\n         self.imputation_order = imputation_order\n+        self.fill_value = fill_value\n         self.skip_complete = skip_complete\n         self.min_value = min_value\n         self.max_value = max_value\n@@ -610,11 +613,19 @@ class IterativeImputer(_BaseImputer):\n         X_missing_mask = _get_mask(X, self.missing_values)\n         mask_missing_values = X_missing_mask.copy()\n         if self.initial_imputer_ is None:\n-            self.initial_imputer_ = SimpleImputer(\n-                missing_values=self.missing_values,\n-                strategy=self.initial_strategy,\n-                keep_empty_features=self.keep_empty_features,\n-            )\n+            if self.initial_strategy == \"constant\":\n+                self.initial_imputer_ = SimpleImputer(\n+                    missing_values=self.missing_values,\n+                    strategy=self.initial_strategy,\n+                    fill_value=self.fill_value,\n+                    keep_empty_features=self.keep_empty_features,\n+                )\n+            else:\n+                self.initial_imputer_ = SimpleImputer(\n+                    missing_values=self.missing_values,\n+                    strategy=self.initial_strategy,\n+                    keep_empty_features=self.keep_empty_features,\n+                )\n             X_filled = self.initial_imputer_.fit_transform(X)\n         else:\n             X_filled = self.initial_imputer_.transform(X)\n", "occurrence": 1}
