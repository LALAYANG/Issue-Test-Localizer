{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25232", "model_patch": "diff --git a/sklearn/impute/_iterative.py b/sklearn/impute/_iterative.py\nindex 62cdd57..5b14686 100644\n--- a/sklearn/impute/_iterative.py\n+++ b/sklearn/impute/_iterative.py\n@@ -117,6 +117,12 @@ class IterativeImputer(_BaseImputer):\n         Which strategy to use to initialize the missing values. Same as the\n         `strategy` parameter in :class:`~sklearn.impute.SimpleImputer`.\n \n+    fill_value : any, default=None\n+        When `initial_strategy=\"constant\"`, `fill_value` is used to replace\n+        all occurrences of `missing_values`. If left to the default, `fill_value`\n+        will be 0 when imputing numerical data and \"missing_value\" for strings\n+        or object data types.\n+\n     imputation_order : {'ascending', 'descending', 'roman', 'arabic', \\\n             'random'}, default='ascending'\n         The order in which the features will be imputed. Possible values:\n@@ -309,6 +315,7 @@ class IterativeImputer(_BaseImputer):\n         random_state=None,\n         add_indicator=False,\n         keep_empty_features=False,\n+        fill_value=None,\n     ):\n         super().__init__(\n             missing_values=missing_values,\n@@ -328,6 +335,7 @@ class IterativeImputer(_BaseImputer):\n         self.max_value = max_value\n         self.verbose = verbose\n         self.random_state = random_state\n+        self.fill_value = fill_value\n \n     def _impute_one_feature(\n         self,\n@@ -337,6 +345,7 @@ class IterativeImputer(_BaseImputer):\n         neighbor_feat_idx,\n         estimator=None,\n         fit_mode=True,\n+        fill_value=None,\n     ):\n         \"\"\"Impute a single feature from the others provided.\n \n@@ -614,6 +623,7 @@ class IterativeImputer(_BaseImputer):\n                 missing_values=self.missing_values,\n                 strategy=self.initial_strategy,\n                 keep_empty_features=self.keep_empty_features,\n+                fill_value=self.fill_value,\n             )\n             X_filled = self.initial_imputer_.fit_transform(X)\n         else:\n", "occurrence": 1}
