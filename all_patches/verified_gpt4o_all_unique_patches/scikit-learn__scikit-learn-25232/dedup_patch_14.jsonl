{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25232", "model_patch": "diff --git a/sklearn/impute/_iterative.py b/sklearn/impute/_iterative.py\nindex 62cdd57..6d74113 100644\n--- a/sklearn/impute/_iterative.py\n+++ b/sklearn/impute/_iterative.py\n@@ -112,6 +112,12 @@ class IterativeImputer(_BaseImputer):\n         imputed target feature. Can provide significant speed-up when the\n         number of features is huge. If `None`, all features will be used.\n \n+    fill_value : scalar, default=None\n+        When `initial_strategy=\"constant\"`, `fill_value` is used to replace\n+        all occurrences of missing_values. If left to the default, `fill_value`\n+        will be 0 when imputing numerical data and “missing_value” for strings\n+        or object data types.\n+\n     initial_strategy : {'mean', 'median', 'most_frequent', 'constant'}, \\\n             default='mean'\n         Which strategy to use to initialize the missing values. Same as the\n@@ -302,6 +308,7 @@ class IterativeImputer(_BaseImputer):\n         n_nearest_features=None,\n         initial_strategy=\"mean\",\n         imputation_order=\"ascending\",\n+        fill_value=None,\n         skip_complete=False,\n         min_value=-np.inf,\n         max_value=np.inf,\n@@ -324,6 +331,7 @@ class IterativeImputer(_BaseImputer):\n         self.initial_strategy = initial_strategy\n         self.imputation_order = imputation_order\n         self.skip_complete = skip_complete\n+        self.fill_value = fill_value\n         self.min_value = min_value\n         self.max_value = max_value\n         self.verbose = verbose\n@@ -613,6 +621,7 @@ class IterativeImputer(_BaseImputer):\n             self.initial_imputer_ = SimpleImputer(\n                 missing_values=self.missing_values,\n                 strategy=self.initial_strategy,\n+                fill_value=self.fill_value if self.initial_strategy == \"constant\" else None,\n                 keep_empty_features=self.keep_empty_features,\n             )\n             X_filled = self.initial_imputer_.fit_transform(X)\n", "occurrence": 1}
