{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25232", "model_patch": "diff --git a/sklearn/impute/_iterative.py b/sklearn/impute/_iterative.py\nindex 62cdd57..2ae6970 100644\n--- a/sklearn/impute/_iterative.py\n+++ b/sklearn/impute/_iterative.py\n@@ -284,6 +284,7 @@ class IterativeImputer(_BaseImputer):\n         \"imputation_order\": [\n             StrOptions({\"ascending\", \"descending\", \"roman\", \"arabic\", \"random\"})\n         ],\n+        \"fill_value\": [None, Real, Integral, StrOptions({\"nan\"})],\n         \"skip_complete\": [\"boolean\"],\n         \"min_value\": [None, Interval(Real, None, None, closed=\"both\"), \"array-like\"],\n         \"max_value\": [None, Interval(Real, None, None, closed=\"both\"), \"array-like\"],\n@@ -302,6 +303,7 @@ class IterativeImputer(_BaseImputer):\n         n_nearest_features=None,\n         initial_strategy=\"mean\",\n         imputation_order=\"ascending\",\n+        fill_value=None,\n         skip_complete=False,\n         min_value=-np.inf,\n         max_value=np.inf,\n@@ -327,6 +329,7 @@ class IterativeImputer(_BaseImputer):\n         self.min_value = min_value\n         self.max_value = max_value\n         self.verbose = verbose\n+        self.fill_value = fill_value\n         self.random_state = random_state\n \n     def _impute_one_feature(\n@@ -615,6 +618,12 @@ class IterativeImputer(_BaseImputer):\n                 strategy=self.initial_strategy,\n                 keep_empty_features=self.keep_empty_features,\n             )\n+            self.initial_imputer_ = SimpleImputer(\n+                missing_values=self.missing_values,\n+                strategy=self.initial_strategy,\n+                fill_value=self.fill_value,\n+                keep_empty_features=self.keep_empty_features,\n+            )\n             X_filled = self.initial_imputer_.fit_transform(X)\n         else:\n             X_filled = self.initial_imputer_.transform(X)\n@@ -886,4 +895,4 @@ class IterativeImputer(_BaseImputer):\n         \"\"\"\n         input_features = _check_feature_names_in(self, input_features)\n         names = self.initial_imputer_.get_feature_names_out(input_features)\n-        return self._concatenate_indicator_feature_names_out(names, input_features)\n+        return self._concatenate_indicator_feature_names_out(names, input_features)\n"}
