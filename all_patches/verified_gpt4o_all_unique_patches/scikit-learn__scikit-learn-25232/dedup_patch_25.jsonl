{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25232", "model_patch": "diff --git a/sklearn/impute/_iterative.py b/sklearn/impute/_iterative.py\nindex 62cdd57..d011913 100644\n--- a/sklearn/impute/_iterative.py\n+++ b/sklearn/impute/_iterative.py\n@@ -281,6 +281,7 @@ class IterativeImputer(_BaseImputer):\n         \"initial_strategy\": [\n             StrOptions({\"mean\", \"median\", \"most_frequent\", \"constant\"})\n         ],\n+        \"fill_value\": [Real, Integral, StrOptions({\"nan\"}), None],\n         \"imputation_order\": [\n             StrOptions({\"ascending\", \"descending\", \"roman\", \"arabic\", \"random\"})\n         ],\n@@ -308,8 +309,11 @@ class IterativeImputer(_BaseImputer):\n         verbose=0,\n         random_state=None,\n         add_indicator=False,\n+        fill_value=None,\n         keep_empty_features=False,\n     ):\n+        if initial_strategy == \"constant\" and fill_value is None:\n+            raise ValueError(\"fill_value must be specified when initial_strategy='constant'\")\n         super().__init__(\n             missing_values=missing_values,\n             add_indicator=add_indicator,\n@@ -615,8 +619,10 @@ class IterativeImputer(_BaseImputer):\n                 strategy=self.initial_strategy,\n                 keep_empty_features=self.keep_empty_features,\n             )\n+            self.initial_imputer_.fill_value = self.fill_value\n             X_filled = self.initial_imputer_.fit_transform(X)\n         else:\n+            self.initial_imputer_.fill_value = self.fill_value\n             X_filled = self.initial_imputer_.transform(X)\n \n         valid_mask = np.flatnonzero(\n@@ -886,4 +892,4 @@ class IterativeImputer(_BaseImputer):\n         \"\"\"\n         input_features = _check_feature_names_in(self, input_features)\n         names = self.initial_imputer_.get_feature_names_out(input_features)\n-        return self._concatenate_indicator_feature_names_out(names, input_features)\n+        return self._concatenate_indicator_feature_names_out(names, input_features)\n", "occurrence": 1}
