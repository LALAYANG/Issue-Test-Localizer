{"model_name_or_path": "agentless", "instance_id": "django__django-16256", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex be1830e..8b6cafb 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -299,18 +299,36 @@ def create_reverse_many_to_one_manager(superclass, rel):\n                         check_and_update_obj(obj)\n                         obj.save()\n         add.alters_data = True\n+        async def acreate(self, **kwargs):\n+            self._check_fk_val()\n+            kwargs[self.field.name] = self.instance\n+            db = router.db_for_write(self.model, instance=self.instance)\n+            return await sync_to_async(super(RelatedManager, self.db_manager(db)).create)(**kwargs)\n+        acreate.alters_data = True\n         def create(self, **kwargs):\n             self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n             db = router.db_for_write(self.model, instance=self.instance)\n             return super(RelatedManager, self.db_manager(db)).create(**kwargs)\n         create.alters_data = True\n+        async def aget_or_create(self, **kwargs):\n+            self._check_fk_val()\n+            kwargs[self.field.name] = self.instance\n+            db = router.db_for_write(self.model, instance=self.instance)\n+            return await sync_to_async(super(RelatedManager, self.db_manager(db)).get_or_create)(**kwargs)\n+        aget_or_create.alters_data = True\n         def get_or_create(self, **kwargs):\n             self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n             db = router.db_for_write(self.model, instance=self.instance)\n             return super(RelatedManager, self.db_manager(db)).get_or_create(**kwargs)\n         get_or_create.alters_data = True\n+        async def aupdate_or_create(self, **kwargs):\n+            self._check_fk_val()\n+            kwargs[self.field.name] = self.instance\n+            db = router.db_for_write(self.model, instance=self.instance)\n+            return await sync_to_async(super(RelatedManager, self.db_manager(db)).update_or_create)(**kwargs)\n+        aupdate_or_create.alters_data = True\n         def update_or_create(self, **kwargs):\n             self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n@@ -504,12 +522,25 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):\n                     self.remove(*old_ids)\n                     self.add(*new_objs, through_defaults=through_defaults)\n         set.alters_data = True\n+        async def acreate(self, *, through_defaults=None, **kwargs):\n+            db = router.db_for_write(self.instance.__class__, instance=self.instance)\n+            new_obj = await sync_to_async(super(ManyRelatedManager, self.db_manager(db)).create)(**kwargs)\n+            self.add(new_obj, through_defaults=through_defaults)\n+            return new_obj\n+        acreate.alters_data = True\n         def create(self, *, through_defaults=None, **kwargs):\n             db = router.db_for_write(self.instance.__class__, instance=self.instance)\n             new_obj = super(ManyRelatedManager, self.db_manager(db)).create(**kwargs)\n             self.add(new_obj, through_defaults=through_defaults)\n             return new_obj\n         create.alters_data = True\n+        async def aget_or_create(self, *, through_defaults=None, **kwargs):\n+            db = router.db_for_write(self.instance.__class__, instance=self.instance)\n+            obj, created = await sync_to_async(super(ManyRelatedManager, self.db_manager(db)).get_or_create)(**kwargs)\n+            if created:\n+                self.add(obj, through_defaults=through_defaults)\n+            return (obj, created)\n+        aget_or_create.alters_data = True\n         def get_or_create(self, *, through_defaults=None, **kwargs):\n             db = router.db_for_write(self.instance.__class__, instance=self.instance)\n             obj, created = super(ManyRelatedManager, self.db_manager(db)).get_or_create(**kwargs)\n@@ -517,6 +548,13 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):\n                 self.add(obj, through_defaults=through_defaults)\n             return (obj, created)\n         get_or_create.alters_data = True\n+        async def aupdate_or_create(self, *, through_defaults=None, **kwargs):\n+            db = router.db_for_write(self.instance.__class__, instance=self.instance)\n+            obj, created = await sync_to_async(super(ManyRelatedManager, self.db_manager(db)).update_or_create)(**kwargs)\n+            if created:\n+                self.add(obj, through_defaults=through_defaults)\n+            return (obj, created)\n+        aupdate_or_create.alters_data = True\n         def update_or_create(self, *, through_defaults=None, **kwargs):\n             db = router.db_for_write(self.instance.__class__, instance=self.instance)\n             obj, created = super(ManyRelatedManager, self.db_manager(db)).update_or_create(**kwargs)"}
