{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15809", "model_patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex 653d499..9430cb9 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -137,10 +137,14 @@ class Function(Application, Expr):\n     def __new__(cls, *args, **options):\n         if cls is Function:\n             return UndefinedFunction(*args, **options)\n-        n = len(args)\n-        if n not in cls.nargs:\n-            temp = '%(name)s takes %(qual)s %(args)s argument%(plural)s (%(given)s given)'\n-            raise TypeError(temp % {'name': cls, 'qual': 'exactly' if len(cls.nargs) == 1 else 'at least', 'args': min(cls.nargs), 'plural': 's' * (min(cls.nargs) != 1), 'given': n})\n+        if cls is Min and len(args) == 0:\n+            from sympy import oo\n+            return -oo\n+        if cls is Max and len(args) == 0:\n+            from sympy import oo\n+            return oo\n+        if len(args) not in cls.nargs:\n+            raise TypeError(f'{cls.__name__} takes at least {min(cls.nargs)} arguments ({len(args)} given)')\n         evaluate = options.get('evaluate', global_evaluate[0])\n         result = super(Function, cls).__new__(cls, *args, **options)\n         if evaluate and isinstance(result, cls) and result.args:"}
