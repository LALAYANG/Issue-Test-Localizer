{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15809", "model_patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex bb765cc..9ad67b0 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -430,19 +430,21 @@ class Function(Application, Expr):\n             return UndefinedFunction(*args, **options)\n \n         n = len(args)\n-        if n not in cls.nargs:\n-            # XXX: exception message must be in exactly this format to\n-            # make it work with NumPy's functions like vectorize(). See,\n-            # for example, https://github.com/numpy/numpy/issues/1697.\n-            # The ideal solution would be just to attach metadata to\n-            # the exception and change NumPy to take advantage of this.\n+        if n == 0:\n+            if cls.__name__.lower() == 'min':\n+                from sympy import oo\n+                return -oo\n+            elif cls.__name__.lower() == 'max':\n+                from sympy import oo\n+                return oo\n+        elif n not in cls.nargs:\n             temp = ('%(name)s takes %(qual)s %(args)s '\n-                   'argument%(plural)s (%(given)s given)')\n+                    'argument%(plural)s (%(given)s given)')\n             raise TypeError(temp % {\n                 'name': cls,\n                 'qual': 'exactly' if len(cls.nargs) == 1 else 'at least',\n                 'args': min(cls.nargs),\n-                'plural': 's'*(min(cls.nargs) != 1),\n+                'plural': 's' * (min(cls.nargs) != 1),\n                 'given': n})\n \n         evaluate = options.get('evaluate', global_evaluate[0])\n"}
