{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25332", "model_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 8ce3360..72c2928 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -753,6 +753,11 @@ class _AxesBase(martist.Artist):\n             for name in self._axis_names if self in self._shared_axes[name]}\n         state[\"_twinned_axes\"] = (self._twinned_axes.get_siblings(self)\n                                   if self in self._twinned_axes else None)\n+        # Handle weak references in the state.\n+        state[\"_align_label_groups\"] = {\n+            k: [(ref() if ref() is not None else None) for ref in v]\n+            for k, v in self._align_label_groups.items()\n+        }\n         return state\n \n     def __setstate__(self, state):\n@@ -763,7 +768,13 @@ class _AxesBase(martist.Artist):\n         twinned_siblings = state.pop(\"_twinned_axes\")\n         if twinned_siblings:\n             self._twinned_axes.join(*twinned_siblings)\n-        self.__dict__ = state\n+        # Restore weak references in the state.\n+        align_label_groups = state.pop(\"_align_label_groups\", {})\n+        self._align_label_groups = {\n+            k: [weakref.ref(ax) for ax in v if ax is not None]\n+            for k, v in align_label_groups.items()\n+        }\n+        self.__dict__.update(state)\n         self._stale = True\n \n     def __repr__(self):\n", "occurrence": 1}
