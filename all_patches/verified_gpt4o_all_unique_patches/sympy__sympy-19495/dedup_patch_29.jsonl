{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19495", "model_patch": "diff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py\nindex c7937ea..ce18bbf 100644\n--- a/sympy/sets/conditionset.py\n+++ b/sympy/sets/conditionset.py\n@@ -79,21 +79,20 @@ class ConditionSet(Set):\n         if not isinstance(self.sym, Expr):\n             return self\n         sym, cond, base = self.args\n+        sym, cond, base = self.args\n+        cond = cond.subs(old, new)\n+        base = base.subs(old, new)\n         if old == sym:\n-            base = base.subs(old, new)\n             if isinstance(new, Symbol):\n-                if new.assumptions0 == old.assumptions0 or (len(new.assumptions0) == 1 and old.is_commutative == new.is_commutative):\n-                    if base != self.base_set:\n-                        return self.func(sym, cond, base)\n-                    else:\n-                        return self.func(new, cond.subs(old, new), base)\n-                raise ValueError(filldedent('\\n                    A dummy symbol can only be\\n                    replaced with a symbol having the same\\n                    assumptions or one having a single assumption\\n                    having the same commutativity.\\n                '))\n-            return self.func(sym, cond, base)\n-        cond = self.condition.subs(old, new)\n-        base = self.base_set.subs(old, new)\n+                if sym.assumptions0 == new.assumptions0:\n+                    return self.func(new, cond, base)\n+                else:\n+                    raise ValueError(filldedent('\\n                        A dummy symbol can only be replaced with a symbol \\n                        having the same assumptions or one having a single \\n                        assumption with the same commutativity.\\n                    '))\n+            else:\n+                return self.func(sym, cond, base)\n         if cond is S.true:\n-            return ConditionSet(new, Contains(new, base), base)\n-        return self.func(self.sym, cond, base)\n+            return ConditionSet(new if old == sym else sym, Contains(new if old == sym else sym, base), base)\n+        return self.func(sym, cond, base)\n     def dummy_eq(self, other, symbol=None):\n         if not isinstance(other, self.func):\n             return False"}
