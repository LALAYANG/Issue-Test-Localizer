{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19495", "model_patch": "diff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py\nindex 934bff8..67764fa 100644\n--- a/sympy/sets/conditionset.py\n+++ b/sympy/sets/conditionset.py\n@@ -240,11 +240,16 @@ class ConditionSet(Set):\n             # the base set should be filtered and if new is not in\n             # the base set then this substitution is ignored\n             return self.func(sym, cond, base)\n-        cond = self.condition.subs(old, new)\n-        base = self.base_set.subs(old, new)\n-        if cond is S.true:\n-            return ConditionSet(new, Contains(new, base), base)\n-        return self.func(self.sym, cond, base)\n+        if old != self.sym:\n+            cond = self.condition.subs(old, new)\n+            base = self.base_set.subs(old, new)\n+            return self.func(self.sym, cond, base)\n+        else:\n+            cond = self.condition.subs(old, new)\n+            base = self.base_set.subs(old, new)\n+            if cond is S.true:\n+                return ConditionSet(new, Contains(new, base), base)\n+            return self.func(self.sym, cond, base)\n \n     def dummy_eq(self, other, symbol=None):\n         if not isinstance(other, self.func):\n", "occurrence": 1}
