{"model_name_or_path": "agentless", "instance_id": "django__django-17084", "model_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex e18ccd1..35c2550 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -41,10 +41,10 @@ class Aggregate(Func):\n         elif not self.is_summary:\n             expressions = super(Aggregate, c).get_source_expressions()\n             for index, expr in enumerate(expressions):\n-                if expr.contains_aggregate:\n+                if expr.contains_aggregate or expr.contains_over_clause:\n                     before_resolved = self.get_source_expressions()[index]\n                     name = before_resolved.name if hasattr(before_resolved, 'name') else repr(before_resolved)\n-                    raise FieldError(\"Cannot compute %s('%s'): '%s' is an aggregate\" % (c.name, name, name))\n+                    raise FieldError(\"Cannot compute %s('%s'): '%s' is an aggregate or window function\" % (c.name, name, name))\n         if (default := c.default) is None:\n             return c\n         if hasattr(default, 'resolve_expression'):"}
