{"model_name_or_path": "agentless", "instance_id": "django__django-17084", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex bd0f587..fe71bba 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -123,12 +123,21 @@ class BaseExpression:\n         raise NotImplementedError('Subclasses must implement as_sql()')\n     @cached_property\n     def contains_aggregate(self):\n+        for expr in self.get_source_expressions():\n+            if expr and expr.contains_over_clause:\n+                raise FieldError('Aggregate function calls cannot contain window function calls.')\n         return any((expr and expr.contains_aggregate for expr in self.get_source_expressions()))\n     @cached_property\n     def contains_over_clause(self):\n+        for expr in self.get_source_expressions():\n+            if expr and expr.contains_over_clause:\n+                raise FieldError('Aggregate function calls cannot contain window function calls.')\n         return any((expr and expr.contains_over_clause for expr in self.get_source_expressions()))\n     @cached_property\n     def contains_column_references(self):\n+        for expr in self.get_source_expressions():\n+            if expr and expr.contains_over_clause:\n+                raise FieldError('Aggregate function calls cannot contain window function calls.')\n         return any((expr and expr.contains_column_references for expr in self.get_source_expressions()))\n     def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False):\n         c = self.copy()"}
