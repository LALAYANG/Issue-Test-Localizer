{"model_name_or_path": "agentless", "instance_id": "django__django-15268", "model_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex f01e0f5..c12ac5e 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -40,7 +40,26 @@ class MigrationOptimizer:\n     def optimize_inner(self, operations, app_label):\n         \"\"\"Inner optimization loop.\"\"\"\n         new_operations = []\n+        skip_next = False\n         for i, operation in enumerate(operations):\n+            if skip_next:\n+                skip_next = False\n+                continue\n+            if (\n+                isinstance(operation, (AlterUniqueTogether, AlterIndexTogether)) and\n+                i + 1 < len(operations) and\n+                isinstance(operations[i + 1], type(operation)) and\n+                operation.name == operations[i + 1].name\n+            ):\n+                # Merge consecutive AlterFooTogether operations\n+                new_operations.append(\n+                    type(operation)(\n+                        name=operation.name,\n+                        **{operation.option_name: operations[i + 1].option_value}\n+                    )\n+                )\n+                skip_next = True\n+                continue\n             right = True  # Should we reduce on the right or on the left.\n             # Compare it to each operation after it\n             for j, other in enumerate(operations[i + 1:]):\n@@ -66,4 +85,4 @@ class MigrationOptimizer:\n                     right = False\n             else:\n                 new_operations.append(operation)\n-        return new_operations\n+        return new_operations\n"}
