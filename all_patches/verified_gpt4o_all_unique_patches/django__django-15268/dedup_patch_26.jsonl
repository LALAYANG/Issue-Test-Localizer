{"model_name_or_path": "agentless", "instance_id": "django__django-15268", "model_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex 06fbfa5..bca6511 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -10,26 +10,17 @@ class MigrationOptimizer:\n                 return result\n             operations = result\n     def optimize_inner(self, operations, app_label):\n+        def can_merge(op1, op2):\n+            return isinstance(op1, ModelOptionOperation) and isinstance(op2, ModelOptionOperation) and (op1.name_lower == op2.name_lower) and (type(op1) == type(op2)) and isinstance(op1, (AlterUniqueTogether, AlterIndexTogether))\n         new_operations = []\n-        for i, operation in enumerate(operations):\n-            right = True\n-            for j, other in enumerate(operations[i + 1:]):\n-                result = operation.reduce(other, app_label)\n-                if isinstance(result, list):\n-                    in_between = operations[i + 1:i + j + 1]\n-                    if right:\n-                        new_operations.extend(in_between)\n-                        new_operations.extend(result)\n-                    elif all((op.reduce(other, app_label) is True for op in in_between)):\n-                        new_operations.extend(result)\n-                        new_operations.extend(in_between)\n-                    else:\n-                        new_operations.append(operation)\n-                        break\n-                    new_operations.extend(operations[i + j + 2:])\n-                    return new_operations\n-                elif not result:\n-                    right = False\n+        i = 0\n+        while i < len(operations):\n+            operation = operations[i]\n+            if i < len(operations) - 1 and can_merge(operation, operations[i + 1]):\n+                merged_op = type(operation)(name=operation.name, **{operation.option_name: operations[i + 1].option_value})\n+                new_operations.append(merged_op)\n+                i += 2\n             else:\n                 new_operations.append(operation)\n+                i += 1\n         return new_operations\n\\ No newline at end of file"}
