{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-11310", "model_patch": "diff --git a/sklearn/model_selection/_search.py b/sklearn/model_selection/_search.py\nindex dd929b2..7436ff0 100644\n--- a/sklearn/model_selection/_search.py\n+++ b/sklearn/model_selection/_search.py\n@@ -123,6 +123,8 @@ class _CVScoreTuple(namedtuple('_CVScoreTuple', ('parameters', 'mean_validation_\n     __slots__ = ()\n     def __repr__(self):\n         return 'mean: {0:.5f}, std: {1:.5f}, params: {2}'.format(self.mean_validation_score, np.std(self.cv_validation_scores), self.parameters)\n+import time\n+...\n class BaseSearchCV(six.with_metaclass(ABCMeta, BaseEstimator, MetaEstimatorMixin)):\n     @abstractmethod\n     def __init__(self, estimator, scoring=None, fit_params=None, n_jobs=1, iid='warn', refit=True, cv=None, verbose=0, pre_dispatch='2*n_jobs', error_score='raise-deprecating', return_train_score=True):\n@@ -253,10 +255,12 @@ class BaseSearchCV(six.with_metaclass(ABCMeta, BaseEstimator, MetaEstimatorMixin\n             self.best_score_ = results['mean_test_%s' % refit_metric][self.best_index_]\n         if self.refit:\n             self.best_estimator_ = clone(base_estimator).set_params(**self.best_params_)\n+            start_time = time.time()\n             if y is not None:\n                 self.best_estimator_.fit(X, y, **fit_params)\n             else:\n                 self.best_estimator_.fit(X, **fit_params)\n+            self.refit_time_ = time.time() - start_time\n         self.scorer_ = scorers if self.multimetric_ else scorers['score']\n         self.cv_results_ = results\n         self.n_splits_ = n_splits"}
