{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-11310", "model_patch": "diff --git a/sklearn/model_selection/_search.py b/sklearn/model_selection/_search.py\nindex 0f3216b..462029b 100644\n--- a/sklearn/model_selection/_search.py\n+++ b/sklearn/model_selection/_search.py\n@@ -403,9 +403,19 @@ class _CVScoreTuple (namedtuple('_CVScoreTuple',\n             self.parameters)\n \n \n+import time\n+...\n+\n class BaseSearchCV(six.with_metaclass(ABCMeta, BaseEstimator,\n                                       MetaEstimatorMixin)):\n-    \"\"\"Base class for hyper parameter search with cross-validation.\"\"\"\n+    \"\"\"Base class for hyper parameter search with cross-validation.\n+\n+    Attributes\n+    ----------\n+    refit_time_ : float\n+        The time (in seconds) it took to refit the best estimator on the\n+        whole dataset.\n+    \"\"\"\n \n     @abstractmethod\n     def __init__(self, estimator, scoring=None,\n@@ -766,10 +776,12 @@ class BaseSearchCV(six.with_metaclass(ABCMeta, BaseEstimator,\n         if self.refit:\n             self.best_estimator_ = clone(base_estimator).set_params(\n                 **self.best_params_)\n+            start_time = time.time()\n             if y is not None:\n                 self.best_estimator_.fit(X, y, **fit_params)\n             else:\n                 self.best_estimator_.fit(X, **fit_params)\n+            self.refit_time_ = time.time() - start_time\n \n         # Store the only scorer not as a dict for single metric evaluation\n         self.scorer_ = scorers if self.multimetric_ else scorers['score']\n", "occurrence": 1}
