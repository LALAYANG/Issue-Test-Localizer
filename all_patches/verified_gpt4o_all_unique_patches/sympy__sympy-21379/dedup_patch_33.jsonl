{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21379", "model_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex e1c61a2..da2aa45 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -441,18 +441,17 @@ class Piecewise(Function):\n     def _eval_power(self, s):\n         return self.func(*[(e ** s, c) for e, c in self.args])\n     def _eval_subs(self, old, new):\n-        args = list(self.args)\n-        args_exist = False\n-        for i, (e, c) in enumerate(args):\n-            c = c._subs(old, new)\n-            if c != False:\n-                args_exist = True\n-                e = e._subs(old, new)\n-            args[i] = (e, c)\n-            if c == True:\n+        args = []\n+        for e, c in self.args:\n+            new_e = e._subs(old, new)\n+            new_c = c._subs(old, new)\n+            if not new_c:\n+                continue\n+            args.append((new_e, new_c))\n+            if new_c == True:\n                 break\n-        if not args_exist:\n-            args = ((Undefined, True),)\n+        if not args:\n+            args = [(Undefined, True)]\n         return self.func(*args)\n     def _eval_transpose(self):\n         return self.func(*[(e.transpose(), c) for e, c in self.args])"}
