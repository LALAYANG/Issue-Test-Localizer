{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9229", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 8cd9189..2f6fc1c 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -549,8 +549,16 @@ class Documenter:\n             # etc. don't support a prepended module name\n             self.add_line('   :module: %s' % self.modname, sourcename)\n \n-    def get_doc(self, ignore: int = None) -> Optional[List[List[str]]]:\n-        \"\"\"Decode and return lines of the docstring(s) for the object.\n+class TypeAliasDocumenter(ModuleLevelDocumenter):\n+    \"\"\"\n+    Specialized Documenter subclass for Type Aliases.\n+    \"\"\"\n+    objtype = 'typealias'\n+    directivetype = 'attribute'\n+    priority = 10\n+\n+    def get_doc(self, ignore: int = None, type_aliases: bool = False) -> Optional[List[List[str]]]:\n+        \"\"\"Decode and return lines of the docstring(s) for the type alias.\n \n         When it returns None value, autodoc-process-docstring will not be called for this\n         object.\n@@ -559,8 +567,11 @@ class Documenter:\n             warnings.warn(\"The 'ignore' argument to autodoc.%s.get_doc() is deprecated.\"\n                           % self.__class__.__name__,\n                           RemovedInSphinx50Warning, stacklevel=2)\n-        docstring = getdoc(self.object, self.get_attr, self.config.autodoc_inherit_docstrings,\n-                           self.parent, self.object_name)\n+        if type_aliases and hasattr(self.object, '__origin__'):\n+            docstring = self.object.__doc__\n+        else:\n+            docstring = getdoc(self.object, self.get_attr, self.config.autodoc_inherit_docstrings,\n+                               self.parent, self.object_name)\n         if docstring:\n             tab_width = self.directive.state.document.settings.tab_width\n             return [prepare_docstring(docstring, ignore, tab_width)]\n"}
