{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9229", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 8cd9189..e800cde 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -545,10 +545,17 @@ class Documenter:\n         if self.options.noindex:\n             self.add_line('   :noindex:', sourcename)\n         if self.objpath:\n-            # Be explicit about the module, this is necessary since .. class::\n-            # etc. don't support a prepended module name\n-            self.add_line('   :module: %s' % self.modname, sourcename)\n-\n+            if self.is_type_alias():\n+                # Add type alias information\n+                self.add_line('   :alias of: %s' % self.object.__name__, sourcename)\n+            else:\n+                # Be explicit about the module, this is necessary since .. class::\n+                # etc. don't support a prepended module name\n+                self.add_line('   :module: %s' % self.modname, sourcename)\n+                \n+    def is_type_alias(self) -> bool:\n+        \"\"\"Check if the current object is a type alias.\"\"\"\n+        return isinstance(self.object, (str, int, float, bool, tuple, list, dict, set, frozenset, bytes, bytearray, memoryview, type(None)))\n     def get_doc(self, ignore: int = None) -> Optional[List[List[str]]]:\n         \"\"\"Decode and return lines of the docstring(s) for the object.\n \n"}
