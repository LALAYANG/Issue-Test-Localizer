{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4551", "model_patch": "diff --git a/pylint/pyreverse/inspector.py b/pylint/pyreverse/inspector.py\nindex 540b86a..995670f 100644\n--- a/pylint/pyreverse/inspector.py\n+++ b/pylint/pyreverse/inspector.py\n@@ -79,6 +79,9 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):\n             for assignattr in assignattrs:\n                 if not isinstance(assignattr, astroid.Unknown):\n                     self.handle_assignattr_type(assignattr, node)\n+        for method in node.mymethods():\n+            if isinstance(method, astroid.FunctionDef):\n+                self.handle_function_type_hints(method, node)\n         try:\n             node.implements = list(interfaces(node, self.inherited_interfaces))\n         except astroid.InferenceError:\n@@ -93,6 +96,11 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):\n     link_module = visit_module\n     link_class = visit_classdef\n     link_function = visit_functiondef\n+    def handle_function_type_hints(self, function_node, class_node):\n+        for arg in function_node.args.args:\n+            if arg.annotation:\n+                inferred_type = set(arg.annotation.infer())\n+                class_node.locals_type[arg.name] = list(inferred_type)\n     def visit_assignname(self, node):\n         if hasattr(node, '_handled'):\n             return"}
