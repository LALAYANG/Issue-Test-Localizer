{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4551", "model_patch": "diff --git a/pylint/pyreverse/inspector.py b/pylint/pyreverse/inspector.py\nindex 540b86a..196115c 100644\n--- a/pylint/pyreverse/inspector.py\n+++ b/pylint/pyreverse/inspector.py\n@@ -97,10 +97,7 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):\n         if hasattr(node, '_handled'):\n             return\n         node._handled = True\n-        if node.name in node.frame():\n-            frame = node.frame()\n-        else:\n-            frame = node.root()\n+        frame = node.frame()\n         try:\n             if not hasattr(frame, 'locals_type'):\n                 if isinstance(frame, astroid.ClassDef):\n@@ -111,9 +108,20 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):\n                     self.visit_module(frame)\n             current = frame.locals_type[node.name]\n             values = set(node.infer())\n+            if node.annotation:\n+                annotated_type = self._handle_annotation(node.annotation)\n+                values.add(annotated_type)\n             frame.locals_type[node.name] = list(set(current) | values)\n         except astroid.InferenceError:\n             pass\n+    def _handle_annotation(self, annotation_node):\n+        try:\n+            inferred = next(annotation_node.infer())\n+            if isinstance(inferred, astroid.ClassDef):\n+                return inferred.qname()\n+        except astroid.InferenceError:\n+            pass\n+        return None\n     @staticmethod\n     def handle_assignattr_type(node, parent):\n         try:"}
