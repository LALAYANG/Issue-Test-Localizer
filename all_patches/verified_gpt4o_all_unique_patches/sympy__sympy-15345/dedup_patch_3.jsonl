{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15345", "model_patch": "diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py\nindex 7ecda40..1f61279 100644\n--- a/sympy/printing/mathematica.py\n+++ b/sympy/printing/mathematica.py\n@@ -31,6 +31,7 @@ known_functions = {\n     \"asech\": [(lambda x: True, \"ArcSech\")],\n     \"acsch\": [(lambda x: True, \"ArcCsch\")],\n     \"conjugate\": [(lambda x: True, \"Conjugate\")],\n+    \"Max\": [(lambda *args: True, \"Max\")],\n \n }\n \n@@ -99,7 +100,17 @@ class MCodePrinter(CodePrinter):\n             for cond, mfunc in cond_mfunc:\n                 if cond(*expr.args):\n                     return \"%s[%s]\" % (mfunc, self.stringify(expr.args, \", \"))\n-        return expr.func.__name__ + \"[%s]\" % self.stringify(expr.args, \", \")\n+        func_name = expr.func.__name__\n+        if func_name in self.known_functions:\n+            cond_mfunc = self.known_functions[func_name]\n+            for cond, mfunc in cond_mfunc:\n+                if cond(*expr.args):\n+                    if func_name == \"Max\":\n+                        # Ensure the correct order for Max arguments\n+                        args = sorted(expr.args, key=lambda x: x.is_number, reverse=True)\n+                        return \"%s[%s]\" % (mfunc, self.stringify(args, \", \"))\n+                    return \"%s[%s]\" % (mfunc, self.stringify(expr.args, \", \"))\n+        return func_name + \"[%s]\" % self.stringify(expr.args, \", \")\n \n     def _print_Integral(self, expr):\n         if len(expr.variables) == 1 and not expr.limits[0][1:]:\n", "occurrence": 1}
