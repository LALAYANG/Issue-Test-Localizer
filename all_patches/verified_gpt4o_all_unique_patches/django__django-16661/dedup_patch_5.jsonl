{"model_name_or_path": "agentless", "instance_id": "django__django-16661", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 20a301b..344b6c9 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -480,21 +480,15 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n             # Either a local field filter, or no fields at all.\n             return True\n         valid_lookups = {self.date_hierarchy}\n-        for filter_item in self.list_filter:\n-            if isinstance(filter_item, type) and issubclass(\n-                filter_item, SimpleListFilter\n-            ):\n-                valid_lookups.add(filter_item.parameter_name)\n-            elif isinstance(filter_item, (list, tuple)):\n-                valid_lookups.add(filter_item[0])\n-            else:\n-                valid_lookups.add(filter_item)\n-\n-        # Is it a valid relational lookup?\n-        return not {\n-            LOOKUP_SEP.join(relation_parts),\n-            LOOKUP_SEP.join(relation_parts + [part]),\n-        }.isdisjoint(valid_lookups)\n+        def is_valid_lookup(lookup_parts):\n+            return not LOOKUP_SEP.join(lookup_parts).isdisjoint(valid_lookups)\n+\n+        # Check all lookups to ensure they are valid\n+        for i in range(len(relation_parts)):\n+            if not is_valid_lookup(relation_parts[:i+1]):\n+                return False\n+        \n+        return True\n \n     def to_field_allowed(self, request, to_field):\n         \"\"\"\n"}
