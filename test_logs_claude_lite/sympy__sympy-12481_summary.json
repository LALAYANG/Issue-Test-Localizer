{
  "instance_id": "sympy__sympy-12481",
  "container_id": "a7f412f5f7b7e1a504fe8ce0dbe888e6fff45d00543cbb29ef891dfeab899280",
  "regression": {
    "results": [
      {
        "patch_file": "all_patches/lite_claude_all_unique_patches/sympy__sympy-12481/dedup_patch_7.jsonl",
        "inst": "sympy__sympy-12481",
        "passed": 2,
        "failed": 0
      },
      {
        "patch_file": "all_patches/lite_claude_all_unique_patches/sympy__sympy-12481/dedup_patch_0.jsonl",
        "inst": "sympy__sympy-12481",
        "passed": 1,
        "failed": 1
      },
      {
        "patch_file": "all_patches/lite_claude_all_unique_patches/sympy__sympy-12481/dedup_patch_10.jsonl",
        "inst": "sympy__sympy-12481",
        "passed": 1,
        "failed": 1
      },
      {
        "patch_file": "all_patches/lite_claude_all_unique_patches/sympy__sympy-12481/dedup_patch_15.jsonl",
        "inst": "sympy__sympy-12481",
        "passed": 1,
        "failed": 1
      },
      {
        "patch_file": "all_patches/lite_claude_all_unique_patches/sympy__sympy-12481/dedup_patch_2.jsonl",
        "inst": "sympy__sympy-12481",
        "passed": 1,
        "failed": 1
      },
      {
        "patch_file": "all_patches/lite_claude_all_unique_patches/sympy__sympy-12481/dedup_patch_8.jsonl",
        "inst": "sympy__sympy-12481",
        "passed": 1,
        "failed": 1
      },
      {
        "patch_file": "all_patches/lite_claude_all_unique_patches/sympy__sympy-12481/dedup_patch_9.jsonl",
        "inst": "sympy__sympy-12481",
        "passed": 1,
        "failed": 1
      },
      {
        "patch_file": "all_patches/lite_claude_all_unique_patches/sympy__sympy-12481/dedup_patch_1.jsonl",
        "inst": "sympy__sympy-12481",
        "passed": 0,
        "failed": 2
      },
      {
        "patch_file": "all_patches/lite_claude_all_unique_patches/sympy__sympy-12481/dedup_patch_11.jsonl",
        "inst": "sympy__sympy-12481",
        "passed": 0,
        "failed": 2
      },
      {
        "patch_file": "all_patches/lite_claude_all_unique_patches/sympy__sympy-12481/dedup_patch_12.jsonl",
        "inst": "sympy__sympy-12481",
        "passed": 0,
        "failed": 2
      },
      {
        "patch_file": "all_patches/lite_claude_all_unique_patches/sympy__sympy-12481/dedup_patch_13.jsonl",
        "inst": "sympy__sympy-12481",
        "passed": 0,
        "failed": 2
      },
      {
        "patch_file": "all_patches/lite_claude_all_unique_patches/sympy__sympy-12481/dedup_patch_14.jsonl",
        "inst": "sympy__sympy-12481",
        "passed": 0,
        "failed": 2
      },
      {
        "patch_file": "all_patches/lite_claude_all_unique_patches/sympy__sympy-12481/dedup_patch_3.jsonl",
        "inst": "sympy__sympy-12481",
        "passed": 0,
        "failed": 2
      },
      {
        "patch_file": "all_patches/lite_claude_all_unique_patches/sympy__sympy-12481/dedup_patch_4.jsonl",
        "inst": "sympy__sympy-12481",
        "passed": 0,
        "failed": 2
      },
      {
        "patch_file": "all_patches/lite_claude_all_unique_patches/sympy__sympy-12481/dedup_patch_5.jsonl",
        "inst": "sympy__sympy-12481",
        "passed": 0,
        "failed": 2
      },
      {
        "patch_file": "all_patches/lite_claude_all_unique_patches/sympy__sympy-12481/dedup_patch_6.jsonl",
        "inst": "sympy__sympy-12481",
        "passed": 0,
        "failed": 2
      }
    ],
    "top_passed": 2,
    "top_subset_size": 1
  },
  "reproduction": {
    "sympy/combinatorics/tests/test_permutations.py::test_args#1": {
      "repro_fails_on_clean": false,
      "outcomes": []
    },
    "sympy/combinatorics/tests/test_permutations.py::test_Permutation#2": {
      "repro_fails_on_clean": false,
      "outcomes": []
    },
    "sympy/combinatorics/tests/test_permutations.py::test_args#3": {
      "repro_fails_on_clean": false,
      "outcomes": []
    },
    "sympy/combinatorics/tests/test_permutations.py::test_Permutation#4": {
      "repro_fails_on_clean": false,
      "outcomes": []
    },
    "sympy/combinatorics/tests/test_permutations.py::test_mul#5": {
      "repro_fails_on_clean": false,
      "outcomes": []
    },
    "sympy/combinatorics/tests/test_permutations.py::test_Permutation#6": {
      "repro_fails_on_clean": false,
      "outcomes": []
    }
  }
}